<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>VideoApp - Fixed Search</title>
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #000;
            color: #fff;
            overflow: hidden;
            position: relative;
            height: 100vh;
        }

        /* App Container */
        .app-container {
            position: relative;
            width: 100%;
            height: 100vh;
            overflow: hidden;
        }

        /* Top Navigation */
        .top-nav {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 80px;
            background: linear-gradient(180deg, rgba(0,0,0,0.8) 0%, transparent 100%);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
            z-index: 100;
            backdrop-filter: blur(10px);
        }

        .logo {
            font-size: 28px;
            font-weight: bold;
            color: #fe2c55;
            text-decoration: none;
        }

        .nav-icons {
            display: flex;
            gap: 20px;
        }

        .nav-icon {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .nav-icon:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        /* Demo Content */
        .demo-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            text-align: center;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .demo-content h1 {
            font-size: 48px;
            margin-bottom: 20px;
            color: #fff;
            text-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .demo-content p {
            font-size: 18px;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 30px;
        }

        .demo-btn {
            background: #fe2c55;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .demo-btn:hover {
            background: #e0244a;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(254, 44, 85, 0.4);
        }

        /* Search Modal - FIXED STYLING */
        .search-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 2000;
            display: none;
            align-items: flex-start;
            justify-content: center;
            padding-top: 80px;
            backdrop-filter: blur(20px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .search-modal.show {
            display: flex;
            opacity: 1;
        }

        .search-content {
            background: rgba(22, 24, 35, 0.98);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            width: 90%;
            max-width: 600px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            max-height: 80vh;
            overflow-y: auto;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .search-modal.show .search-content {
            transform: scale(1);
        }

        .search-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .search-header h3 {
            color: #fff;
            font-size: 24px;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .search-close {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: #fff;
            font-size: 20px;
            cursor: pointer;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .search-close:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(90deg);
        }

        /* Search Form - FIXED */
        .search-form {
            margin-bottom: 25px;
        }

        .search-input-container {
            position: relative;
            margin-bottom: 15px;
        }

        .search-input {
            width: 100%;
            padding: 15px 20px 15px 50px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            font-family: inherit;
        }

        .search-input:focus {
            border-color: #fe2c55;
            box-shadow: 0 0 0 3px rgba(254, 44, 85, 0.2);
            background: rgba(255, 255, 255, 0.15);
        }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .search-icon {
            position: absolute;
            left: 18px;
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255, 255, 255, 0.6);
            font-size: 16px;
            pointer-events: none;
        }

        .search-clear {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.6);
            font-size: 18px;
            cursor: pointer;
            opacity: 0;
            transition: all 0.3s ease;
            padding: 5px;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .search-clear:hover {
            color: #fe2c55;
            background: rgba(255, 255, 255, 0.1);
        }

        .search-clear.show {
            opacity: 1;
        }

        .search-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #fe2c55, #ff6b35);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            font-family: inherit;
        }

        .search-btn:hover:not(:disabled) {
            background: linear-gradient(135deg, #e0244a, #e55a2b);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(254, 44, 85, 0.4);
        }

        .search-btn:active {
            transform: translateY(0);
        }

        .search-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Search Results - FIXED */
        .search-results {
            margin-top: 20px;
        }

        .results-header {
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .results-count {
            color: #ccc;
            font-size: 14px;
        }

        .results-grid {
            display: grid;
            gap: 15px;
            max-height: 400px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .result-item {
            display: flex;
            gap: 15px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid transparent;
        }

        .result-item:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(254, 44, 85, 0.5);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(254, 44, 85, 0.2);
        }

        .result-thumbnail {
            width: 80px;
            height: 60px;
            border-radius: 8px;
            overflow: hidden;
            flex-shrink: 0;
            background: #333;
            position: relative;
        }

        .result-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .result-thumbnail .placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            font-size: 20px;
        }

        .result-info {
            flex: 1;
            min-width: 0;
        }

        .result-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 5px;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            color: #fff;
        }

        .result-meta {
            display: flex;
            gap: 10px;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.6);
            margin-bottom: 5px;
        }

        .result-meta span {
            display: flex;
            align-items: center;
            gap: 3px;
        }

        .result-meta i {
            color: #fe2c55;
        }

        .result-description {
            font-size: 13px;
            color: rgba(255, 255, 255, 0.7);
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        /* States */
        .loading-state {
            text-align: center;
            padding: 40px 20px;
            color: rgba(255, 255, 255, 0.6);
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid #fe2c55;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .empty-state, .no-query-state {
            text-align: center;
            padding: 40px 20px;
            color: rgba(255, 255, 255, 0.6);
        }

        .empty-state i, .no-query-state i {
            font-size: 48px;
            margin-bottom: 15px;
            color: rgba(255, 255, 255, 0.3);
        }

        .empty-state h3, .no-query-state h3 {
            margin-bottom: 10px;
            color: #fff;
        }

        /* Scrollbar styling */
        .results-grid::-webkit-scrollbar {
            width: 6px;
        }

        .results-grid::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .results-grid::-webkit-scrollbar-thumb {
            background: rgba(254, 44, 85, 0.6);
            border-radius: 3px;
        }

        .results-grid::-webkit-scrollbar-thumb:hover {
            background: rgba(254, 44, 85, 0.8);
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .search-content {
                width: 95%;
                padding: 25px 20px;
                margin-top: -20px;
            }
            
            .search-header h3 {
                font-size: 20px;
            }
            
            .search-input {
                font-size: 16px; /* Prevent zoom on iOS */
            }
            
            .result-item {
                gap: 12px;
                padding: 12px;
            }
            
            .result-thumbnail {
                width: 60px;
                height: 45px;
            }
            
            .result-title {
                font-size: 14px;
            }

            .demo-content h1 {
                font-size: 36px;
            }

            .demo-content p {
                font-size: 16px;
            }
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .result-item {
            animation: fadeIn 0.4s ease forwards;
        }

        .result-item:nth-child(1) { animation-delay: 0.1s; }
        .result-item:nth-child(2) { animation-delay: 0.2s; }
        .result-item:nth-child(3) { animation-delay: 0.3s; }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Top Navigation -->
        <nav class="top-nav">
            <a href="/" class="logo">VideoApp</a>
            <div class="nav-icons">
                <button class="nav-icon" id="searchBtn" type="button" title="Search Videos">
                    <i class="fas fa-search"></i>
                </button>
                <button class="nav-icon" id="menuBtn" type="button" title="Menu">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </nav>

        <!-- Demo Content -->
        <div class="demo-content">
            <h1>🎥 VideoApp</h1>
            <p>Your ultimate video platform experience</p>
            <p>Click the search icon above to test the search functionality</p>
            <button class="demo-btn" onclick="document.getElementById('searchBtn').click()">
                <i class="fas fa-search"></i>
                Try Search Now
            </button>
        </div>

        <!-- Search Modal - FIXED STRUCTURE -->
        <div class="search-modal" id="searchModal">
            <div class="search-content">
                <div class="search-header">
                    <h3><i class="fas fa-search"></i> Search Videos</h3>
                    <button class="search-close" id="searchClose" type="button">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <form class="search-form" id="searchForm">
                    <div class="search-input-container">
                        <i class="fas fa-search search-icon"></i>
                        <input 
                            type="text" 
                            class="search-input" 
                            id="searchInput" 
                            placeholder="Search for videos, creators, or topics..." 
                            autocomplete="off"
                            autocapitalize="off"
                            spellcheck="false"
                        >
                        <button type="button" class="search-clear" id="searchClear">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <button type="submit" class="search-btn" id="searchSubmitBtn">
                        <i class="fas fa-search"></i>
                        <span>Search</span>
                    </button>
                </form>

                <div class="search-results" id="searchResults">
                    <div class="no-query-state">
                        <i class="fas fa-search"></i>
                        <h3>Search Videos</h3>
                        <p>Enter keywords above to find amazing videos</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables - FIXED
        let isSearching = false;
        let searchTimeout = null;

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Search functionality initializing...');
            setupSearchFunctionality();
        });

        function setupSearchFunctionality() {
            console.log('🔧 Setting up search functionality...');
            
            // Get all elements
            const searchBtn = document.getElementById('searchBtn');
            const searchModal = document.getElementById('searchModal');
            const searchClose = document.getElementById('searchClose');
            const searchForm = document.getElementById('searchForm');
            const searchInput = document.getElementById('searchInput');
            const searchClear = document.getElementById('searchClear');

            // Verify elements exist
            if (!searchBtn || !searchModal || !searchClose || !searchForm || !searchInput || !searchClear) {
                console.error('❌ Missing search elements!');
                return;
            }

            console.log('✅ All search elements found');

            // 1. Search button - Open modal
            searchBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('🔍 Search button clicked');
                openSearchModal();
            });

            // 2. Close modal events
            searchClose.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('❌ Close button clicked');
                closeSearchModal();
            });
            
            searchModal.addEventListener('click', function(e) {
                if (e.target === searchModal) {
                    console.log('❌ Modal backdrop clicked');
                    closeSearchModal();
                }
            });

            // 3. Search form submission
            searchForm.addEventListener('submit', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('📝 Form submitted');
                performSearch();
            });

            // 4. Search input events
            searchInput.addEventListener('input', function(e) {
                const query = e.target.value.trim();
                console.log('⌨️ Input changed:', query);
                
                updateClearButton();
                
                // Clear previous timeout
                clearTimeout(searchTimeout);
                
                if (query.length === 0) {
                    showNoQueryState();
                    return;
                }
                
                // Auto-search after user stops typing
                searchTimeout = setTimeout(() => {
                    if (query.length >= 2) {
                        console.log('🔍 Auto-searching for:', query);
                        performSearch();
                    }
                }, 800);
            });

            // 5. Clear button
            searchClear.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('🗑️ Clear button clicked');
                searchInput.value = '';
                searchInput.focus();
                updateClearButton();
                showNoQueryState();
            });

            // 6. Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // Escape to close modal
                if (e.key === 'Escape' && searchModal.classList.contains('show')) {
                    console.log('⌨️ Escape pressed - closing modal');
                    closeSearchModal();
                }
                
                // Ctrl/Cmd + K to open search
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    console.log('⌨️ Ctrl+K pressed - opening search');
                    openSearchModal();
                }
            });

            console.log('✅ Search functionality setup complete!');
        }

        function openSearchModal() {
            console.log('🔓 Opening search modal...');
            
            const searchModal = document.getElementById('searchModal');
            const searchInput = document.getElementById('searchInput');
            
            if (!searchModal || !searchInput) {
                console.error('❌ Modal elements not found');
                return;
            }
            
            // Show modal with animation
            searchModal.style.display = 'flex';
            
            // Force reflow for animation
            setTimeout(() => {
                searchModal.classList.add('show');
            }, 10);
            
            // Focus on input after animation
            setTimeout(() => {
                searchInput.focus();
                console.log('🎯 Input focused');
            }, 150);
            
            // Prevent body scroll
            document.body.style.overflow = 'hidden';
            
            console.log('✅ Search modal opened');
        }

        function closeSearchModal() {
            console.log('🔒 Closing search modal...');
            
            const searchModal = document.getElementById('searchModal');
            const searchInput = document.getElementById('searchInput');
            
            if (!searchModal || !searchInput) {
                console.error('❌ Modal elements not found');
                return;
            }
            
            // Hide modal with animation
            searchModal.classList.remove('show');
            
            // Hide after animation
            setTimeout(() => {
                searchModal.style.display = 'none';
            }, 300);
            
            // Clear search and reset state
            searchInput.value = '';
            updateClearButton();
            showNoQueryState();
            
            // Restore body scroll
            document.body.style.overflow = '';
            
            console.log('✅ Search modal closed');
        }

        function updateClearButton() {
            const searchInput = document.getElementById('searchInput');
            const searchClear = document.getElementById('searchClear');
            
            if (!searchInput || !searchClear) return;
            
            if (searchInput.value.trim().length > 0) {
                searchClear.classList.add('show');
            } else {
                searchClear.classList.remove('show');
            }
        }

        async function performSearch() {
            if (isSearching) {
                console.log('⏳ Search already in progress...');
                return;
            }

            const searchInput = document.getElementById('searchInput');
            const query = searchInput ? searchInput.value.trim() : '';

            if (!query || query.length < 2) {
                showToast('Please enter at least 2 characters', 'warning');
                return;
            }

            console.log('🚀 Starting search for:', query);
            
            isSearching = true;
            
            // Update search button state
            const searchBtn = document.getElementById('searchSubmitBtn');
            let originalContent = '';
            
            if (searchBtn) {
                originalContent = searchBtn.innerHTML;
                searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> <span>Searching...</span>';
                searchBtn.disabled = true;
            }

            // Show loading state
            showLoadingState();

            try {
                // Simulate API call for demo (replace with real API call)
                console.log('📡 Making API call...');
                
                // Replace this with your actual API call:
                // const response = await fetch(`/api/videos/search?q=${encodeURIComponent(query)}`);
                // const data = await response.json();
                
                // For demo, simulate network delay and mock results
                await new Promise(resolve => setTimeout(resolve, 1000));
                const mockResults = generateMockResults(query);
                
                console.log('📋 Search results:', mockResults.length, 'items');
                displaySearchResults(mockResults, query);
                
            } catch (error) {
                console.error('❌ Search error:', error);
                showErrorState('Search failed. Please try again.');
            } finally {
                isSearching = false;
                
                // Restore search button
                if (searchBtn) {
                    searchBtn.innerHTML = originalContent;
                    searchBtn.disabled = false;
                }
                
                console.log('✅ Search completed');
            }
        }

        function generateMockResults(query) {
            // Mock data for demonstration - replace with real API data
            const mockVideos = [
                {
                    id: 1,
                    title: `Amazing ${query} Tutorial`,
                    description: `Learn everything about ${query} in this comprehensive tutorial that covers all the basics and advanced techniques.`,
                    thumbnail: null, // Will show placeholder
                    views_count: 15420,
                    likes_count: 892,
                    username: 'TechGuru',
                    slug: 'amazing-tutorial'
                },
                {
                    id: 2,
                    title: `${query} Tips and Tricks`,
                    description: `Professional tips for mastering ${query} techniques used by experts in the field.`,
                    thumbnail: null,
                    views_count: 8734,
                    likes_count: 567,
                    username: 'ProCreator',
                    slug: 'tips-and-tricks'
                },
                {
                    id: 3,
                    title: `Best ${query} Examples`,
                    description: `Showcase of the best ${query} examples from around the world, featuring top creators.`,
                    thumbnail: null,
                    views_count: 12156,
                    likes_count: 743,
                    username: 'CreativeStudio',
                    slug: 'best-examples'
                },
                {
                    id: 4,
                    title: `${query} for Beginners`,
                    description: `Complete beginner's guide to ${query} with step-by-step instructions.`,
                    thumbnail: null,
                    views_count: 5421,
                    likes_count: 321,
                    username: 'LearnWithMe',
                    slug: 'beginners-guide'
                }
            ];

            // Filter based on query relevance
            return mockVideos.filter(video => 
                video.title.toLowerCase().includes(query.toLowerCase()) ||
                video.description.toLowerCase().includes(query.toLowerCase())
            );
        }

        function displaySearchResults(results, query) {
            console.log('📺 Displaying search results...');
            
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) {
                console.error('❌ Search results container not found');
                return;
            }
            
            if (!results || results.length === 0) {
                searchResults.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-search"></i>
                        <h3>No results found</h3>
                        <p>No videos found for "${query}". Try different keywords or check your spelling.</p>
                    </div>
                `;
                return;
            }

            searchResults.innerHTML = `
                <div class="results-header">
                    <div class="results-count">Found ${results.length} result${results.length !== 1 ? 's' : ''} for "${query}"</div>
                </div>
                <div class="results-grid">
                    ${results.map((video, index) => `
                        <div class="result-item" onclick="goToVideo('${video.slug}', '${video.title}')" style="animation-delay: ${index * 0.1}s">
                            <div class="result-thumbnail">
                                ${video.thumbnail ? 
                                    `<img src="${video.thumbnail}" alt="${video.title}" loading="lazy">` :
                                    `<div class="placeholder"><i class="fas fa-play"></i></div>`
                                }
                            </div>
                            <div class="result-info">
                                <div class="result-title">${video.title}</div>
                                <div class="result-meta">
                                    <span><i class="fas fa-eye"></i> ${formatNumber(video.views_count)}</span>
                                    <span><i class="fas fa-heart"></i> ${formatNumber(video.likes_count)}</span>
                                    <span><i class="fas fa-user"></i> @${video.username}</span>
                                </div>
                                <div class="result-description">${video.description}</div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
            
            console.log('✅ Search results displayed');
        }

        function showLoadingState() {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="loading-state">
                    <div class="spinner"></div>
                    <p>Searching videos...</p>
                </div>
            `;
        }

        function showErrorState(message) {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Search Error</h3>
                    <p>${message}</p>
                </div>
            `;
        }

        function showNoQueryState() {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="no-query-state">
                    <i class="fas fa-search"></i>
                    <h3>Search Videos</h3>
                    <p>Enter keywords above to find amazing videos</p>
                </div>
            `;
        }

        function goToVideo(slug, title) {
            console.log('🎬 Navigating to video:', slug);
            showToast(`Opening: ${title}`, 'success');
            closeSearchModal();
            
            // In your real implementation, navigate to the video:
            // window.location.href = `/video/${slug}`;
            
            // For demo, just show a message
            setTimeout(() => {
                showToast('Demo: In real app, this would open the video page', 'info');
            }, 1000);
        }

        function formatNumber(num) {
            if (num >= 1000000) {
                return (num / 1000000).toFixed(1) + 'M';
            } else if (num >= 1000) {
                return (num / 1000).toFixed(1) + 'K';
            }
            return num.toString();
        }

        function showToast(message, type = 'info', duration = 3000) {
            // Remove existing toasts
            document.querySelectorAll('.toast').forEach(toast => toast.remove());
            
            const toast = document.createElement('div');
            toast.className = 'toast';
            
            const colors = {
                success: '#27ae60',
                error: '#e74c3c',
                warning: '#f39c12',
                info: '#3498db'
            };
            
            const icons = {
                success: 'fas fa-check-circle',
                error: 'fas fa-exclamation-circle',
                warning: 'fas fa-exclamation-triangle',
                info: 'fas fa-info-circle'
            };
            
            toast.style.cssText = `
                position: fixed;
                bottom: 30px;
                left: 50%;
                transform: translateX(-50%);
                background: ${colors[type] || colors.info};
                color: white;
                padding: 15px 20px;
                border-radius: 25px;
                z-index: 3000;
                font-size: 14px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3);
                display: flex;
                align-items: center;
                gap: 10px;
                max-width: 400px;
                backdrop-filter: blur(10px);
                animation: toastSlideUp 0.3s ease;
            `;
            
            toast.innerHTML = `
                <i class="${icons[type] || icons.info}"></i>
                <span>${message}</span>
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'toastSlideDown 0.3s ease forwards';
                setTimeout(() => toast.remove(), 300);
            }, duration);
        }

        // Add CSS animations for toast
        const style = document.createElement('style');
        style.textContent = `
            @keyframes toastSlideUp {
                from {
                    opacity: 0;
                    transform: translate(-50%, 20px);
                }
                to {
                    opacity: 1;
                    transform: translate(-50%, 0);
                }
            }
            
            @keyframes toastSlideDown {
                from {
                    opacity: 1;
                    transform: translate(-50%, 0);
                }
                to {
                    opacity: 0;
                    transform: translate(-50%, 20px);
                }
            }
        `;
        document.head.appendChild(style);

        // Menu button handler (for completeness)
        document.getElementById('menuBtn')?.addEventListener('click', function() {
            showToast('Menu functionality would be implemented here', 'info');
        });
    </script>
</body>
</html>
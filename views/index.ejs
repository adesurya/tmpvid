<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title><%= title || 'VideoApp' %></title>
    
    <!-- Basic Meta Tags -->
    <meta name="description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <meta name="author" content="VideoApp">
    <meta name="robots" content="index, follow">
    
    <!-- OpenGraph Meta Tags -->
    <meta property="og:type" content="website">
    <meta property="og:title" content="<%= title || 'VideoApp - Amazing Videos' %>">
    <meta property="og:description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <meta property="og:url" content="<%= typeof req !== 'undefined' ? req.protocol + '://' + req.get('host') + req.originalUrl : 'https://videoapp.com' %>">
    <meta property="og:site_name" content="VideoApp">
    <% if (videos && videos[0] && videos[0].thumbnail) { %>
    <meta property="og:image" content="<%= videos[0].thumbnail %>">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:image:alt" content="<%= videos[0].title %>">
    <% } else { %>
    <meta property="og:image" content="/images/default-og-image.jpg">
    <% } %>
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@VideoApp">
    <meta name="twitter:title" content="<%= title || 'VideoApp - Amazing Videos' %>">
    <meta name="twitter:description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <% if (videos && videos[0] && videos[0].thumbnail) { %>
    <meta name="twitter:image" content="<%= videos[0].thumbnail %>">
    <meta name="twitter:image:alt" content="<%= videos[0].title %>">
    <% } else { %>
    <meta name="twitter:image" content="/images/default-twitter-image.jpg">
    <% } %>
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#fe2c55">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/main.css">
    
    <style>
        /* Enhanced Ad Container Styles with Google Ads support */
        .ad-container {
            position: relative;
            width: 100%;
            height: 100vh;
            scroll-snap-align: start;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000;
            overflow: hidden;
            cursor: pointer;
        }

        .ad-media {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .ad-media:hover {
            transform: scale(1.02);
        }

        /* Google Ads Container */
        .google-ads-container {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            position: relative;
            overflow: hidden;
        }

        .google-ads-script {
            width: 100%;
            height: 100%;
            border: none;
            background: transparent;
        }

        .google-ads-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: #6c757d;
            text-align: center;
            padding: 40px;
        }

        .google-ads-placeholder i {
            font-size: 64px;
            margin-bottom: 20px;
            color: #adb5bd;
        }

        .google-ads-placeholder h3 {
            margin: 0 0 10px 0;
            font-size: 24px;
            font-weight: 600;
        }

        .google-ads-placeholder p {
            margin: 0;
            font-size: 16px;
            opacity: 0.8;
        }

        .ad-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(
                transparent 40%,
                rgba(0, 0, 0, 0.3) 70%,
                rgba(0, 0, 0, 0.8) 100%
            );
            pointer-events: none;
        }

        .ad-label {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(254, 44, 85, 0.9);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px rgba(254, 44, 85, 0.3);
            animation: adPulse 2s infinite;
            z-index: 10;
        }

        .ad-label.google-ads {
            background: rgba(66, 133, 244, 0.9);
            box-shadow: 0 4px 15px rgba(66, 133, 244, 0.3);
        }

        @keyframes adPulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.05); opacity: 0.9; }
        }

        .ad-skip {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 15;
        }

        .ad-skip-btn {
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .ad-skip-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.5);
            transform: scale(1.05);
        }

        .ad-info {
            position: absolute;
            bottom: 80px;
            left: 20px;
            right: 20px;
            color: white;
            z-index: 10;
        }

        .ad-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 8px;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.7);
            line-height: 1.2;
        }

        .ad-description {
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 16px;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.7);
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .ad-cta {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: linear-gradient(135deg, #fe2c55, #ff6b35);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 6px 20px rgba(254, 44, 85, 0.4);
            border: none;
            cursor: pointer;
        }

        .ad-cta:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(254, 44, 85, 0.5);
            background: linear-gradient(135deg, #e0244a, #e55a2b);
        }

        .ad-cta.hidden {
            display: none;
        }

        .ad-duration-bar {
            position: absolute;
            bottom: 0;
            left: 0;
            height: 4px;
            background: rgba(254, 44, 85, 0.8);
            transition: width 0.1s linear;
            z-index: 10;
            width: 0%;
        }

        .ad-controls {
            position: absolute;
            bottom: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
            z-index: 15;
        }

        .ad-sound-btn {
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            width: 44px;
            height: 44px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
        }

        .ad-sound-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .ad-sound-btn.active {
            background: rgba(254, 44, 85, 0.8);
        }

        /* Loading spinner for ads */
        .ad-loading {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: white;
        }

        .ad-loading .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid #fe2c55;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Video container styles remain the same */
        .video-container {
            position: relative;
            width: 100%;
            height: 100vh;
            scroll-snap-type: y mandatory;
            overflow-y: scroll;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        .video-container::-webkit-scrollbar {
            display: none;
        }

        .video-item {
            position: relative;
            width: 100%;
            height: 100vh;
            scroll-snap-align: start;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000;
        }

        /* Mobile Responsive for Ads */
        @media (max-width: 768px) {
            .ad-title {
                font-size: 20px;
            }

            .ad-description {
                font-size: 14px;
            }

            .ad-cta {
                padding: 10px 20px;
                font-size: 14px;
            }

            .ad-info {
                bottom: 60px;
                left: 15px;
                right: 15px;
            }

            .ad-label {
                top: 15px;
                left: 15px;
                padding: 6px 12px;
                font-size: 12px;
            }

            .ad-skip {
                top: 15px;
                right: 15px;
            }

            .ad-skip-btn {
                padding: 6px 12px;
                font-size: 12px;
            }

            .ad-controls {
                bottom: 15px;
                right: 15px;
            }

            .ad-sound-btn {
                width: 40px;
                height: 40px;
                font-size: 14px;
            }

            .google-ads-placeholder {
                padding: 20px;
            }

            .google-ads-placeholder i {
                font-size: 48px;
            }

            .google-ads-placeholder h3 {
                font-size: 20px;
            }

            .google-ads-placeholder p {
                font-size: 14px;
            }
        }

        @media (max-width: 480px) {
            .ad-title {
                font-size: 18px;
            }

            .ad-description {
                font-size: 13px;
            }

            .ad-cta {
                padding: 8px 16px;
                font-size: 13px;
            }
        }

        /* Error state for ads */
        .ad-error {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #dc3545;
            text-align: center;
            padding: 40px;
        }

        .ad-error i {
            font-size: 64px;
            margin-bottom: 20px;
        }

        .ad-error h3 {
            margin: 0 0 10px 0;
            font-size: 24px;
        }

        .ad-error p {
            margin: 0;
            opacity: 0.8;
        }

        /* Toast styles */
        .toast {
            animation: toastSlideIn 0.3s ease-out;
        }

        @keyframes toastSlideIn {
            from {
                transform: translate(-50%, 100%);
                opacity: 0;
            }
            to {
                transform: translate(-50%, 0);
                opacity: 1;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Top Navigation -->
        <nav class="top-nav">
            <a href="/" class="logo">VideoApp</a>
            <div class="nav-icons">
                <button class="nav-icon" id="searchBtn" type="button">
                    <i class="fas fa-search"></i>
                </button>
                <button class="nav-icon" id="menuBtn" type="button">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </nav>

        <!-- Sidebar -->
        <div class="sidebar-overlay" id="sidebarOverlay"></div>
        <nav class="sidebar" id="sidebar">
            <div class="sidebar-content">
                <div class="sidebar-header">
                    <h3>VideoApp</h3>
                    <button class="sidebar-close" id="sidebarClose">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="sidebar-menu">
                    <a href="/" class="menu-item">
                        <i class="fas fa-home"></i>
                        <span>Home</span>
                    </a>
                    <a href="/search" class="menu-item">
                        <i class="fas fa-search"></i>
                        <span>Search</span>
                    </a>
                    <a href="/trending" class="menu-item">
                        <i class="fas fa-fire"></i>
                        <span>Trending</span>
                    </a>
                    <a href="/admin" class="menu-item">
                        <i class="fas fa-cog"></i>
                        <span>Admin Panel</span>
                    </a>
                </div>
            </div>
        </nav>
        <!-- Video Container with Ads Integration -->
        <div class="video-container" id="videoContainer">
            <% if (videos && videos.length > 0) { %>
                <% 
                let displayIndex = 0;
                
                videos.forEach((video, index) => {
                %>
                    <!-- Video Item -->
                    <div class="video-item" data-video-id="<%= video.id %>" data-index="<%= displayIndex %>" data-video-slug="<%= video.slug || video.id %>">
                        <!-- Video Element -->
                        <video 
                            id="video-<%= video.id %>"
                            src="<%= video.video_url %>"
                            loop
                            muted
                            playsinline
                            preload="metadata"
                            class="main-video"
                        ></video>

                        <!-- Video Overlay -->
                        <div class="video-overlay"></div>

                        <!-- Video Controls -->
                        <div class="video-controls">
                            <button class="play-pause-btn" data-video-id="<%= video.id %>" type="button">
                                <i class="fas fa-play" id="play-icon-<%= video.id %>"></i>
                            </button>
                        </div>

                        <!-- Side Actions -->
                        <div class="side-actions">
                            <button class="action-btn like-btn" data-video-id="<%= video.id %>" type="button">
                                <i class="fas fa-heart"></i>
                                <span class="like-count"><%= video.likes_count || 0 %></span>
                            </button>
                            <button class="action-btn comment-btn" data-video-id="<%= video.id %>" type="button">
                                <i class="fas fa-comment"></i>
                                <span class="comment-count">0</span>
                            </button>
                            <button class="action-btn share-btn" data-video-id="<%= video.id %>" data-video-title="<%= video.title %>" data-video-slug="<%= video.slug || video.id %>" type="button">
                                <i class="fas fa-share"></i>
                                <span class="share-count"><%= video.shares_count || 0 %></span>
                            </button>
                            <button class="action-btn sound-btn" data-video-id="<%= video.id %>" type="button">
                                <i class="fas fa-volume-mute" id="sound-icon-<%= video.id %>"></i>
                                <span>Sound</span>
                            </button>
                        </div>

                        <!-- Video Info -->
                        <div class="video-info">
                            <div class="video-title"><%= video.title %></div>
                            <% if (video.description) { %>
                                <div class="video-description"><%= video.description %></div>
                            <% } %>
                            <div class="video-meta">
                                <span><i class="fas fa-eye"></i> <span class="view-count"><%= video.views_count || 0 %></span></span>
                                <% if (video.category_name) { %>
                                    <span><i class="fas fa-tag"></i> <%= video.category_name %></span>
                                <% } %>
                                <% if (video.username) { %>
                                    <span><i class="fas fa-user"></i> @<%= video.username %></span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                <%
                    displayIndex++;
                    
                    // Insert ad after every 2 videos (after index 1, 3, 5, 7, etc.)
                    if ((index + 1) % 2 === 0) {
                        const adCycle = Math.floor((index + 1) / 2);
                        const slotPosition = (adCycle % 5) + 1;
                %>
                    <!-- Ad Container Placeholder -->
                    <div class="ad-container" data-ad-slot="<%= slotPosition %>" data-index="<%= displayIndex %>" data-type="ad" data-video-index="<%= index + 1 %>">
                        <!-- Loading state -->
                        <div class="ad-loading" id="adLoading-<%= slotPosition %>-<%= adCycle %>">
                            <div class="spinner"></div>
                            <p>Loading advertisement...</p>
                        </div>
                        
                        <!-- Ad Label (will be updated based on ad type) -->
                        <div class="ad-label" id="adLabel-<%= slotPosition %>-<%= adCycle %>">
                            <i class="fas fa-bullhorn"></i>
                            <span>Advertisement</span>
                        </div>
                        
                        <!-- Ad Skip Button -->
                        <div class="ad-skip">
                            <button class="ad-skip-btn" onclick="skipAd(this)" data-ad-slot="<%= slotPosition %>">
                                <i class="fas fa-forward"></i>
                                <span>Skip</span>
                            </button>
                        </div>
                        
                        <!-- Ad Duration Bar (for video ads) -->
                        <div class="ad-duration-bar" id="adDurationBar-<%= slotPosition %>-<%= adCycle %>"></div>
                    </div>
                <%
                        displayIndex++;
                    }
                });
                %>
            <% } else { %>
                <!-- Empty State -->
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class="fas fa-video"></i>
                    </div>
                    <h2 class="empty-title">No Videos Yet</h2>
                    <p class="empty-description">
                        Be the first to share amazing content!<br>
                        Upload videos to get started.
                    </p>
                    <button class="empty-button" id="goToAdminBtn" type="button">
                        Go to Admin Dashboard
                    </button>
                </div>
            <% } %>
        </div>

        <!-- Share Modal -->
        <div class="share-modal" id="shareModal">
            <div class="share-content">
                <div class="share-header">
                    <h3>Share Video</h3>
                    <button class="share-close" id="shareClose" type="button">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="shareVideoTitle" style="margin-bottom: 15px; color: #ccc; text-align: center; font-size: 14px;"></div>
                <div class="share-options">
                    <button class="share-option" data-platform="copy" type="button">
                        <i class="fas fa-link"></i>
                        <span>Copy Link</span>
                    </button>
                    <button class="share-option" data-platform="whatsapp" type="button">
                        <i class="fab fa-whatsapp"></i>
                        <span>WhatsApp</span>
                    </button>
                    <button class="share-option" data-platform="twitter" type="button">
                        <i class="fab fa-twitter"></i>
                        <span>Twitter</span>
                    </button>
                    <button class="share-option" data-platform="facebook" type="button">
                        <i class="fab fa-facebook"></i>
                        <span>Facebook</span>
                    </button>
                    <button class="share-option" data-platform="telegram" type="button">
                        <i class="fab fa-telegram"></i>
                        <span>Telegram</span>
                    </button>
                    <button class="share-option" data-platform="linkedin" type="button">
                        <i class="fab fa-linkedin"></i>
                        <span>LinkedIn</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Loading State (initially hidden) -->
        <div class="loading-state" id="loadingState" style="display: none;">
            <div class="spinner"></div>
            <p>Loading more videos...</p>
        </div>
        
        <!-- Search Modal (existing code) -->
        <div class="search-modal" id="searchModal">
            <div class="search-content">
                <div class="search-header">
                    <h3><i class="fas fa-search"></i> Search Videos</h3>
                    <button class="search-close" onclick="closeSearchModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <form class="search-form" onsubmit="event.preventDefault(); performSearch();">
                    <div class="search-input-container">
                        <input 
                            type="text" 
                            class="search-input" 
                            id="searchInput" 
                            placeholder="Search for videos, creators, or topics..." 
                            autocomplete="off"
                            autocapitalize="off"
                            spellcheck="false"
                            oninput="updateClearButton()"
                        >
                        <i class="fas fa-search search-icon"></i>
                        <button type="button" class="search-clear" id="searchClear" onclick="clearSearch()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <button type="submit" class="search-btn" id="searchSubmitBtn">
                        <i class="fas fa-search"></i>
                        <span>Search</span>
                    </button>
                </form>

                <div class="search-results" id="searchResults">
                    <div class="no-query-state">
                        <i class="fas fa-search"></i>
                        <h3>Search Videos</h3>
                        <p>Enter keywords above to find amazing videos and creators</p>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <script>
        // Enhanced global variables with ads support
        let currentVideoIndex = 0;
        let videos = [];
        let isLoading = false;
        let observer;
        let currentShareVideoId = null;
        let currentShareVideoTitle = '';
        let currentShareVideoSlug = '';
        let isOnline = navigator.onLine;
        let scrollTimeout;
        let mutationObserver;
        let wasPlayingBeforeBlur = false;
        let isSearching = false;
        let searchTimeout = null;
        let adTimers = new Map();
        let currentAd = null;
        let dynamicVideosLoaded = [];
        let loadedAds = new Map(); // Track loaded ads to avoid duplicate loading

        // Initialize app with ads support
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            setupGlobalEventListeners();
            setupSearchFunctionality();
            initializeVideoPlayer();
            setupIntersectionObserver();
            setupSwipeNavigation();
            setupMutationObserver();
            loadInitialAds();
            
            setTimeout(() => {
                playCurrentVideo();
            }, 500);
        }

        // ENHANCED AD MANAGEMENT FUNCTIONS

        async function loadInitialAds() {
            console.log('🎯 Loading initial ads...');
            const adContainers = document.querySelectorAll('.ad-container');
            
            for (const container of adContainers) {
                const slot = container.dataset.adSlot;
                const videoIndex = parseInt(container.dataset.videoIndex) || 0;
                const uniqueKey = `${slot}-${videoIndex}`;
                
                if (!loadedAds.has(uniqueKey)) {
                    await loadAdForSlot(container, slot, videoIndex);
                    loadedAds.set(uniqueKey, true);
                }
            }
        }

        async function loadAdForSlot(container, slotPosition, videoIndex) {
            try {
                console.log(`📡 Loading ad for slot ${slotPosition} at video index ${videoIndex}`);
                
                const url = `/api/ads/feed?videoIndex=${videoIndex}&slot=${slotPosition}`;
                console.log(`🔗 Ad API URL: ${url}`);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`❌ Ad API Error ${response.status}:`, errorText);
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log(`📊 Ad API Response:`, data);
                
                if (data.success && data.showAd && data.data) {
                    console.log(`✅ Ad data received for slot ${slotPosition}:`, data.data);
                    renderAd(container, data.data);
                } else {
                    console.log(`❌ No ad available for slot ${slotPosition}:`, data.message || 'No data');
                    hideAdContainer(container);
                }
            } catch (error) {
                console.error('❌ Failed to load ad:', error);
                showAdError(container, `Failed to load advertisement: ${error.message}`);
            }
        }

        function renderAd(container, adData) {
            console.log(`🎨 Rendering ad: ${adData.title} (${adData.type})`);
            
            // Clear loading state
            const loadingElement = container.querySelector('.ad-loading');
            if (loadingElement) {
                loadingElement.remove();
            }

            // Update ad label based on type
            const adLabel = container.querySelector('.ad-label');
            if (adLabel) {
                if (adData.type === 'google_ads') {
                    adLabel.classList.add('google-ads');
                    adLabel.innerHTML = '<i class="fab fa-google"></i><span>Google Ads</span>';
                } else {
                    adLabel.innerHTML = '<i class="fas fa-bullhorn"></i><span>Advertisement</span>';
                }
            }

            let adContent = '';

            // Render based on ad type
            if (adData.type === 'google_ads') {
                adContent = renderGoogleAd(adData);
            } else if (adData.type === 'video') {
                adContent = renderVideoAd(adData);
            } else if (adData.type === 'image') {
                adContent = renderImageAd(adData);
            }

            // Insert ad content
            container.insertAdjacentHTML('afterbegin', adContent);

            // Store ad data on container
            container.dataset.adId = adData.id;
            container.dataset.adType = adData.type;
            container.dataset.adDuration = adData.duration || 0;

            // Setup interactions based on ad type
            if (adData.type === 'video') {
                setupVideoAd(adData.id, adData.duration);
            } else if (adData.type === 'image' && adData.click_url) {
                setupClickableAd(adData.id, adData.click_url, adData.open_new_tab);
            }
            
            console.log(`✅ Ad rendered successfully: ${adData.title}`);
        }

        function renderGoogleAd(adData) {
            // Create a secure container for Google Ads script
            const scriptId = `google-ads-${adData.id}`;
            
            return `
                <div class="google-ads-container" id="${scriptId}">
                    <div class="google-ads-placeholder">
                        <i class="fab fa-google"></i>
                        <h3>Google Advertisement</h3>
                        <p>Loading ad content...</p>
                    </div>
                </div>
                <div class="ad-overlay"></div>
                <div class="ad-info">
                    <div class="ad-title">${adData.title}</div>
                    ${adData.description ? `<div class="ad-description">${adData.description}</div>` : ''}
                </div>
            `;
        }

        function renderVideoAd(adData) {
            return `
                <video class="ad-media" 
                       id="ad-video-${adData.id}"
                       src="${adData.media_url}" 
                       loop 
                       muted 
                       playsinline
                       onended="onAdEnded(${adData.id})">
                </video>
                <div class="ad-overlay"></div>
                <div class="ad-info">
                    <div class="ad-title">${adData.title}</div>
                    ${adData.description ? `<div class="ad-description">${adData.description}</div>` : ''}
                    <button class="ad-cta" onclick="clickAd(${adData.id}, '${adData.click_url}', ${adData.open_new_tab})">
                        <i class="fas fa-external-link-alt"></i>
                        <span>Learn More</span>
                    </button>
                </div>
                <div class="ad-controls">
                    <button class="ad-sound-btn" onclick="toggleAdSound(${adData.id})" data-ad-id="${adData.id}">
                        <i class="fas fa-volume-mute" id="ad-sound-icon-${adData.id}"></i>
                    </button>
                </div>
                <div class="ad-duration-bar" id="adDurationBar-${adData.id}"></div>
            `;
        }

        function renderImageAd(adData) {
            return `
                <img class="ad-media" 
                     src="${adData.media_url}" 
                     alt="${adData.title}"
                     id="ad-image-${adData.id}">
                <div class="ad-overlay"></div>
                <div class="ad-info">
                    <div class="ad-title">${adData.title}</div>
                    ${adData.description ? `<div class="ad-description">${adData.description}</div>` : ''}
                    <button class="ad-cta" onclick="clickAd(${adData.id}, '${adData.click_url}', ${adData.open_new_tab})">
                        <i class="fas fa-external-link-alt"></i>
                        <span>Learn More</span>
                    </button>
                </div>
            `;
        }

        function setupVideoAd(adId, duration) {
            const video = document.getElementById(`ad-video-${adId}`);
            const durationBar = document.getElementById(`adDurationBar-${adId}`);
            
            if (!video) return;
            
            video.addEventListener('loadedmetadata', () => {
                const actualDuration = duration || video.duration;
                
                if (durationBar && actualDuration > 0) {
                    let currentTime = 0;
                    const timer = setInterval(() => {
                        currentTime += 0.1;
                        const progress = (currentTime / actualDuration) * 100;
                        durationBar.style.width = Math.min(progress, 100) + '%';
                        
                        if (currentTime >= actualDuration) {
                            clearInterval(timer);
                            adTimers.delete(adId);
                        }
                    }, 100);
                    
                    adTimers.set(adId, timer);
                }
            });

            video.addEventListener('error', () => {
                console.error(`❌ Video ad ${adId} failed to load`);
                showAdError(video.closest('.ad-container'), 'Video failed to load');
            });
        }

        function setupClickableAd(adId, clickUrl, openNewTab) {
            const adContainer = document.querySelector(`[data-ad-id="${adId}"]`);
            if (!adContainer) return;

            const adMedia = adContainer.querySelector('.ad-media');
            if (adMedia && clickUrl) {
                adMedia.style.cursor = 'pointer';
                adMedia.addEventListener('click', () => {
                    clickAd(adId, clickUrl, openNewTab);
                });
            }
        }

        function setupGoogleAdsScript(adId, script) {
            // For security reasons, we'll implement Google Ads loading carefully
            const container = document.getElementById(`google-ads-${adId}`);
            if (!container) return;

            try {
                // Create a sandboxed environment for the Google Ads script
                const scriptElement = document.createElement('div');
                scriptElement.innerHTML = script;
                
                // Replace placeholder with actual ad content
                const placeholder = container.querySelector('.google-ads-placeholder');
                if (placeholder) {
                    placeholder.style.display = 'none';
                }
                
                container.appendChild(scriptElement);
                
                console.log(`✅ Google Ads script loaded for ad ${adId}`);
            } catch (error) {
                console.error(`❌ Failed to load Google Ads script for ad ${adId}:`, error);
                showAdError(container.closest('.ad-container'), 'Failed to load Google Ads');
            }
        }

        async function clickAd(adId, clickUrl, openNewTab) {
            try {
                console.log(`🖱️ Ad ${adId} clicked, redirecting to: ${clickUrl}`);
                
                // Record click with proper request body
                const requestBody = {
                    timestamp: new Date().toISOString(),
                    clickUrl: clickUrl,
                    openNewTab: openNewTab
                };
                
                const response = await fetch(`/api/ads/${adId}/click`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        console.log(`✅ Ad click recorded for ad ${adId}`);
                    }
                } else {
                    console.warn(`⚠️ Failed to record ad click: ${response.status}`);
                }
                
                // Open URL regardless of tracking success
                if (clickUrl) {
                    if (openNewTab) {
                        window.open(clickUrl, '_blank', 'noopener,noreferrer');
                    } else {
                        window.location.href = clickUrl;
                    }
                    
                    showToast('Opening advertiser link...', 'info', 2000);
                }
            } catch (error) {
                console.error('❌ Failed to record ad click:', error);
                // Still open the link even if tracking fails
                if (clickUrl) {
                    if (openNewTab) {
                        window.open(clickUrl, '_blank', 'noopener,noreferrer');
                    } else {
                        window.location.href = clickUrl;
                    }
                }
            }
        }

        function skipAd(button) {
            const adContainer = button.closest('.ad-container');
            if (!adContainer) return;
            
            const adId = adContainer.dataset.adId;
            
            console.log(`⏭️ Skipping ad ${adId}`);
            
            // Clear any timers
            if (adTimers.has(parseInt(adId))) {
                clearInterval(adTimers.get(parseInt(adId)));
                adTimers.delete(parseInt(adId));
            }
            
            // Scroll to next item
            scrollToNextItem(adContainer);
            
            showToast('Ad skipped', 'info', 1500);
        }

        function toggleAdSound(adId) {
            const video = document.getElementById(`ad-video-${adId}`);
            const icon = document.getElementById(`ad-sound-icon-${adId}`);
            const button = document.querySelector(`[data-ad-id="${adId}"].ad-sound-btn`);
            
            if (!video || !icon || !button) return;
            
            if (video.muted) {
                video.muted = false;
                icon.className = 'fas fa-volume-up';
                button.classList.add('active');
            } else {
                video.muted = true;
                icon.className = 'fas fa-volume-mute';
                button.classList.remove('active');
            }
        }

        function onAdEnded(adId) {
            console.log(`🏁 Video ad ${adId} ended`);
            
            // Auto-scroll to next item when video ad ends
            const adContainer = document.querySelector(`[data-ad-id="${adId}"]`);
            if (adContainer) {
                setTimeout(() => {
                    scrollToNextItem(adContainer);
                }, 500);
            }
        }

        function hideAdContainer(container) {
            console.log('🚫 Hiding ad container');
            container.style.display = 'none';
        }

        function showAdError(container, message) {
            console.error('❌ Ad error:', message);
            
            // Clear loading state
            const loadingElement = container.querySelector('.ad-loading');
            if (loadingElement) {
                loadingElement.remove();
            }
            
            container.innerHTML = `
                <div class="ad-error">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Advertisement Error</h3>
                    <p>${message}</p>
                    <button class="btn btn-sm btn-secondary" onclick="retryLoadAd(this)" style="margin-top: 12px;">
                        <i class="fas fa-retry"></i>
                        Retry
                    </button>
                </div>
            `;
        }

        function retryLoadAd(button) {
            const container = button.closest('.ad-container');
            if (!container) return;
            
            const slot = container.dataset.adSlot;
            const videoIndex = parseInt(container.dataset.videoIndex) || 0;
            
            console.log(`🔄 Retrying ad load for slot ${slot}`);
            
            // Show loading state
            container.innerHTML = `
                <div class="ad-loading">
                    <div class="spinner"></div>
                    <p>Loading advertisement...</p>
                </div>
                <div class="ad-label">
                    <i class="fas fa-bullhorn"></i>
                    <span>Advertisement</span>
                </div>
                <div class="ad-skip">
                    <button class="ad-skip-btn" onclick="skipAd(this)">
                        <i class="fas fa-forward"></i>
                        <span>Skip</span>
                    </button>
                </div>
            `;
            
            // Retry loading
            loadAdForSlot(container, slot, videoIndex);
        }

        async function initializeApp() {
            try {
                console.log('🚀 Initializing app with ads support...');
                
                setupGlobalEventListeners();
                setupSearchFunctionality();
                initializeVideoPlayer();
                setupIntersectionObserver();
                setupSwipeNavigation();
                setupMutationObserver();
                
                // Load initial ads with error handling
                try {
                    await loadInitialAds();
                    console.log('✅ Initial ads loaded successfully');
                } catch (error) {
                    console.error('⚠️ Failed to load initial ads:', error);
                    // Continue without ads
                }
                
                setTimeout(() => {
                    playCurrentVideo();
                }, 500);
                
                console.log('✅ App initialization complete');
            } catch (error) {
                console.error('❌ App initialization failed:', error);
                showToast('App initialization failed. Some features may not work correctly.', 'error', 5000);
            }
        }

        function handleNetworkError(error, context = '') {
            console.error(`🌐 Network error in ${context}:`, error);
            
            if (!navigator.onLine) {
                showToast('No internet connection', 'error', 5000);
                return;
            }
            
            if (error.message.includes('Failed to fetch')) {
                showToast('Connection failed. Please check your internet.', 'error', 3000);
            } else if (error.message.includes('500')) {
                showToast('Server error. Please try again later.', 'error', 3000);
            } else if (error.message.includes('404')) {
                showToast('Resource not found.', 'error', 3000);
            } else {
                showToast(`Network error: ${error.message}`, 'error', 3000);
            }
        }

        function scrollToNextItem(currentItem) {
            const container = document.getElementById('videoContainer');
            const items = container.children;
            const currentIndex = Array.from(items).indexOf(currentItem);
            
            if (currentIndex < items.length - 1) {
                const nextItem = items[currentIndex + 1];
                nextItem.scrollIntoView({ behavior: 'smooth' });
            }
        }
        // ENHANCED VIDEO PLAYER FUNCTIONS WITH ADS SUPPORT

        function initializeVideoPlayer() {
            const allItems = document.querySelectorAll('.video-item, .ad-container');
            const videoItems = document.querySelectorAll('.video-item');
            videos = Array.from(videoItems);
            
            console.log('🎬 Initialized video player with', videos.length, 'videos and', allItems.length - videos.length, 'ads');
            
            // Ensure all items have proper indexing
            Array.from(allItems).forEach((item, index) => {
                item.dataset.index = index;
                if (index === 0) {
                    item.classList.add('active');
                }
            });
            
            // Preload first few videos
            videos.slice(0, 3).forEach(item => {
                const video = item.querySelector('video');
                if (video) {
                    video.load();
                }
            });
        }

        function setupIntersectionObserver() {
            if (observer) {
                observer.disconnect();
            }

            const options = {
                root: document.getElementById('videoContainer'),
                rootMargin: '-20% 0px -20% 0px',
                threshold: [0.5, 0.75]
            };

            observer = new IntersectionObserver((entries) => {
                let mostVisibleEntry = null;
                let maxRatio = 0;

                entries.forEach(entry => {
                    if (entry.intersectionRatio > maxRatio) {
                        maxRatio = entry.intersectionRatio;
                        mostVisibleEntry = entry;
                    }
                });

                if (mostVisibleEntry && mostVisibleEntry.intersectionRatio > 0.5) {
                    const item = mostVisibleEntry.target;
                    const newIndex = parseInt(item.dataset.index);
                    
                    if (newIndex !== currentVideoIndex) {
                        console.log('📍 Item changed from', currentVideoIndex, 'to', newIndex);
                        
                        // Remove active class from previous item
                        const allItems = document.querySelectorAll('.video-item, .ad-container');
                        if (allItems[currentVideoIndex]) {
                            allItems[currentVideoIndex].classList.remove('active');
                        }
                        
                        // Add active class to current item
                        item.classList.add('active');
                        currentVideoIndex = newIndex;
                        
                        // Handle different item types
                        if (item.classList.contains('video-item')) {
                            handleVideoItemActive(item);
                        } else if (item.classList.contains('ad-container')) {
                            handleAdItemActive(item);
                        }
                    }
                }
            }, options);

            // Observe all items (videos and ads)
            const allItems = document.querySelectorAll('.video-item, .ad-container');
            allItems.forEach(item => {
                observer.observe(item);
            });

            console.log('👁️ Intersection observer setup complete for', allItems.length, 'items');
        }

        function handleVideoItemActive(videoItem) {
            console.log('🎬 Video item active:', videoItem.dataset.videoId);
            
            // Pause all videos first
            document.querySelectorAll('.main-video').forEach(v => {
                if (!v.paused) {
                    v.pause();
                    const videoId = v.id.replace('video-', '');
                    updatePlayIcon(videoId, false);
                }
            });

            // Pause all ad videos
            document.querySelectorAll('.ad-media').forEach(media => {
                if (media.tagName === 'VIDEO' && !media.paused) {
                    media.pause();
                }
            });

            // Play current video
            const video = videoItem.querySelector('video');
            if (video) {
                playVideo(video, videoItem.dataset.videoId);
                preloadNextVideos(parseInt(videoItem.dataset.index));
                
                // Load more if needed
                const videoIndex = Array.from(videos).indexOf(videoItem);
                if (videoIndex >= videos.length - 2) {
                    loadMoreVideos();
                }
            }
        }

        function handleAdItemActive(adContainer) {
            console.log('📺 Ad item active:', adContainer.dataset.adId || 'unknown');
            
            // Pause all videos
            document.querySelectorAll('.main-video').forEach(v => {
                if (!v.paused) {
                    v.pause();
                    const videoId = v.id.replace('video-', '');
                    updatePlayIcon(videoId, false);
                }
            });

            // Pause other ad videos
            document.querySelectorAll('.ad-media').forEach(media => {
                if (media.tagName === 'VIDEO' && !media.paused && media.closest('.ad-container') !== adContainer) {
                    media.pause();
                }
            });

            // Play current ad if it's a video
            const adVideo = adContainer.querySelector('.ad-media');
            if (adVideo && adVideo.tagName === 'VIDEO') {
                adVideo.play().catch(error => {
                    console.log('❌ Ad auto-play prevented:', error);
                });
                
                currentAd = {
                    id: adContainer.dataset.adId,
                    container: adContainer
                };
            }

            // Load Google Ads script if needed
            const adType = adContainer.dataset.adType;
            if (adType === 'google_ads') {
                const adId = adContainer.dataset.adId;
                const scriptContainer = document.getElementById(`google-ads-${adId}`);
                if (scriptContainer && !scriptContainer.dataset.loaded) {
                    // Load Google Ads script when ad becomes active
                    loadGoogleAdsForContainer(adContainer);
                    scriptContainer.dataset.loaded = 'true';
                }
            }
        }

        async function loadGoogleAdsForContainer(adContainer) {
            try {
                const adId = adContainer.dataset.adId;
                console.log(`📡 Loading Google Ads script for ad ${adId}`);
                
                // In a real implementation, you would fetch the script from your backend
                // For now, we'll show a placeholder
                const scriptContainer = document.getElementById(`google-ads-${adId}`);
                if (scriptContainer) {
                    const placeholder = scriptContainer.querySelector('.google-ads-placeholder');
                    if (placeholder) {
                        placeholder.innerHTML = `
                            <i class="fab fa-google"></i>
                            <h3>Google Advertisement</h3>
                            <p>Ad content would load here</p>
                        `;
                    }
                }
            } catch (error) {
                console.error('❌ Failed to load Google Ads:', error);
                showAdError(adContainer, 'Failed to load Google Ads');
            }
        }

        function playCurrentVideo() {
            const allItems = document.querySelectorAll('.video-item, .ad-container');
            if (allItems.length > 0 && currentVideoIndex < allItems.length) {
                const currentItem = allItems[currentVideoIndex];
                
                if (currentItem.classList.contains('video-item')) {
                    const video = currentItem.querySelector('video');
                    if (video) {
                        playVideo(video, currentItem.dataset.videoId);
                    }
                }
            }
        }

        function playVideo(videoElement, videoId) {
            if (videoElement && videoElement.paused) {
                const playPromise = videoElement.play();
                if (playPromise !== undefined) {
                    playPromise.then(() => {
                        updatePlayIcon(videoId, true);
                        recordView(videoId);
                    }).catch(error => {
                        console.log('❌ Auto-play prevented:', error);
                        updatePlayIcon(videoId, false);
                    });
                }
            }
        }

        function preloadNextVideos(currentIndex) {
            const allItems = document.querySelectorAll('.video-item, .ad-container');
            
            for (let i = currentIndex + 1; i <= currentIndex + 2 && i < allItems.length; i++) {
                const item = allItems[i];
                if (item.classList.contains('video-item')) {
                    const video = item.querySelector('video');
                    if (video && video.readyState < 2) {
                        video.load();
                    }
                } else if (item.classList.contains('ad-container')) {
                    const adVideo = item.querySelector('.ad-media');
                    if (adVideo && adVideo.tagName === 'VIDEO' && adVideo.readyState < 2) {
                        adVideo.load();
                    }
                }
            }
        }

        async function loadMoreVideos() {
            if (isLoading) return;
            
            isLoading = true;
            const loadingState = document.getElementById('loadingState');
            if (loadingState) {
                loadingState.style.display = 'block';
            }
            
            try {
                const page = Math.floor(videos.length / 10) + 1;
                console.log('📥 Loading more videos, page:', page);
                
                const response = await fetch(`/api/videos/feed?page=${page}&limit=10`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success && data.data && data.data.length > 0) {
                    const container = document.getElementById('videoContainer');
                    let displayIndex = document.querySelectorAll('.video-item, .ad-container').length;
                    
                    data.data.forEach((video, index) => {
                        const videoItem = createVideoElement(video, displayIndex);
                        container.appendChild(videoItem);
                        displayIndex++;
                        
                        // Insert ad after every 2 videos
                        const totalVideoCount = videos.length + index + 1;
                        if (totalVideoCount % 2 === 0) {
                            const adCycle = Math.floor(totalVideoCount / 2);
                            const slotPosition = (adCycle % 5) + 1;
                            
                            const adContainer = createAdElement(slotPosition, displayIndex, totalVideoCount - 1);
                            container.appendChild(adContainer);
                            
                            // Load ad content
                            loadAdForSlot(adContainer, slotPosition, totalVideoCount - 1);
                            displayIndex++;
                        }
                    });
                    
                    showToast(`📥 Loaded ${data.data.length} more videos`, 'success', 2000);
                } else {
                    showToast('No more videos to load', 'info', 2000);
                }
            } catch (error) {
                console.error('❌ Failed to load more videos:', error);
                showToast('Failed to load more videos', 'error', 4000);
            } finally {
                isLoading = false;
                if (loadingState) {
                    loadingState.style.display = 'none';
                }
            }
        }

        function createVideoElement(video, index) {
            const videoItem = document.createElement('div');
            videoItem.className = 'video-item';
            videoItem.dataset.videoId = video.id;
            videoItem.dataset.index = index;
            videoItem.dataset.videoSlug = video.slug || video.id;
            
            videoItem.innerHTML = `
                <video 
                    id="video-${video.id}"
                    src="${video.video_url}"
                    loop
                    muted
                    playsinline
                    preload="metadata"
                    class="main-video"
                ></video>
                
                <div class="video-overlay"></div>
                
                <div class="video-controls">
                    <button class="play-pause-btn" data-video-id="${video.id}" type="button">
                        <i class="fas fa-play" id="play-icon-${video.id}"></i>
                    </button>
                </div>
                
                <div class="side-actions">
                    <button class="action-btn like-btn" data-video-id="${video.id}" type="button">
                        <i class="fas fa-heart"></i>
                        <span class="like-count">${video.likes_count || 0}</span>
                    </button>
                    <button class="action-btn comment-btn" data-video-id="${video.id}" type="button">
                        <i class="fas fa-comment"></i>
                        <span class="comment-count">0</span>
                    </button>
                    <button class="action-btn share-btn" data-video-id="${video.id}" data-video-title="${video.title}" data-video-slug="${video.slug || video.id}" type="button">
                        <i class="fas fa-share"></i>
                        <span class="share-count">${video.shares_count || 0}</span>
                    </button>
                    <button class="action-btn sound-btn" data-video-id="${video.id}" type="button">
                        <i class="fas fa-volume-mute" id="sound-icon-${video.id}"></i>
                        <span>Sound</span>
                    </button>
                </div>
                
                <div class="video-info">
                    <div class="video-title">${video.title}</div>
                    ${video.description ? `<div class="video-description">${video.description}</div>` : ''}
                    <div class="video-meta">
                        <span><i class="fas fa-eye"></i> <span class="view-count">${video.views_count || 0}</span></span>
                        ${video.category_name ? `<span><i class="fas fa-tag"></i> ${video.category_name}</span>` : ''}
                        ${video.username ? `<span><i class="fas fa-user"></i> @${video.username}</span>` : ''}
                    </div>
                </div>
            `;
            
            return videoItem;
        }

        function createAdElement(slotPosition, index, videoIndex) {
            const adContainer = document.createElement('div');
            adContainer.className = 'ad-container';
            adContainer.dataset.adSlot = slotPosition;
            adContainer.dataset.index = index;
            adContainer.dataset.type = 'ad';
            adContainer.dataset.videoIndex = videoIndex;
            
            adContainer.innerHTML = `
                <div class="ad-loading" id="adLoading-${slotPosition}-${index}">
                    <div class="spinner"></div>
                    <p>Loading advertisement...</p>
                </div>
                
                <div class="ad-label" id="adLabel-${slotPosition}-${index}">
                    <i class="fas fa-bullhorn"></i>
                    <span>Advertisement</span>
                </div>
                
                <div class="ad-skip">
                    <button class="ad-skip-btn" onclick="skipAd(this)" data-ad-slot="${slotPosition}">
                        <i class="fas fa-forward"></i>
                        <span>Skip</span>
                    </button>
                </div>
                
                <div class="ad-duration-bar" id="adDurationBar-${slotPosition}-${index}"></div>
            `;
            
            return adContainer;
        }
        // VIDEO INTERACTION FUNCTIONS

        function togglePlayPause(videoId) {
            console.log('▶️ Toggle play/pause for video:', videoId);
            
            const video = document.querySelector(`#video-${videoId}, [data-video-id="${videoId}"] video`);
            
            if (video) {
                try {
                    if (video.paused) {
                        video.play().then(() => {
                            updatePlayIcon(videoId, true);
                        }).catch(error => {
                            console.error('❌ Play failed:', error);
                            updatePlayIcon(videoId, false);
                        });
                    } else {
                        video.pause();
                        updatePlayIcon(videoId, false);
                    }
                } catch (error) {
                    console.error('❌ Error toggling play/pause:', error);
                }
            } else {
                console.error('❌ Video element not found for videoId:', videoId);
            }
        }

        function updatePlayIcon(videoId, isPlaying) {
            let icon = document.getElementById(`play-icon-${videoId}`);
            
            if (!icon) {
                const videoItem = document.querySelector(`[data-video-id="${videoId}"]`);
                if (videoItem) {
                    icon = videoItem.querySelector('.play-pause-btn i');
                }
            }
            
            if (icon) {
                icon.className = isPlaying ? 'fas fa-pause' : 'fas fa-play';
                icon.id = `play-icon-${videoId}`;
            }
        }

        function toggleSound(videoId) {
            console.log('🔊 Toggle sound for video:', videoId);
            
            const video = document.querySelector(`#video-${videoId}, [data-video-id="${videoId}"] video`);
            let icon = document.getElementById(`sound-icon-${videoId}`);
            let btn = document.querySelector(`[data-video-id="${videoId}"].sound-btn`);
            
            if (!icon || !btn) {
                const videoItem = document.querySelector(`[data-video-id="${videoId}"]`);
                if (videoItem) {
                    if (!icon) icon = videoItem.querySelector('.sound-btn i');
                    if (!btn) btn = videoItem.querySelector('.sound-btn');
                }
            }
            
            if (video && icon && btn) {
                try {
                    if (video.muted) {
                        video.muted = false;
                        icon.className = 'fas fa-volume-up';
                        icon.id = `sound-icon-${videoId}`;
                        btn.classList.add('active');
                    } else {
                        video.muted = true;
                        icon.className = 'fas fa-volume-mute';
                        icon.id = `sound-icon-${videoId}`;
                        btn.classList.remove('active');
                    }
                } catch (error) {
                    console.error('❌ Error toggling sound:', error);
                }
            }
        }

        async function toggleLike(videoId) {
            console.log('❤️ Toggle like for video:', videoId);
            
            if (!isOnline) {
                showToast('No internet connection', 'error');
                return;
            }
            
            let likeBtn = document.querySelector(`[data-video-id="${videoId}"].like-btn`);
            
            if (!likeBtn) {
                const videoItem = document.querySelector(`[data-video-id="${videoId}"]`);
                if (videoItem) {
                    likeBtn = videoItem.querySelector('.like-btn');
                }
            }
            
            if (!likeBtn) {
                console.error('❌ Like button not found for video:', videoId);
                return;
            }
            
            const likeIcon = likeBtn.querySelector('i');
            const likeCount = likeBtn.querySelector('.like-count');
            
            const currentCount = parseInt(likeCount.textContent) || 0;
            const wasLiked = likeBtn.classList.contains('liked');
            
            try {
                likeBtn.style.opacity = '0.6';
                likeBtn.style.pointerEvents = 'none';
                
                const data = await apiCall(`/api/videos/${videoId}/like`, {
                    method: 'POST'
                });
                
                if (data.success) {
                    if (data.requiresLogin) {
                        if (wasLiked) {
                            likeBtn.classList.remove('liked');
                            likeIcon.style.color = '';
                            likeCount.textContent = Math.max(0, currentCount - 1);
                            showToast('💔 Unliked', 'info', 1500);
                        } else {
                            likeBtn.classList.add('liked');
                            likeIcon.style.color = '#fe2c55';
                            likeCount.textContent = currentCount + 1;
                            showToast('❤️ Liked!', 'success', 1500);
                        }
                    } else if (data.data) {
                        if (data.data.liked) {
                            likeBtn.classList.add('liked');
                            likeIcon.style.color = '#fe2c55';
                            likeCount.textContent = currentCount + 1;
                            showToast('❤️ Liked!', 'success', 1500);
                        } else {
                            likeBtn.classList.remove('liked');
                            likeIcon.style.color = '';
                            likeCount.textContent = Math.max(0, currentCount - 1);
                            showToast('💔 Unliked', 'info', 1500);
                        }
                    }
                } else {
                    throw new Error(data.message || 'Failed to toggle like');
                }
            } catch (error) {
                if (wasLiked) {
                    likeBtn.classList.add('liked');
                    likeIcon.style.color = '#fe2c55';
                } else {
                    likeBtn.classList.remove('liked');
                    likeIcon.style.color = '';
                }
                likeCount.textContent = currentCount;
                
                handleApiError(error, 'Failed to like video');
            } finally {
                likeBtn.style.opacity = '1';
                likeBtn.style.pointerEvents = 'auto';
            }
        }

        function openComments(videoId) {
            console.log('💬 Open comments for video:', videoId);
            showToast('Comments feature coming soon!');
        }

        function openShareModal(videoId, videoTitle = '', videoSlug = '') {
            console.log('📤 Open share modal for video:', videoId);
            currentShareVideoId = videoId;
            currentShareVideoTitle = videoTitle;
            currentShareVideoSlug = videoSlug;
            
            const shareModal = document.getElementById('shareModal');
            const shareVideoTitle = document.getElementById('shareVideoTitle');
            
            if (shareVideoTitle) {
                shareVideoTitle.textContent = videoTitle;
            }
            if (shareModal) {
                shareModal.classList.add('show');
            }
        }

        function closeShareModal() {
            const shareModal = document.getElementById('shareModal');
            if (shareModal) {
                shareModal.classList.remove('show');
            }
            currentShareVideoId = null;
            currentShareVideoTitle = '';
            currentShareVideoSlug = '';
        }

        function shareToPlat_form(platform) {
            if (!currentShareVideoId) return;
            
            const baseUrl = window.location.origin;
            const videoUrl = `${baseUrl}/video/${currentShareVideoSlug}`;
            const shareText = currentShareVideoTitle ? `${currentShareVideoTitle} - Watch on VideoApp` : 'Check out this amazing video on VideoApp!';
            
            switch (platform) {
                case 'copy':
                    navigator.clipboard.writeText(videoUrl).then(() => {
                        showToast('Link copied to clipboard!');
                    }).catch(() => {
                        const textArea = document.createElement('textarea');
                        textArea.value = videoUrl;
                        document.body.appendChild(textArea);
                        textArea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textArea);
                        showToast('Link copied to clipboard!');
                    });
                    break;
                case 'whatsapp':
                    window.open(`https://wa.me/?text=${encodeURIComponent(shareText + ' ' + videoUrl)}`, '_blank');
                    break;
                case 'twitter':
                    window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(videoUrl)}&hashtags=VideoApp,Videos`, '_blank');
                    break;
                case 'facebook':
                    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(videoUrl)}&quote=${encodeURIComponent(shareText)}`, '_blank');
                    break;
                case 'telegram':
                    window.open(`https://t.me/share/url?url=${encodeURIComponent(videoUrl)}&text=${encodeURIComponent(shareText)}`, '_blank');
                    break;
                case 'linkedin':
                    window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(videoUrl)}`, '_blank');
                    break;
            }
            
            recordShare(currentShareVideoId, platform);
            updateShareCount(currentShareVideoId);
            closeShareModal();
        }

        async function recordShare(videoId, platform) {
            if (!isOnline) return;
            
            try {
                await apiCall(`/api/videos/${videoId}/share`, {
                    method: 'POST',
                    body: JSON.stringify({ platform })
                });
            } catch (error) {
                console.log('❌ Failed to record share:', error.message);
            }
        }

        function updateShareCount(videoId) {
            let shareBtn = document.querySelector(`[data-video-id="${videoId}"].share-btn .share-count`);
            
            if (!shareBtn) {
                const videoItem = document.querySelector(`[data-video-id="${videoId}"]`);
                if (videoItem) {
                    shareBtn = videoItem.querySelector('.share-btn .share-count');
                }
            }
            
            if (shareBtn) {
                const currentCount = parseInt(shareBtn.textContent) || 0;
                shareBtn.textContent = currentCount + 1;
            }
        }

        async function recordView(videoId) {
            if (!isOnline) return;
            
            try {
                // FIXED: Always send proper request body with required fields
                const requestBody = {
                    watchDuration: 0, // Default value
                    source: 'web',
                    timestamp: new Date().toISOString()
                };
                
                console.log(`📊 Recording view for video ${videoId}`, requestBody);
                
                const response = await fetch(`/api/videos/${videoId}/view`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    // Update view count in UI
                    let viewCount = document.querySelector(`[data-video-id="${videoId}"] .view-count`);
                    
                    if (!viewCount) {
                        const videoItem = document.querySelector(`[data-video-id="${videoId}"]`);
                        if (videoItem) {
                            viewCount = videoItem.querySelector('.view-count');
                        }
                    }
                    
                    if (viewCount) {
                        const currentViews = parseInt(viewCount.textContent) || 0;
                        viewCount.textContent = currentViews + 1;
                    }
                    
                    console.log(`✅ View recorded for video ${videoId}`);
                } else {
                    console.warn(`⚠️ View recording failed: ${data.message}`);
                }
            } catch (error) {
                console.error('❌ Failed to record view:', error);
                // Don't show error notification to user for analytics failures
            }
        }

        // NAVIGATION FUNCTIONS

        function openMenu() {
            console.log('📱 Opening sidebar menu');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');
            
            if (sidebar && overlay) {
                sidebar.classList.add('show');
                overlay.classList.add('show');
                document.body.style.overflow = 'hidden';
            }
        }

        function closeSidebar() {
            console.log('❌ Closing sidebar menu');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');
            
            if (sidebar && overlay) {
                sidebar.classList.remove('show');
                overlay.classList.remove('show');
                document.body.style.overflow = '';
            }
        }

        function goToAdmin() {
            console.log('⚙️ Navigating to admin dashboard');
            window.location.href = '/admin';
        }
        // EVENT LISTENERS AND SETUP

        function setupGlobalEventListeners() {
            // Navigation buttons
            const searchBtn = document.getElementById('searchBtn');
            const menuBtn = document.getElementById('menuBtn');
            const goToAdminBtn = document.getElementById('goToAdminBtn');
            const sidebarClose = document.getElementById('sidebarClose');
            const sidebarOverlay = document.getElementById('sidebarOverlay');

            if (searchBtn) {
                searchBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    openSearchModal();
                });
            }
            
            if (menuBtn) {
                menuBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    openMenu();
                });
            }
            
            if (goToAdminBtn) {
                goToAdminBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    goToAdmin();
                });
            }

            if (sidebarClose) {
                sidebarClose.addEventListener('click', closeSidebar);
            }

            if (sidebarOverlay) {
                sidebarOverlay.addEventListener('click', closeSidebar);
            }

            // Share modal
            const shareClose = document.getElementById('shareClose');
            const shareModal = document.getElementById('shareModal');
            
            if (shareClose) {
                shareClose.addEventListener('click', closeShareModal);
            }
            
            if (shareModal) {
                shareModal.addEventListener('click', function(e) {
                    if (e.target === this) closeShareModal();
                });
            }

            // Video interaction event delegation
            setupVideoEventDelegation();

            // Share options
            document.querySelectorAll('.share-option').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    shareToPlat_form(this.dataset.platform);
                });
            });

            // Event handlers
            document.addEventListener('keydown', handleKeyNavigation);
            document.addEventListener('visibilitychange', handleVisibilityChange);
            window.addEventListener('blur', handleBlur);
            window.addEventListener('focus', handleFocus);
            window.addEventListener('resize', handleResize);
            window.addEventListener('orientationchange', handleOrientationChange);
            window.addEventListener('beforeunload', cleanup);

            // Scroll optimization
            const videoContainer = document.getElementById('videoContainer');
            if (videoContainer) {
                videoContainer.addEventListener('scroll', handleScroll, { passive: true });
            }

            // Network events
            window.addEventListener('online', handleOnline);
            window.addEventListener('offline', handleOffline);
        }

        function setupVideoEventDelegation() {
            const videoContainer = document.getElementById('videoContainer');
            
            if (videoContainer) {
                videoContainer.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Handle ad clicks
                    if (e.target.closest('.ad-container')) {
                        const adContainer = e.target.closest('.ad-container');
                        const adId = adContainer.dataset.adId;
                        
                        // Only handle direct clicks on ad media, not buttons
                        if (e.target.closest('.ad-media') && !e.target.closest('button')) {
                            const clickUrl = adContainer.querySelector('.ad-cta')?.getAttribute('onclick')?.match(/'([^']+)'/)?.[1];
                            const openNewTab = adContainer.dataset.openNewTab === 'true';
                            
                            if (clickUrl) {
                                clickAd(adId, clickUrl, openNewTab);
                            }
                        }
                        return;
                    }

                    // Find the closest interactive element
                    const interactiveElement = e.target.closest([
                        '.play-pause-btn',
                        '.main-video', 
                        '.like-btn',
                        '.comment-btn', 
                        '.share-btn',
                        '.sound-btn'
                    ].join(', '));
                    
                    if (!interactiveElement) return;
                    
                    // Find the parent video item
                    const videoItem = interactiveElement.closest('.video-item');
                    if (!videoItem) return;

                    const videoId = videoItem.dataset.videoId;
                    
                    console.log('🎬 Video interaction:', interactiveElement.className, 'for video:', videoId);
                    
                    // Handle different button types
                    if (interactiveElement.matches('.play-pause-btn') || 
                        interactiveElement.matches('.main-video')) {
                        togglePlayPause(videoId);
                    } else if (interactiveElement.matches('.like-btn')) {
                        toggleLike(videoId);
                    } else if (interactiveElement.matches('.comment-btn')) {
                        openComments(videoId);
                    } else if (interactiveElement.matches('.share-btn')) {
                        const videoTitle = interactiveElement.dataset.videoTitle || videoItem.querySelector('.video-title')?.textContent || '';
                        const videoSlug = interactiveElement.dataset.videoSlug || videoItem.dataset.videoSlug || videoId;
                        openShareModal(videoId, videoTitle, videoSlug);
                    } else if (interactiveElement.matches('.sound-btn')) {
                        toggleSound(videoId);
                    }
                });
            }
        }

        // SEARCH FUNCTIONALITY

        function setupSearchFunctionality() {
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', function(e) {
                    const query = e.target.value.trim();
                    
                    updateClearButton();
                    
                    clearTimeout(searchTimeout);
                    
                    if (query.length === 0) {
                        showNoQueryState();
                        return;
                    }
                    
                    if (query.length >= 2) {
                        searchTimeout = setTimeout(() => {
                            performSearch();
                        }, 800);
                    }
                });
            }
        }

        function openSearchModal() {
            const searchModal = document.getElementById('searchModal');
            const searchInput = document.getElementById('searchInput');
            
            if (!searchModal || !searchInput) return;
            
            searchModal.style.display = 'flex';
            
            setTimeout(() => {
                searchModal.classList.add('show');
            }, 10);
            
            setTimeout(() => {
                searchInput.focus();
            }, 200);
            
            document.body.style.overflow = 'hidden';
        }

        function closeSearchModal() {
            const searchModal = document.getElementById('searchModal');
            const searchInput = document.getElementById('searchInput');
            
            if (!searchModal || !searchInput) return;
            
            searchModal.classList.remove('show');
            
            setTimeout(() => {
                searchModal.style.display = 'none';
            }, 400);
            
            searchInput.value = '';
            updateClearButton();
            showNoQueryState();
            
            document.body.style.overflow = '';
        }

        function updateClearButton() {
            const searchInput = document.getElementById('searchInput');
            const searchClear = document.getElementById('searchClear');
            
            if (!searchInput || !searchClear) return;
            
            if (searchInput.value.trim().length > 0) {
                searchClear.classList.add('show');
            } else {
                searchClear.classList.remove('show');
            }
        }

        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            
            if (searchInput) {
                searchInput.value = '';
                searchInput.focus();
                updateClearButton();
                showNoQueryState();
            }
        }

        async function performSearch() {
            if (isSearching) return;

            const searchInput = document.getElementById('searchInput');
            const query = searchInput ? searchInput.value.trim() : '';

            if (!query || query.length < 2) {
                showToast('Please enter at least 2 characters', 'warning');
                return;
            }

            isSearching = true;
            
            const searchBtn = document.getElementById('searchSubmitBtn');
            let originalContent = '';
            
            if (searchBtn) {
                originalContent = searchBtn.innerHTML;
                searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> <span>Searching...</span>';
                searchBtn.disabled = true;
            }

            showLoadingState();

            try {
                console.log('🔍 Searching for:', query);
                
                const response = await fetch(`/api/videos/search?q=${encodeURIComponent(query)}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    displaySearchResults(data.data || [], query);
                } else {
                    throw new Error(data.message || 'Search failed');
                }
                
            } catch (error) {
                console.error('❌ Search error:', error);
                showErrorState('Search failed. Please try again.');
            } finally {
                isSearching = false;
                
                if (searchBtn) {
                    searchBtn.innerHTML = originalContent;
                    searchBtn.disabled = false;
                }
            }
        }

        function displaySearchResults(results, query) {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            if (!results || results.length === 0) {
                searchResults.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-search"></i>
                        <h3>No results found</h3>
                        <p>No videos found for "${query}". Try different keywords or check your spelling.</p>
                    </div>
                `;
                return;
            }

            searchResults.innerHTML = `
                <div class="results-header">
                    <div class="results-count">Found ${results.length} result${results.length !== 1 ? 's' : ''} for "${query}"</div>
                </div>
                <div class="results-grid">
                    ${results.map((video, index) => `
                        <div class="result-item" onclick="goToVideo('${video.slug || video.id}', '${video.title}')" style="animation-delay: ${index * 0.1}s">
                            <div class="result-thumbnail">
                                ${video.thumbnail ? 
                                    `<img src="${video.thumbnail}" alt="${video.title}" loading="lazy">` :
                                    `<div class="placeholder"><i class="fas fa-play"></i></div>`
                                }
                            </div>
                            <div class="result-info">
                                <div class="result-title">${video.title}</div>
                                <div class="result-meta">
                                    <span><i class="fas fa-eye"></i> ${formatNumber(video.views_count || 0)}</span>
                                    <span><i class="fas fa-heart"></i> ${formatNumber(video.likes_count || 0)}</span>
                                    ${video.username ? `<span><i class="fas fa-user"></i> @${video.username}</span>` : ''}
                                    ${video.category_name ? `<span><i class="fas fa-tag"></i> ${video.category_name}</span>` : ''}
                                </div>
                                ${video.description ? `<div class="result-description">${video.description}</div>` : ''}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        function showLoadingState() {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="loading-state">
                    <div class="spinner"></div>
                    <p>Searching videos...</p>
                </div>
            `;
        }

        function showErrorState(message) {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Search Error</h3>
                    <p>${message}</p>
                </div>
            `;
        }

        function showNoQueryState() {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="no-query-state">
                    <i class="fas fa-search"></i>
                    <h3>Search Videos</h3>
                    <p>Enter keywords above to find amazing videos and creators</p>
                </div>
            `;
        }

        function goToVideo(slug, title) {
            console.log('🎬 Navigating to video:', slug);
            closeSearchModal();
            window.location.href = `/video/${slug}`;
        }

        function formatNumber(num) {
            if (num >= 1000000) {
                return (num / 1000000).toFixed(1) + 'M';
            } else if (num >= 1000) {
                return (num / 1000).toFixed(1) + 'K';
            }
            return num.toString();
        }
        // EVENT HANDLERS

        function handleKeyNavigation(e) {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
                return;
            }

            if (e.key === 'Escape' && document.getElementById('searchModal').classList.contains('show')) {
                closeSearchModal();
            }
            
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                openSearchModal();
            }

            const allItems = document.querySelectorAll('.video-item, .ad-container');
            if (e.key === 'ArrowUp' && currentVideoIndex > 0) {
                e.preventDefault();
                scrollToItem(currentVideoIndex - 1);
            } else if (e.key === 'ArrowDown' && currentVideoIndex < allItems.length - 1) {
                e.preventDefault();
                scrollToItem(currentVideoIndex + 1);
            } else if (e.key === ' ') {
                e.preventDefault();
                const currentItem = allItems[currentVideoIndex];
                if (currentItem && currentItem.classList.contains('video-item')) {
                    togglePlayPause(currentItem.dataset.videoId);
                }
            } else if (e.key === 'm' || e.key === 'M') {
                e.preventDefault();
                const currentItem = allItems[currentVideoIndex];
                if (currentItem && currentItem.classList.contains('video-item')) {
                    toggleSound(currentItem.dataset.videoId);
                }
            }
        }

        function handleVisibilityChange() {
            if (document.hidden) {
                document.querySelectorAll('.main-video, .ad-media').forEach(media => {
                    if (media.tagName === 'VIDEO' && !media.paused) {
                        media.pause();
                    }
                });
            } else {
                setTimeout(() => {
                    playCurrentVideo();
                }, 100);
            }
        }

        function handleBlur() {
            const allItems = document.querySelectorAll('.video-item, .ad-container');
            if (allItems[currentVideoIndex]) {
                const currentItem = allItems[currentVideoIndex];
                if (currentItem.classList.contains('video-item')) {
                    const video = currentItem.querySelector('video');
                    if (video && !video.paused) {
                        wasPlayingBeforeBlur = true;
                        video.pause();
                    } else {
                        wasPlayingBeforeBlur = false;
                    }
                }
            }
        }

        function handleFocus() {
            if (wasPlayingBeforeBlur) {
                const allItems = document.querySelectorAll('.video-item, .ad-container');
                if (allItems[currentVideoIndex] && allItems[currentVideoIndex].classList.contains('video-item')) {
                    const video = allItems[currentVideoIndex].querySelector('video');
                    if (video && video.paused) {
                        setTimeout(() => {
                            video.play().catch(() => {});
                        }, 100);
                    }
                }
            }
        }

        function handleResize() {
            setTimeout(() => {
                setupIntersectionObserver();
                const allItems = document.querySelectorAll('.video-item, .ad-container');
                if (allItems.length > 0 && currentVideoIndex < allItems.length) {
                    allItems[currentVideoIndex].scrollIntoView({ behavior: 'instant' });
                }
            }, 100);
        }

        function handleOrientationChange() {
            setTimeout(() => {
                setupIntersectionObserver();
                const allItems = document.querySelectorAll('.video-item, .ad-container');
                if (allItems.length > 0 && currentVideoIndex < allItems.length) {
                    allItems[currentVideoIndex].scrollIntoView({ behavior: 'instant' });
                }
            }, 300);
        }

        function handleScroll() {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                console.log('📜 Scroll completed');
            }, 100);
        }

        function handleOnline() {
            if (!isOnline) {
                showToast('Connection restored', 'success');
                isOnline = true;
            }
        }

        function handleOffline() {
            showToast('Connection lost - some features may not work', 'warning', 5000);
            isOnline = false;
        }

        function scrollToItem(index) {
            const allItems = document.querySelectorAll('.video-item, .ad-container');
            if (index >= 0 && index < allItems.length) {
                const targetItem = allItems[index];
                if (targetItem) {
                    targetItem.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'center'
                    });
                }
            }
        }

        function setupMutationObserver() {
            mutationObserver = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach(function(node) {
                            if (node.nodeType === 1 && (node.classList.contains('video-item') || node.classList.contains('ad-container'))) {
                                console.log('🆕 New item detected:', node.dataset.videoId || 'ad');
                                
                                const allItems = document.querySelectorAll('.video-item, .ad-container');
                                const newIndex = allItems.length - 1;
                                node.dataset.index = newIndex;
                                
                                if (observer) {
                                    observer.observe(node);
                                }
                                
                                if (node.classList.contains('video-item')) {
                                    videos.push(node);
                                    const videoId = node.dataset.videoId;
                                    if (videoId && !dynamicVideosLoaded.includes(videoId)) {
                                        dynamicVideosLoaded.push(videoId);
                                        console.log('📝 Tracked dynamic video:', videoId);
                                    }
                                }
                            }
                        });
                    }
                });
            });

            const videoContainer = document.getElementById('videoContainer');
            if (videoContainer) {
                mutationObserver.observe(videoContainer, {
                    childList: true,
                    subtree: true
                });
            }
        }

        function setupSwipeNavigation() {
            const container = document.getElementById('videoContainer');
            if (!container) return;
            
            let startY = 0;
            let isScrolling = false;

            container.addEventListener('touchstart', (e) => {
                startY = e.touches[0].clientY;
                isScrolling = false;
            }, { passive: true });

            container.addEventListener('touchmove', (e) => {
                if (!isScrolling) {
                    const currentY = e.touches[0].clientY;
                    const diffY = startY - currentY;
                    
                    if (Math.abs(diffY) > 10) {
                        isScrolling = true;
                    }
                }
            }, { passive: true });
        }

        // UTILITY FUNCTIONS

        function handleApiError(error, fallbackMessage = 'Something went wrong') {
            console.error('❌ API Error:', error);
            
            if (error.message.includes('401')) {
                showToast('Please login to perform this action', 'warning');
            } else if (error.message.includes('403')) {
                showToast('You don\'t have permission for this action', 'error');
            } else if (error.message.includes('404')) {
                showToast('Resource not found', 'error');
            } else if (error.message.includes('500')) {
                showToast('Server error - please try again later', 'error');
            } else if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
                showToast('Connection error - check your internet', 'error');
            } else {
                showToast(fallbackMessage, 'error');
            }
        }

        async function apiCall(url, options = {}, retries = 3) {
            const defaultOptions = {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    ...options.headers
                },
                ...options
            };
            
            // Ensure body is properly stringified if it's an object
            if (defaultOptions.body && typeof defaultOptions.body === 'object') {
                defaultOptions.body = JSON.stringify(defaultOptions.body);
            }
            
            for (let i = 0; i < retries; i++) {
                try {
                    console.log(`📡 API Call attempt ${i + 1}:`, url, defaultOptions);
                    
                    const response = await fetch(url, defaultOptions);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error(`❌ API Error ${response.status}:`, errorText);
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    const data = await response.json();
                    console.log(`✅ API Success:`, data);
                    return data;
                } catch (error) {
                    console.error(`❌ API call attempt ${i + 1} failed:`, error);
                    
                    if (i === retries - 1) {
                        throw error;
                    }
                    
                    // Wait before retry with exponential backoff
                    await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
                }
            }
        }

        function cleanup() {
            if (observer) {
                observer.disconnect();
            }
            if (mutationObserver) {
                mutationObserver.disconnect();
            }
            
            if (scrollTimeout) {
                clearTimeout(scrollTimeout);
            }
            
            adTimers.forEach(timer => clearInterval(timer));
            adTimers.clear();
        }

        function showToast(message, type = 'info', duration = 3000) {
            document.querySelectorAll('.toast').forEach(toast => toast.remove());
            
            const toast = document.createElement('div');
            toast.className = 'toast';
            
            const colors = {
                success: '#27ae60',
                error: '#e74c3c',
                warning: '#f39c12',
                info: '#3498db'
            };
            
            const icons = {
                success: 'fas fa-check-circle',
                error: 'fas fa-exclamation-circle',
                warning: 'fas fa-exclamation-triangle',
                info: 'fas fa-info-circle'
            };
            
            toast.style.cssText = `
                position: fixed;
                bottom: 30px;
                left: 50%;
                transform: translateX(-50%);
                background: ${colors[type] || colors.info};
                color: white;
                padding: 15px 24px;
                border-radius: 30px;
                z-index: 3000;
                font-size: 14px;
                font-weight: 500;
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                display: flex;
                align-items: center;
                gap: 12px;
                max-width: 400px;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255,255,255,0.1);
                animation: toastSlideIn 0.3s ease-out;
            `;
            
            toast.innerHTML = `
                <i class="${icons[type] || icons.info}"></i>
                <span>${message}</span>
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'toastSlideOut 0.3s ease-out forwards';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, duration);
        }

        // Add CSS animation for toast slide out
        const style = document.createElement('style');
        style.textContent = `
            @keyframes toastSlideOut {
                from {
                    transform: translateX(-50%) scale(1);
                    opacity: 1;
                }
                to {
                    transform: translateX(-50%) scale(0.8);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);

        // Initialize everything when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeApp);
        } else {
            initializeApp();
        }
    </script>
</body>
</html>
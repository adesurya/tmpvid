<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title><%= title || 'VideoApp' %></title>
    
    <!-- Basic Meta Tags -->
    <meta name="description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <meta name="author" content="VideoApp">
    <meta name="robots" content="index, follow">
    
    <!-- OpenGraph Meta Tags -->
    <meta property="og:type" content="website">
    <meta property="og:title" content="<%= title || 'VideoApp - Amazing Videos' %>">
    <meta property="og:description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <meta property="og:url" content="<%= typeof req !== 'undefined' ? req.protocol + '://' + req.get('host') + req.originalUrl : 'https://videoapp.com' %>">
    <meta property="og:site_name" content="VideoApp">
    <% if (videos && videos[0] && videos[0].thumbnail) { %>
    <meta property="og:image" content="<%= videos[0].thumbnail %>">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:image:alt" content="<%= videos[0].title %>">
    <% } else { %>
    <meta property="og:image" content="/images/default-og-image.jpg">
    <% } %>
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@VideoApp">
    <meta name="twitter:title" content="<%= title || 'VideoApp - Amazing Videos' %>">
    <meta name="twitter:description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <% if (videos && videos[0] && videos[0].thumbnail) { %>
    <meta name="twitter:image" content="<%= videos[0].thumbnail %>">
    <meta name="twitter:image:alt" content="<%= videos[0].title %>">
    <% } else { %>
    <meta name="twitter:image" content="/images/default-twitter-image.jpg">
    <% } %>
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#fe2c55">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/main.css">
    
    <style>
        /* Enhanced Share Modal Styles */
        .share-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 2000;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            pointer-events: none;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .share-modal.show {
            opacity: 1;
            pointer-events: all;
        }

        .share-content {
            background: rgba(22, 24, 35, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            width: 90%;
            max-width: 500px;
            padding: 30px;
            transform: scale(0.9);
            transition: transform 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .share-modal.show .share-content {
            transform: scale(1);
        }

        .share-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .share-header h3 {
            color: #fff;
            font-size: 20px;
            font-weight: 600;
            margin: 0;
        }

        .share-close {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .share-close:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(90deg);
        }

        .share-options {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
        }

        .share-option {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 16px;
            padding: 20px 15px;
            color: #fff;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
            transition: all 0.3s;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .share-option:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .share-option i {
            font-size: 24px;
            margin-bottom: 2px;
        }

        .share-option span {
            font-size: 12px;
            font-weight: 500;
            text-align: center;
        }

        /* Platform specific colors */
        .share-option[data-platform="whatsapp"]:hover {
            background: rgba(37, 211, 102, 0.2);
            border-color: #25d366;
        }

        .share-option[data-platform="twitter"]:hover {
            background: rgba(29, 161, 242, 0.2);
            border-color: #1da1f2;
        }

        .share-option[data-platform="facebook"]:hover {
            background: rgba(59, 89, 152, 0.2);
            border-color: #3b5998;
        }

        .share-option[data-platform="telegram"]:hover {
            background: rgba(0, 136, 204, 0.2);
            border-color: #0088cc;
        }

        .share-option[data-platform="linkedin"]:hover {
            background: rgba(0, 119, 181, 0.2);
            border-color: #0077b5;
        }

        .share-option[data-platform="copy"]:hover {
            background: rgba(52, 152, 219, 0.2);
            border-color: #3498db;
        }

        /* Toast improvements */
        .toast {
            position: fixed;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            z-index: 3000;
            font-size: 14px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            animation: toastSlideUp 0.3s ease, toastFadeOut 0.3s ease 2.7s forwards;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        @keyframes toastSlideUp {
            from {
                opacity: 0;
                transform: translate(-50%, 20px);
            }
            to {
                opacity: 1;
                transform: translate(-50%, 0);
            }
        }

        @keyframes toastFadeOut {
            from {
                opacity: 1;
                transform: translate(-50%, 0);
            }
            to {
                opacity: 0;
                transform: translate(-50%, -20px);
            }
        }

        /* Action button improvements */
        .action-btn.liked i {
            color: #fe2c55;
            animation: heartPulse 0.3s ease;
        }

        @keyframes heartPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .action-btn:active {
            transform: scale(0.95);
        }

        /* Sound Button Active State */
        .sound-btn.active {
            color: #fe2c55;
        }

        /* Mobile responsive improvements */
        @media (max-width: 480px) {
            .share-content {
                width: 95%;
                padding: 25px 20px;
            }
            
            .share-options {
                grid-template-columns: repeat(2, 1fr);
                gap: 12px;
            }
            
            .share-option {
                padding: 16px 12px;
            }
            
            .share-option i {
                font-size: 20px;
            }
            
            .share-option span {
                font-size: 11px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Top Navigation -->
        <nav class="top-nav">
            <a href="/" class="logo">VideoApp</a>
            <div class="nav-icons">
                <button class="nav-icon" onclick="openSearch()">
                    <i class="fas fa-search"></i>
                </button>
                <button class="nav-icon" onclick="openMenu()">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </nav>

        <!-- Video Container -->
        <div class="video-container" id="videoContainer">
            <% if (videos && videos.length > 0) { %>
                <% videos.forEach((video, index) => { %>
                    <div class="video-item" data-video-id="<%= video.id %>" data-index="<%= index %>" data-video-slug="<%= video.slug || video.id %>">
                        <!-- Video Element -->
                        <video 
                            id="video-<%= video.id %>"
                            src="<%= video.video_url %>"
                            loop
                            muted
                            playsinline
                            preload="metadata"
                            class="main-video"
                        ></video>

                        <!-- Video Overlay -->
                        <div class="video-overlay"></div>

                        <!-- Video Controls -->
                        <div class="video-controls">
                            <button class="play-pause-btn" data-video-id="<%= video.id %>">
                                <i class="fas fa-play" id="play-icon-<%= video.id %>"></i>
                            </button>
                        </div>

                        <!-- Side Actions -->
                        <div class="side-actions">
                            <button class="action-btn like-btn" data-video-id="<%= video.id %>">
                                <i class="fas fa-heart"></i>
                                <span class="like-count"><%= video.likes_count || 0 %></span>
                            </button>
                            <button class="action-btn comment-btn" data-video-id="<%= video.id %>">
                                <i class="fas fa-comment"></i>
                                <span class="comment-count">0</span>
                            </button>
                            <button class="action-btn share-btn" data-video-id="<%= video.id %>" data-video-title="<%= video.title %>" data-video-slug="<%= video.slug || video.id %>">
                                <i class="fas fa-share"></i>
                                <span class="share-count"><%= video.shares_count || 0 %></span>
                            </button>
                            <button class="action-btn sound-btn" data-video-id="<%= video.id %>">
                                <i class="fas fa-volume-mute" id="sound-icon-<%= video.id %>"></i>
                                <span>Sound</span>
                            </button>
                        </div>

                        <!-- Video Info -->
                        <div class="video-info">
                            <div class="video-title"><%= video.title %></div>
                            <% if (video.description) { %>
                                <div class="video-description"><%= video.description %></div>
                            <% } %>
                            <div class="video-meta">
                                <span><i class="fas fa-eye"></i> <span class="view-count"><%= video.views_count || 0 %></span></span>
                                <% if (video.category_name) { %>
                                    <span><i class="fas fa-tag"></i> <%= video.category_name %></span>
                                <% } %>
                                <% if (video.username) { %>
                                    <span><i class="fas fa-user"></i> @<%= video.username %></span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <!-- Empty State -->
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class="fas fa-video"></i>
                    </div>
                    <h2 class="empty-title">No Videos Yet</h2>
                    <p class="empty-description">
                        Be the first to share amazing content!<br>
                        Upload videos to get started.
                    </p>
                    <button class="empty-button" id="goToAdminBtn">
                        Go to Admin Dashboard
                    </button>
                </div>
            <% } %>
        </div>

        <!-- Share Modal -->
        <div class="share-modal" id="shareModal">
            <div class="share-content">
                <div class="share-header">
                    <h3>Share Video</h3>
                    <button class="share-close" id="shareClose">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="shareVideoTitle" style="margin-bottom: 15px; color: #ccc; text-align: center; font-size: 14px;"></div>
                <div class="share-options">
                    <button class="share-option" data-platform="copy">
                        <i class="fas fa-link"></i>
                        <span>Copy Link</span>
                    </button>
                    <button class="share-option" data-platform="whatsapp">
                        <i class="fab fa-whatsapp"></i>
                        <span>WhatsApp</span>
                    </button>
                    <button class="share-option" data-platform="twitter">
                        <i class="fab fa-twitter"></i>
                        <span>Twitter</span>
                    </button>
                    <button class="share-option" data-platform="facebook">
                        <i class="fab fa-facebook"></i>
                        <span>Facebook</span>
                    </button>
                    <button class="share-option" data-platform="telegram">
                        <i class="fab fa-telegram"></i>
                        <span>Telegram</span>
                    </button>
                    <button class="share-option" data-platform="linkedin">
                        <i class="fab fa-linkedin"></i>
                        <span>LinkedIn</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Loading State (initially hidden) -->
        <div class="loading-state" id="loadingState" style="display: none;">
            <div class="spinner"></div>
            <p>Loading more videos...</p>
        </div>
    </div>

    <script>
        // Global variables
        let currentVideoIndex = 0;
        let videos = [];
        let isLoading = false;
        let observer;
        let currentShareVideoId = null;
        let currentShareVideoTitle = '';
        let currentShareVideoSlug = '';
        let isOnline = navigator.onLine;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            setupEventListeners();
            initializeVideoPlayer();
            setupIntersectionObserver();
            setupSwipeNavigation();
            playCurrentVideo();
        }

        function setupEventListeners() {
            // Navigation buttons
            document.getElementById('goToAdminBtn')?.addEventListener('click', goToAdmin);

            // Share modal
            document.getElementById('shareClose')?.addEventListener('click', closeShareModal);
            document.getElementById('shareModal')?.addEventListener('click', function(e) {
                if (e.target === this) closeShareModal();
            });

            // Video controls
            document.querySelectorAll('.play-pause-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    togglePlayPause(this.dataset.videoId);
                });
            });

            // Video click to play/pause
            document.querySelectorAll('.main-video').forEach(video => {
                video.addEventListener('click', function() {
                    const videoId = this.closest('.video-item').dataset.videoId;
                    togglePlayPause(videoId);
                });
            });

            // Action buttons
            document.querySelectorAll('.like-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    toggleLike(this.dataset.videoId);
                });
            });

            document.querySelectorAll('.comment-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    openComments(this.dataset.videoId);
                });
            });

            document.querySelectorAll('.share-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const videoTitle = this.dataset.videoTitle || '';
                    const videoSlug = this.dataset.videoSlug || this.dataset.videoId;
                    openShareModal(this.dataset.videoId, videoTitle, videoSlug);
                });
            });

            document.querySelectorAll('.sound-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    toggleSound(this.dataset.videoId);
                });
            });

            // Share options
            document.querySelectorAll('.share-option').forEach(btn => {
                btn.addEventListener('click', function() {
                    shareToPlat_form(this.dataset.platform);
                });
            });

            // Keyboard navigation
            document.addEventListener('keydown', handleKeyNavigation);

            // Page visibility change
            document.addEventListener('visibilitychange', handleVisibilityChange);
        }

        function initializeVideoPlayer() {
            const videoItems = document.querySelectorAll('.video-item');
            videos = Array.from(videoItems);
            
            // Preload first few videos
            videos.slice(0, 3).forEach(item => {
                const video = item.querySelector('video');
                if (video) {
                    video.load();
                }
            });
        }

        function setupIntersectionObserver() {
            const options = {
                root: document.getElementById('videoContainer'),
                rootMargin: '0px',
                threshold: 0.5
            };

            observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const videoItem = entry.target;
                        const video = videoItem.querySelector('video');
                        const index = parseInt(videoItem.dataset.index);
                        
                        // Pause all other videos
                        videos.forEach((item, i) => {
                            const v = item.querySelector('video');
                            if (i !== index && v) {
                                v.pause();
                                updatePlayIcon(item.dataset.videoId, false);
                            }
                        });

                        // Play current video
                        if (video) {
                            currentVideoIndex = index;
                            playVideo(video, videoItem.dataset.videoId);
                            
                            // Preload next videos
                            preloadNextVideos(index);
                            
                            // Load more videos if near end
                            if (index >= videos.length - 2) {
                                loadMoreVideos();
                            }
                        }
                    }
                });
            }, options);

            videos.forEach(video => {
                observer.observe(video);
            });
        }

        function setupSwipeNavigation() {
            const container = document.getElementById('videoContainer');
            let startY = 0;
            let isScrolling = false;

            container.addEventListener('touchstart', (e) => {
                startY = e.touches[0].clientY;
                isScrolling = false;
            });

            container.addEventListener('touchmove', (e) => {
                if (!isScrolling) {
                    const currentY = e.touches[0].clientY;
                    const diffY = startY - currentY;
                    
                    if (Math.abs(diffY) > 10) {
                        isScrolling = true;
                    }
                }
            });
        }

        function playCurrentVideo() {
            if (videos.length > 0) {
                const currentVideo = videos[currentVideoIndex];
                const video = currentVideo.querySelector('video');
                if (video) {
                    playVideo(video, currentVideo.dataset.videoId);
                }
            }
        }

        function playVideo(videoElement, videoId) {
            if (videoElement) {
                const playPromise = videoElement.play();
                if (playPromise !== undefined) {
                    playPromise.then(() => {
                        updatePlayIcon(videoId, true);
                        recordView(videoId);
                    }).catch(error => {
                        console.log('Auto-play prevented:', error);
                        updatePlayIcon(videoId, false);
                    });
                }
            }
        }

        function preloadNextVideos(currentIndex) {
            for (let i = currentIndex + 1; i <= currentIndex + 2 && i < videos.length; i++) {
                const video = videos[i].querySelector('video');
                if (video && video.readyState < 2) {
                    video.load();
                }
            }
        }

        async function loadMoreVideos() {
            if (isLoading) return;
            
            isLoading = true;
            document.getElementById('loadingState').style.display = 'block';
            
            try {
                const page = Math.floor(videos.length / 10) + 1;
                console.log('Loading more videos, page:', page);
                
                const response = await fetch(`/api/videos/feed?page=${page}&limit=10`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                console.log('Load more response status:', response.status);
                console.log('Load more response content-type:', response.headers.get('content-type'));
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Load more error response:', errorText.substring(0, 500));
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const responseText = await response.text();
                    console.error('Non-JSON response received:', responseText.substring(0, 500));
                    
                    // Check if it's an HTML error page
                    if (responseText.includes('<!DOCTYPE html>')) {
                        throw new Error('Server returned HTML page instead of JSON data. Check your API routing.');
                    } else {
                        throw new Error('Server returned non-JSON response');
                    }
                }
                
                const data = await response.json();
                console.log('Load more data:', data);
                
                if (data.success && data.data && data.data.length > 0) {
                    const container = document.getElementById('videoContainer');
                    
                    data.data.forEach((video, index) => {
                        const videoItem = createVideoElement(video, videos.length + index);
                        container.appendChild(videoItem);
                        videos.push(videoItem);
                        observer.observe(videoItem);
                    });
                    
                    // Setup event listeners for new videos
                    setupNewVideoListeners();
                    
                    showToast(`Loaded ${data.data.length} more videos`, 'success', 2000);
                } else if (data.success && (!data.data || data.data.length === 0)) {
                    showToast('No more videos to load', 'info', 2000);
                } else {
                    throw new Error(data.message || 'Failed to load videos');
                }
            } catch (error) {
                console.error('Failed to load more videos:', error);
                showToast('Failed to load more videos: ' + error.message, 'error', 4000);
            } finally {
                isLoading = false;
                document.getElementById('loadingState').style.display = 'none';
            }
        }
        
        function createVideoElement(video, index) {
            const videoItem = document.createElement('div');
            videoItem.className = 'video-item';
            videoItem.dataset.videoId = video.id;
            videoItem.dataset.index = index;
            videoItem.dataset.videoSlug = video.slug || video.id;
            
            videoItem.innerHTML = `
                <video 
                    id="video-${video.id}"
                    src="${video.video_url}"
                    loop
                    muted
                    playsinline
                    preload="metadata"
                    class="main-video"
                ></video>
                
                <div class="video-overlay"></div>
                
                <div class="video-controls">
                    <button class="play-pause-btn" data-video-id="${video.id}">
                        <i class="fas fa-play" id="play-icon-${video.id}"></i>
                    </button>
                </div>
                
                <div class="side-actions">
                    <button class="action-btn like-btn" data-video-id="${video.id}">
                        <i class="fas fa-heart"></i>
                        <span class="like-count">${video.likes_count || 0}</span>
                    </button>
                    <button class="action-btn comment-btn" data-video-id="${video.id}">
                        <i class="fas fa-comment"></i>
                        <span class="comment-count">0</span>
                    </button>
                    <button class="action-btn share-btn" data-video-id="${video.id}" data-video-title="${video.title}" data-video-slug="${video.slug || video.id}">
                        <i class="fas fa-share"></i>
                        <span class="share-count">${video.shares_count || 0}</span>
                    </button>
                    <button class="action-btn sound-btn" data-video-id="${video.id}">
                        <i class="fas fa-volume-mute" id="sound-icon-${video.id}"></i>
                        <span>Sound</span>
                    </button>
                </div>
                
                <div class="video-info">
                    <div class="video-title">${video.title}</div>
                    ${video.description ? `<div class="video-description">${video.description}</div>` : ''}
                    <div class="video-meta">
                        <span><i class="fas fa-eye"></i> <span class="view-count">${video.views_count || 0}</span></span>
                        ${video.category_name ? `<span><i class="fas fa-tag"></i> ${video.category_name}</span>` : ''}
                        ${video.username ? `<span><i class="fas fa-user"></i> @${video.username}</span>` : ''}
                    </div>
                </div>
            `;
            
            return videoItem;
        }

        function setupNewVideoListeners() {
            // Setup listeners for newly added videos
            document.querySelectorAll('.play-pause-btn:not([data-listener])').forEach(btn => {
                btn.dataset.listener = 'true';
                btn.addEventListener('click', function() {
                    togglePlayPause(this.dataset.videoId);
                });
            });

            document.querySelectorAll('.main-video:not([data-listener])').forEach(video => {
                video.dataset.listener = 'true';
                video.addEventListener('click', function() {
                    const videoId = this.closest('.video-item').dataset.videoId;
                    togglePlayPause(videoId);
                });
            });

            document.querySelectorAll('.like-btn:not([data-listener])').forEach(btn => {
                btn.dataset.listener = 'true';
                btn.addEventListener('click', function() {
                    toggleLike(this.dataset.videoId);
                });
            });

            document.querySelectorAll('.share-btn:not([data-listener])').forEach(btn => {
                btn.dataset.listener = 'true';
                btn.addEventListener('click', function() {
                    const videoTitle = this.dataset.videoTitle || '';
                    const videoSlug = this.dataset.videoSlug || this.dataset.videoId;
                    openShareModal(this.dataset.videoId, videoTitle, videoSlug);
                });
            });

            document.querySelectorAll('.sound-btn:not([data-listener])').forEach(btn => {
                btn.dataset.listener = 'true';
                btn.addEventListener('click', function() {
                    toggleSound(this.dataset.videoId);
                });
            });
        }

        // Video control functions
        function togglePlayPause(videoId) {
            const video = document.getElementById(`video-${videoId}`);
            if (video) {
                if (video.paused) {
                    video.play();
                    updatePlayIcon(videoId, true);
                } else {
                    video.pause();
                    updatePlayIcon(videoId, false);
                }
            }
        }

        function updatePlayIcon(videoId, isPlaying) {
            const icon = document.getElementById(`play-icon-${videoId}`);
            if (icon) {
                icon.className = isPlaying ? 'fas fa-pause' : 'fas fa-play';
            }
        }

        function toggleSound(videoId) {
            const video = document.getElementById(`video-${videoId}`);
            const icon = document.getElementById(`sound-icon-${videoId}`);
            const btn = document.querySelector(`[data-video-id="${videoId}"] .sound-btn`);
            
            if (video && icon && btn) {
                if (video.muted) {
                    video.muted = false;
                    icon.className = 'fas fa-volume-up';
                    btn.classList.add('active');
                } else {
                    video.muted = true;
                    icon.className = 'fas fa-volume-mute';
                    btn.classList.remove('active');
                }
            }
        }

        // Action functions
        async function toggleLike(videoId) {
            if (!isOnline) {
                showToast('No internet connection', 'error');
                return;
            }
            
            const likeBtn = document.querySelector(`[data-video-id="${videoId}"] .like-btn`);
            const likeIcon = likeBtn.querySelector('i');
            const likeCount = likeBtn.querySelector('.like-count');
            
            // Optimistic UI update
            const currentCount = parseInt(likeCount.textContent) || 0;
            const wasLiked = likeBtn.classList.contains('liked');
            
            try {
                // Show loading state
                likeBtn.style.opacity = '0.6';
                likeBtn.style.pointerEvents = 'none';
                
                const data = await apiCall(`/api/videos/${videoId}/like`, {
                    method: 'POST'
                });
                
                if (data.success && data.data) {
                    if (data.data.liked) {
                        likeBtn.classList.add('liked');
                        likeIcon.style.color = '#fe2c55';
                        likeCount.textContent = currentCount + 1;
                        showToast('❤️ Liked!', 'success', 1500);
                    } else {
                        likeBtn.classList.remove('liked');
                        likeIcon.style.color = '';
                        likeCount.textContent = Math.max(0, currentCount - 1);
                        showToast('💔 Unliked', 'info', 1500);
                    }
                } else {
                    throw new Error(data.message || 'Failed to toggle like');
                }
            } catch (error) {
                // Revert optimistic update
                if (wasLiked) {
                    likeBtn.classList.add('liked');
                    likeIcon.style.color = '#fe2c55';
                } else {
                    likeBtn.classList.remove('liked');
                    likeIcon.style.color = '';
                }
                likeCount.textContent = currentCount;
                
                handleApiError(error, 'Failed to like video');
            } finally {
                // Remove loading state
                likeBtn.style.opacity = '1';
                likeBtn.style.pointerEvents = 'auto';
            }
        }

        function openComments(videoId) {
            showToast('Comments feature coming soon!');
        }

        function openShareModal(videoId, videoTitle = '', videoSlug = '') {
            currentShareVideoId = videoId;
            currentShareVideoTitle = videoTitle;
            currentShareVideoSlug = videoSlug;
            
            document.getElementById('shareVideoTitle').textContent = videoTitle;
            document.getElementById('shareModal').classList.add('show');
        }

        function closeShareModal() {
            document.getElementById('shareModal').classList.remove('show');
            currentShareVideoId = null;
            currentShareVideoTitle = '';
            currentShareVideoSlug = '';
        }

        function shareToPlat_form(platform) {
            if (!currentShareVideoId) return;
            
            const baseUrl = window.location.origin;
            const videoUrl = `${baseUrl}/video/${currentShareVideoSlug}`;
            const shareText = currentShareVideoTitle ? `${currentShareVideoTitle} - Watch on VideoApp` : 'Check out this amazing video on VideoApp!';
            
            switch (platform) {
                case 'copy':
                    navigator.clipboard.writeText(videoUrl).then(() => {
                        showToast('Link copied to clipboard!');
                    }).catch(() => {
                        // Fallback for older browsers
                        const textArea = document.createElement('textarea');
                        textArea.value = videoUrl;
                        document.body.appendChild(textArea);
                        textArea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textArea);
                        showToast('Link copied to clipboard!');
                    });
                    break;
                case 'whatsapp':
                    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText + ' ' + videoUrl)}`;
                    window.open(whatsappUrl, '_blank');
                    break;
                case 'twitter':
                    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(videoUrl)}&hashtags=VideoApp,Videos`;
                    window.open(twitterUrl, '_blank');
                    break;
                case 'facebook':
                    const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(videoUrl)}&quote=${encodeURIComponent(shareText)}`;
                    window.open(facebookUrl, '_blank');
                    break;
                case 'telegram':
                    const telegramUrl = `https://t.me/share/url?url=${encodeURIComponent(videoUrl)}&text=${encodeURIComponent(shareText)}`;
                    window.open(telegramUrl, '_blank');
                    break;
                case 'linkedin':
                    const linkedinUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(videoUrl)}`;
                    window.open(linkedinUrl, '_blank');
                    break;
            }
            
            // Record share and update counter
            recordShare(currentShareVideoId, platform);
            updateShareCount(currentShareVideoId);
            closeShareModal();
        }

        async function recordShare(videoId, platform) {
            if (!isOnline) return;
            
            try {
                await apiCall(`/api/videos/${videoId}/share`, {
                    method: 'POST',
                    body: JSON.stringify({ platform })
                });
                
                console.log(`Share recorded: ${platform}`);
            } catch (error) {
                console.log('Failed to record share:', error.message);
            }
        }

        function updateShareCount(videoId) {
            const shareBtn = document.querySelector(`[data-video-id="${videoId}"] .share-btn .share-count`);
            if (shareBtn) {
                const currentCount = parseInt(shareBtn.textContent) || 0;
                shareBtn.textContent = currentCount + 1;
            }
        }

        async function recordView(videoId) {
            if (!isOnline) return;
            
            try {
                await apiCall(`/api/videos/${videoId}/view`, {
                    method: 'POST',
                    body: JSON.stringify({
                        watchDuration: 0,
                        source: 'web'
                    })
                });
                
                // Update view count in UI
                const viewCount = document.querySelector(`[data-video-id="${videoId}"] .view-count`);
                if (viewCount) {
                    const currentViews = parseInt(viewCount.textContent) || 0;
                    viewCount.textContent = currentViews + 1;
                }
            } catch (error) {
                // Silently fail for view recording
                console.log('Failed to record view:', error.message);
            }
        }

        // Navigation functions
        function openSearch() {
            window.location.href = '/search';
        }

        function openMenu() {
            window.location.href = '/admin';
        }

        function goToAdmin() {
            window.location.href = '/admin';
        }

        // Event handlers
        function handleKeyNavigation(e) {
            if (e.key === 'ArrowUp' && currentVideoIndex > 0) {
                const targetVideo = videos[currentVideoIndex - 1];
                targetVideo.scrollIntoView({ behavior: 'smooth' });
            } else if (e.key === 'ArrowDown' && currentVideoIndex < videos.length - 1) {
                const targetVideo = videos[currentVideoIndex + 1];
                targetVideo.scrollIntoView({ behavior: 'smooth' });
            } else if (e.key === ' ') {
                e.preventDefault();
                const currentVideo = videos[currentVideoIndex];
                if (currentVideo) {
                    togglePlayPause(currentVideo.dataset.videoId);
                }
            }
        }

        function handleVisibilityChange() {
            if (document.hidden) {
                videos.forEach(item => {
                    const video = item.querySelector('video');
                    if (video && !video.paused) {
                        video.pause();
                    }
                });
            } else {
                playCurrentVideo();
            }
        }

        // Utility functions
        function showToast(message, type = 'info', duration = 3000) {
        // Remove existing toasts
        const existingToasts = document.querySelectorAll('.toast');
        existingToasts.forEach(toast => {
            if (!toast.classList.contains('removing')) {
                toast.classList.add('removing');
                setTimeout(() => toast.remove(), 200);
            }
        });
        
        // Create new toast
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        
        // Add icon based on type
        const icons = {
            success: '✅',
            error: '❌',
            warning: '⚠️',
            info: 'ℹ️'
        };
        
        toast.innerHTML = `
            <span class="toast-icon">${icons[type] || icons.info}</span>
            <span class="toast-message">${message}</span>
        `;
        
        // Enhanced styles
        toast.style.cssText = `
            position: fixed;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            background: ${type === 'error' ? '#ff4757' : type === 'success' ? '#2ed573' : type === 'warning' ? '#ffa502' : 'rgba(0, 0, 0, 0.9)'};
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            z-index: 3000;
            font-size: 14px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            gap: 8px;
            animation: toastSlideUp 0.3s ease;
            max-width: 300px;
            text-align: center;
        `;
        
        document.body.appendChild(toast);
        
        // Auto remove
        setTimeout(() => {
            toast.style.animation = 'toastFadeOut 0.3s ease forwards';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 300);
        }, duration);
    }

    // Enhanced error handling for all API calls
    function handleApiError(error, fallbackMessage = 'Something went wrong') {
        console.error('API Error:', error);
        
        if (error.message.includes('401')) {
            showToast('Please login to perform this action', 'warning');
        } else if (error.message.includes('403')) {
            showToast('You don\'t have permission for this action', 'error');
        } else if (error.message.includes('404')) {
            showToast('Resource not found', 'error');
        } else if (error.message.includes('500')) {
            showToast('Server error - please try again later', 'error');
        } else if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
            showToast('Connection error - check your internet', 'error');
        } else {
            showToast(fallbackMessage, 'error');
        }
    }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Error handling for missing videos
        document.addEventListener('error', function(e) {
            if (e.target.tagName === 'VIDEO') {
                console.error('Video failed to load:', e.target.src);
                const videoItem = e.target.closest('.video-item');
                if (videoItem) {
                    const errorDiv = document.createElement('div');
                    errorDiv.innerHTML = `
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: white;">
                            <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px; color: #ff6b6b;"></i>
                            <p>Video failed to load</p>
                        </div>
                    `;
                    videoItem.appendChild(errorDiv);
                }
            }
        }, true);

        // Performance optimization: Lazy load videos
        const videoObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const video = entry.target;
                    if (video.dataset.src) {
                        video.src = video.dataset.src;
                        video.load();
                        videoObserver.unobserve(video);
                    }
                }
            });
        }, {
            rootMargin: '100px'
        });

        // Observe all videos for lazy loading
        document.querySelectorAll('video[data-src]').forEach(video => {
            videoObserver.observe(video);
        });

        // Prevent default touch behaviors on video container
        document.getElementById('videoContainer').addEventListener('touchstart', function(e) {
            e.preventDefault();
        }, { passive: false });

        // Handle orientation change
        window.addEventListener('orientationchange', function() {
            setTimeout(() => {
                // Recalculate video positions after orientation change
                if (videos.length > 0 && currentVideoIndex < videos.length) {
                    videos[currentVideoIndex].scrollIntoView({ behavior: 'instant' });
                }
            }, 100);
        });

        // Network status handling
        window.addEventListener('online', function() {
            if (!isOnline) {
                showToast('Connection restored', 'success');
                isOnline = true;
            }
        });

        window.addEventListener('offline', function() {
            showToast('Connection lost - some features may not work', 'warning', 5000);
            isOnline = false;
        });

        async function apiCall(url, options = {}, retries = 3) {
            const defaultOptions = {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            };
            
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, defaultOptions);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`);
                    }
                    
                    const data = await response.json();
                    return data;
                } catch (error) {
                    console.error(`API call attempt ${i + 1} failed:`, error);
                    
                    if (i === retries - 1) {
                        handleApiError(error);
                        throw error;
                    }
                    
                    // Wait before retry (exponential backoff)
                    await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
                }
            }
        }

        // Performance monitoring
        if ('performance' in window) {
            window.addEventListener('load', function() {
                const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
                console.log(`Page loaded in ${loadTime}ms`);
            });
        }

        // Service Worker registration (if available)
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('/sw.js')
                    .then(function(registration) {
                        console.log('ServiceWorker registration successful');
                    })
                    .catch(function(err) {
                        console.log('ServiceWorker registration failed');
                    });
            });
        }
    </script>
</body>
</html>
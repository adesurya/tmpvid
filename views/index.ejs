<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title><%= title || 'VideoApp' %></title>
    
    <!-- Basic Meta Tags -->
    <meta name="description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <meta name="author" content="VideoApp">
    <meta name="robots" content="index, follow">
    
    <!-- OpenGraph Meta Tags -->
    <meta property="og:type" content="website">
    <meta property="og:title" content="<%= title || 'VideoApp - Amazing Videos' %>">
    <meta property="og:description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <meta property="og:url" content="<%= typeof req !== 'undefined' ? req.protocol + '://' + req.get('host') + req.originalUrl : 'https://videoapp.com' %>">
    <meta property="og:site_name" content="VideoApp">
    <% if (videos && videos[0] && videos[0].thumbnail) { %>
    <meta property="og:image" content="<%= videos[0].thumbnail %>">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:image:alt" content="<%= videos[0].title %>">
    <% } else { %>
    <meta property="og:image" content="/images/default-og-image.jpg">
    <% } %>
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@VideoApp">
    <meta name="twitter:title" content="<%= title || 'VideoApp - Amazing Videos' %>">
    <meta name="twitter:description" content="<%= videos && videos[0] ? videos[0].description || videos[0].title : 'Discover amazing videos on VideoApp' %>">
    <% if (videos && videos[0] && videos[0].thumbnail) { %>
    <meta name="twitter:image" content="<%= videos[0].thumbnail %>">
    <meta name="twitter:image:alt" content="<%= videos[0].title %>">
    <% } else { %>
    <meta name="twitter:image" content="/images/default-twitter-image.jpg">
    <% } %>
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#fe2c55">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/main.css">
    
    <style>
        /* Search Modal - FIXED STYLING */
        .search-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 2000;
            display: none;
            align-items: flex-start;
            justify-content: center;
            padding-top: 80px;
            backdrop-filter: blur(20px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .search-modal.show {
            display: flex;
            opacity: 1;
        }

        .search-content {
            background: rgba(22, 24, 35, 0.98);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            width: 90%;
            max-width: 600px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            max-height: 80vh;
            overflow-y: auto;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .search-modal.show .search-content {
            transform: scale(1);
        }

        /* Search Clear Button - FIXED */
        .search-clear {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.6);
            font-size: 18px;
            cursor: pointer;
            opacity: 0;
            transition: all 0.3s ease;
            padding: 5px;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .search-clear.show {
            opacity: 1;
        }

        /* Results styling */
        .results-grid {
            display: grid;
            gap: 15px;
            max-height: 400px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .result-item {
            display: flex;
            gap: 15px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid transparent;
        }

        .result-item:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(254, 44, 85, 0.5);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(254, 44, 85, 0.2);
        }

        .result-thumbnail {
            width: 80px;
            height: 60px;
            border-radius: 8px;
            overflow: hidden;
            flex-shrink: 0;
        }

        .result-info {
            flex: 1;
        }

        .result-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 5px;
            color: #fff;
        }

        .result-meta {
            font-size: 12px;
            color: rgba(255, 255, 255, 0.6);
            margin-bottom: 5px;
        }

        /* Enhanced styles for better navigation */
        .video-container {
            position: relative;
            width: 100%;
            height: 100vh;
            scroll-snap-type: y mandatory;
            overflow-y: scroll;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        .video-container::-webkit-scrollbar {
            display: none;
        }

        .video-item {
            position: relative;
            width: 100%;
            height: 100vh;
            scroll-snap-align: start;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000;
        }

        /* Better button responsiveness */
        .action-btn, .play-pause-btn, .nav-icon {
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            user-select: none;
            transition: all 0.2s ease;
        }

        .action-btn:active, .play-pause-btn:active, .nav-icon:active {
            transform: scale(0.95);
        }

        /* Ensure minimum touch targets */
        @media (max-width: 768px) {
            .action-btn {
                min-width: 56px;
                min-height: 56px;
                padding: 8px;
            }
            
            .nav-icon {
                min-width: 44px;
                min-height: 44px;
                padding: 8px;
            }
        }

        /* Loading indicator */
        .video-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            z-index: 10;
        }

        /* Debug indicator for active video */
        .video-item.active {
            border: 2px solid #fe2c55;
            box-sizing: border-box;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Top Navigation -->
        <nav class="top-nav">
            <a href="/" class="logo">VideoApp</a>
            <div class="nav-icons">
                <button class="nav-icon" id="searchBtn" type="button">
                    <i class="fas fa-search"></i>
                </button>
                <button class="nav-icon" id="menuBtn" type="button">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </nav>

        <!-- Sidebar -->
        <div class="sidebar-overlay" id="sidebarOverlay"></div>
        <nav class="sidebar" id="sidebar">
            <div class="sidebar-content">
                <div class="sidebar-header">
                    <h3>VideoApp</h3>
                    <button class="sidebar-close" id="sidebarClose">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="sidebar-menu">
                    <a href="/" class="menu-item">
                        <i class="fas fa-home"></i>
                        <span>Home</span>
                    </a>
                    <a href="/search" class="menu-item">
                        <i class="fas fa-search"></i>
                        <span>Search</span>
                    </a>
                    <a href="/trending" class="menu-item">
                        <i class="fas fa-fire"></i>
                        <span>Trending</span>
                    </a>
                    <a href="/admin" class="menu-item">
                        <i class="fas fa-cog"></i>
                        <span>Admin Panel</span>
                    </a>
                </div>
            </div>
        </nav>

        <!-- Video Container -->
        <div class="video-container" id="videoContainer">
            <% if (videos && videos.length > 0) { %>
                <% videos.forEach((video, index) => { %>
                    <div class="video-item" data-video-id="<%= video.id %>" data-index="<%= index %>" data-video-slug="<%= video.slug || video.id %>">
                        <!-- Video Element -->
                        <video 
                            id="video-<%= video.id %>"
                            src="<%= video.video_url %>"
                            loop
                            muted
                            playsinline
                            preload="metadata"
                            class="main-video"
                        ></video>

                        <!-- Video Overlay -->
                        <div class="video-overlay"></div>

                        <!-- Video Controls -->
                        <div class="video-controls">
                            <button class="play-pause-btn" data-video-id="<%= video.id %>" type="button">
                                <i class="fas fa-play" id="play-icon-<%= video.id %>"></i>
                            </button>
                        </div>

                        <!-- Side Actions -->
                        <div class="side-actions">
                            <button class="action-btn like-btn" data-video-id="<%= video.id %>" type="button">
                                <i class="fas fa-heart"></i>
                                <span class="like-count"><%= video.likes_count || 0 %></span>
                            </button>
                            <button class="action-btn comment-btn" data-video-id="<%= video.id %>" type="button">
                                <i class="fas fa-comment"></i>
                                <span class="comment-count">0</span>
                            </button>
                            <button class="action-btn share-btn" data-video-id="<%= video.id %>" data-video-title="<%= video.title %>" data-video-slug="<%= video.slug || video.id %>" type="button">
                                <i class="fas fa-share"></i>
                                <span class="share-count"><%= video.shares_count || 0 %></span>
                            </button>
                            <button class="action-btn sound-btn" data-video-id="<%= video.id %>" type="button">
                                <i class="fas fa-volume-mute" id="sound-icon-<%= video.id %>"></i>
                                <span>Sound</span>
                            </button>
                        </div>

                        <!-- Video Info -->
                        <div class="video-info">
                            <div class="video-title"><%= video.title %></div>
                            <% if (video.description) { %>
                                <div class="video-description"><%= video.description %></div>
                            <% } %>
                            <div class="video-meta">
                                <span><i class="fas fa-eye"></i> <span class="view-count"><%= video.views_count || 0 %></span></span>
                                <% if (video.category_name) { %>
                                    <span><i class="fas fa-tag"></i> <%= video.category_name %></span>
                                <% } %>
                                <% if (video.username) { %>
                                    <span><i class="fas fa-user"></i> @<%= video.username %></span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <!-- Empty State -->
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class="fas fa-video"></i>
                    </div>
                    <h2 class="empty-title">No Videos Yet</h2>
                    <p class="empty-description">
                        Be the first to share amazing content!<br>
                        Upload videos to get started.
                    </p>
                    <button class="empty-button" id="goToAdminBtn" type="button">
                        Go to Admin Dashboard
                    </button>
                </div>
            <% } %>
        </div>

        <!-- Share Modal -->
        <div class="share-modal" id="shareModal">
            <div class="share-content">
                <div class="share-header">
                    <h3>Share Video</h3>
                    <button class="share-close" id="shareClose" type="button">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="shareVideoTitle" style="margin-bottom: 15px; color: #ccc; text-align: center; font-size: 14px;"></div>
                <div class="share-options">
                    <button class="share-option" data-platform="copy" type="button">
                        <i class="fas fa-link"></i>
                        <span>Copy Link</span>
                    </button>
                    <button class="share-option" data-platform="whatsapp" type="button">
                        <i class="fab fa-whatsapp"></i>
                        <span>WhatsApp</span>
                    </button>
                    <button class="share-option" data-platform="twitter" type="button">
                        <i class="fab fa-twitter"></i>
                        <span>Twitter</span>
                    </button>
                    <button class="share-option" data-platform="facebook" type="button">
                        <i class="fab fa-facebook"></i>
                        <span>Facebook</span>
                    </button>
                    <button class="share-option" data-platform="telegram" type="button">
                        <i class="fab fa-telegram"></i>
                        <span>Telegram</span>
                    </button>
                    <button class="share-option" data-platform="linkedin" type="button">
                        <i class="fab fa-linkedin"></i>
                        <span>LinkedIn</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Loading State (initially hidden) -->
        <div class="loading-state" id="loadingState" style="display: none;">
            <div class="spinner"></div>
            <p>Loading more videos...</p>
        </div>

        <!-- Search Modal -->
        <div class="search-modal" id="searchModal">
            <div class="search-content">
                <div class="search-header">
                    <h3><i class="fas fa-search"></i> Search Videos</h3>
                    <button class="search-close" id="searchClose" type="button">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <form class="search-form" id="searchForm">
                    <div class="search-input-container">
                        <i class="fas fa-search search-icon"></i>
                        <input 
                            type="text" 
                            class="search-input" 
                            id="searchInput" 
                            placeholder="Search for videos, creators, or topics..." 
                            autocomplete="off"
                            autocapitalize="off"
                            spellcheck="false"
                        >
                        <button type="button" class="search-clear" id="searchClear">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <button type="submit" class="search-btn" id="searchSubmitBtn">
                        <i class="fas fa-search"></i>
                        <span>Search</span>
                    </button>
                </form>

                <div class="search-results" id="searchResults">
                    <div class="no-query-state">
                        <i class="fas fa-search"></i>
                        <h3>Search Videos</h3>
                        <p>Enter keywords above to find amazing videos</p>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script>
        // Global variables
        let currentVideoIndex = 0;
        let videos = [];
        let isLoading = false;
        let observer;
        let currentShareVideoId = null;
        let currentShareVideoTitle = '';
        let currentShareVideoSlug = '';
        let isOnline = navigator.onLine;
        let scrollTimeout;
        let mutationObserver;
        let wasPlayingBeforeBlur = false;
        let isSearching = false;
        let searchTimeout = null;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            setupGlobalEventListeners();
            setupSearchFunctionality(); // ✅ PENTING: Pastikan ini ada
            initializeVideoPlayer();
            setupIntersectionObserver();
            setupSwipeNavigation();
            setupMutationObserver();
            
            setTimeout(() => {
                playCurrentVideo();
            }, 500);
        }

        function setupGlobalEventListeners() {
            // Navigation buttons - FIXED: Direct event binding
            const searchBtn = document.getElementById('searchBtn');
            const menuBtn = document.getElementById('menuBtn');
            const goToAdminBtn = document.getElementById('goToAdminBtn');
            const sidebarClose = document.getElementById('sidebarClose');
            const sidebarOverlay = document.getElementById('sidebarOverlay');

            // FIXED: Search button - simple and direct
            if (searchBtn) {
                searchBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('Search button clicked - opening modal');
                    openSearchModal(); // ✅ Buka modal search
                });
            }
            
            if (menuBtn) {
                menuBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    openMenu();
                });
            }
            
            if (goToAdminBtn) {
                goToAdminBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    goToAdmin();
                });
            }

            if (sidebarClose) {
                sidebarClose.addEventListener('click', closeSidebar);
            }

            if (sidebarOverlay) {
                sidebarOverlay.addEventListener('click', closeSidebar);
            }

            // Share modal
            const shareClose = document.getElementById('shareClose');
            const shareModal = document.getElementById('shareModal');
            
            if (shareClose) {
                shareClose.addEventListener('click', closeShareModal);
            }
            
            if (shareModal) {
                shareModal.addEventListener('click', function(e) {
                    if (e.target === this) closeShareModal();
                });
            }

            // FIXED: Video interaction event delegation
            setupVideoEventDelegation();

            // Share options
            document.querySelectorAll('.share-option').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    shareToPlat_form(this.dataset.platform);
                });
            });

            // Event handlers
            document.addEventListener('keydown', handleKeyNavigation);
            document.addEventListener('visibilitychange', handleVisibilityChange);
            window.addEventListener('blur', handleBlur);
            window.addEventListener('focus', handleFocus);
            window.addEventListener('resize', handleResize);
            window.addEventListener('orientationchange', handleOrientationChange);
            window.addEventListener('beforeunload', cleanup);

            // Scroll optimization
            const videoContainer = document.getElementById('videoContainer');
            if (videoContainer) {
                videoContainer.addEventListener('scroll', handleScroll, { passive: true });
            }

            // Network events
            window.addEventListener('online', handleOnline);
            window.addEventListener('offline', handleOffline);
        }

        // FIXED: Simplified video event delegation
        function setupVideoEventDelegation() {
            const videoContainer = document.getElementById('videoContainer');
            
            if (videoContainer) {
                videoContainer.addEventListener('click', function(e) {
                    const target = e.target.closest('.play-pause-btn, .main-video, .like-btn, .comment-btn, .share-btn, .sound-btn');
                    
                    if (!target) return;
                    
                    e.preventDefault();
                    e.stopPropagation();

                    const videoItem = target.closest('.video-item');
                    if (!videoItem) return;

                    const videoId = videoItem.dataset.videoId;
                    
                    console.log('Video interaction:', target.className, 'for video:', videoId);
                    
                    // Handle different button types
                    if (target.classList.contains('play-pause-btn') || target.classList.contains('main-video')) {
                        togglePlayPause(videoId);
                    } else if (target.classList.contains('like-btn')) {
                        toggleLike(videoId);
                    } else if (target.classList.contains('comment-btn')) {
                        openComments(videoId);
                    } else if (target.classList.contains('share-btn')) {
                        const videoTitle = target.dataset.videoTitle || '';
                        const videoSlug = target.dataset.videoSlug || videoId;
                        openShareModal(videoId, videoTitle, videoSlug);
                    } else if (target.classList.contains('sound-btn')) {
                        toggleSound(videoId);
                    }
                });
            }
        }

        function initializeVideoPlayer() {
            const videoItems = document.querySelectorAll('.video-item');
            videos = Array.from(videoItems);
            
            console.log('Initialized video player with', videos.length, 'videos');
            
            // Ensure all videos have proper indexing
            videos.forEach((item, index) => {
                item.dataset.index = index;
                // Mark first video as active
                if (index === 0) {
                    item.classList.add('active');
                }
            });
            
            // Preload first few videos
            videos.slice(0, 3).forEach(item => {
                const video = item.querySelector('video');
                if (video) {
                    video.load();
                }
            });
        }

        function setupIntersectionObserver() {
            // Disconnect existing observer
            if (observer) {
                observer.disconnect();
            }

            const options = {
                root: document.getElementById('videoContainer'),
                rootMargin: '-20% 0px -20% 0px',
                threshold: [0.5, 0.75]
            };

            observer = new IntersectionObserver((entries) => {
                let mostVisibleEntry = null;
                let maxRatio = 0;

                entries.forEach(entry => {
                    if (entry.intersectionRatio > maxRatio) {
                        maxRatio = entry.intersectionRatio;
                        mostVisibleEntry = entry;
                    }
                });

                if (mostVisibleEntry && mostVisibleEntry.intersectionRatio > 0.5) {
                    const videoItem = mostVisibleEntry.target;
                    const video = videoItem.querySelector('video');
                    const newIndex = parseInt(videoItem.dataset.index);
                    
                    // Only update if it's actually a different video
                    if (newIndex !== currentVideoIndex) {
                        console.log('Video changed from', currentVideoIndex, 'to', newIndex);
                        
                        // Remove active class from previous video
                        if (videos[currentVideoIndex]) {
                            videos[currentVideoIndex].classList.remove('active');
                        }
                        
                        // Add active class to current video
                        videoItem.classList.add('active');
                        currentVideoIndex = newIndex;
                        
                        // Pause all other videos
                        videos.forEach((item, i) => {
                            const v = item.querySelector('video');
                            if (i !== newIndex && v && !v.paused) {
                                v.pause();
                                updatePlayIcon(item.dataset.videoId, false);
                            }
                        });

                        // Play current video
                        if (video) {
                            playVideo(video, videoItem.dataset.videoId);
                            preloadNextVideos(newIndex);
                            
                            // Load more if needed
                            if (newIndex >= videos.length - 2) {
                                loadMoreVideos();
                            }
                        }
                    }
                }
            }, options);

            // Observe all videos
            videos.forEach(video => {
                observer.observe(video);
            });

            console.log('Intersection observer setup complete for', videos.length, 'videos');
        }

        function setupMutationObserver() {
            mutationObserver = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach(function(node) {
                            if (node.nodeType === 1 && node.classList && node.classList.contains('video-item')) {
                                console.log('New video item detected:', node.dataset.videoId);
                                
                                // Update videos array
                                const newIndex = videos.length;
                                node.dataset.index = newIndex;
                                videos.push(node);
                                
                                // Observe new video
                                if (observer) {
                                    observer.observe(node);
                                }
                            }
                        });
                    }
                });
            });

            const videoContainer = document.getElementById('videoContainer');
            if (videoContainer) {
                mutationObserver.observe(videoContainer, {
                    childList: true,
                    subtree: true
                });
            }
        }

        function setupSwipeNavigation() {
            const container = document.getElementById('videoContainer');
            if (!container) return;
            
            let startY = 0;
            let isScrolling = false;

            container.addEventListener('touchstart', (e) => {
                startY = e.touches[0].clientY;
                isScrolling = false;
            }, { passive: true });

            container.addEventListener('touchmove', (e) => {
                if (!isScrolling) {
                    const currentY = e.touches[0].clientY;
                    const diffY = startY - currentY;
                    
                    if (Math.abs(diffY) > 10) {
                        isScrolling = true;
                    }
                }
            }, { passive: true });
        }

        function playCurrentVideo() {
            if (videos.length > 0 && currentVideoIndex < videos.length) {
                const currentVideo = videos[currentVideoIndex];
                const video = currentVideo.querySelector('video');
                if (video) {
                    playVideo(video, currentVideo.dataset.videoId);
                }
            }
        }

        function playVideo(videoElement, videoId) {
            if (videoElement && videoElement.paused) {
                const playPromise = videoElement.play();
                if (playPromise !== undefined) {
                    playPromise.then(() => {
                        updatePlayIcon(videoId, true);
                        recordView(videoId);
                    }).catch(error => {
                        console.log('Auto-play prevented:', error);
                        updatePlayIcon(videoId, false);
                    });
                }
            }
        }

        function preloadNextVideos(currentIndex) {
            for (let i = currentIndex + 1; i <= currentIndex + 2 && i < videos.length; i++) {
                const video = videos[i].querySelector('video');
                if (video && video.readyState < 2) {
                    video.load();
                }
            }
        }

        async function loadMoreVideos() {
            if (isLoading) return;
            
            isLoading = true;
            const loadingState = document.getElementById('loadingState');
            if (loadingState) {
                loadingState.style.display = 'block';
            }
            
            try {
                const page = Math.floor(videos.length / 10) + 1;
                console.log('Loading more videos, page:', page);
                
                const response = await fetch(`/api/videos/feed?page=${page}&limit=10`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success && data.data && data.data.length > 0) {
                    const container = document.getElementById('videoContainer');
                    
                    data.data.forEach((video, index) => {
                        const videoItem = createVideoElement(video, videos.length + index);
                        container.appendChild(videoItem);
                    });
                    
                    showToast(`Loaded ${data.data.length} more videos`, 'success', 2000);
                } else {
                    showToast('No more videos to load', 'info', 2000);
                }
            } catch (error) {
                console.error('Failed to load more videos:', error);
                showToast('Failed to load more videos', 'error', 4000);
            } finally {
                isLoading = false;
                if (loadingState) {
                    loadingState.style.display = 'none';
                }
            }
        }
        
        function createVideoElement(video, index) {
            const videoItem = document.createElement('div');
            videoItem.className = 'video-item';
            videoItem.dataset.videoId = video.id;
            videoItem.dataset.index = index;
            videoItem.dataset.videoSlug = video.slug || video.id;
            
            videoItem.innerHTML = `
                <video 
                    id="video-${video.id}"
                    src="${video.video_url}"
                    loop
                    muted
                    playsinline
                    preload="metadata"
                    class="main-video"
                ></video>
                
                <div class="video-overlay"></div>
                
                <div class="video-controls">
                    <button class="play-pause-btn" data-video-id="${video.id}" type="button">
                        <i class="fas fa-play" id="play-icon-${video.id}"></i>
                    </button>
                </div>
                
                <div class="side-actions">
                    <button class="action-btn like-btn" data-video-id="${video.id}" type="button">
                        <i class="fas fa-heart"></i>
                        <span class="like-count">${video.likes_count || 0}</span>
                    </button>
                    <button class="action-btn comment-btn" data-video-id="${video.id}" type="button">
                        <i class="fas fa-comment"></i>
                        <span class="comment-count">0</span>
                    </button>
                    <button class="action-btn share-btn" data-video-id="${video.id}" data-video-title="${video.title}" data-video-slug="${video.slug || video.id}" type="button">
                        <i class="fas fa-share"></i>
                        <span class="share-count">${video.shares_count || 0}</span>
                    </button>
                    <button class="action-btn sound-btn" data-video-id="${video.id}" type="button">
                        <i class="fas fa-volume-mute" id="sound-icon-${video.id}"></i>
                        <span>Sound</span>
                    </button>
                </div>
                
                <div class="video-info">
                    <div class="video-title">${video.title}</div>
                    ${video.description ? `<div class="video-description">${video.description}</div>` : ''}
                    <div class="video-meta">
                        <span><i class="fas fa-eye"></i> <span class="view-count">${video.views_count || 0}</span></span>
                        ${video.category_name ? `<span><i class="fas fa-tag"></i> ${video.category_name}</span>` : ''}
                        ${video.username ? `<span><i class="fas fa-user"></i> @${video.username}</span>` : ''}
                    </div>
                </div>
            `;
            
            return videoItem;
        }

        // FIXED: Video control functions
        function togglePlayPause(videoId) {
            console.log('Toggle play/pause for video:', videoId);
            const video = document.getElementById(`video-${videoId}`);
            if (video) {
                try {
                    if (video.paused) {
                        video.play().then(() => {
                            updatePlayIcon(videoId, true);
                        }).catch(error => {
                            console.error('Play failed:', error);
                            updatePlayIcon(videoId, false);
                        });
                    } else {
                        video.pause();
                        updatePlayIcon(videoId, false);
                    }
                } catch (error) {
                    console.error('Error toggling play/pause:', error);
                }
            } else {
                console.error('Video element not found:', `video-${videoId}`);
            }
        }

        function updatePlayIcon(videoId, isPlaying) {
            const icon = document.getElementById(`play-icon-${videoId}`);
            if (icon) {
                icon.className = isPlaying ? 'fas fa-pause' : 'fas fa-play';
            }
        }

        function toggleSound(videoId) {
            console.log('Toggle sound for video:', videoId);
            const video = document.getElementById(`video-${videoId}`);
            const icon = document.getElementById(`sound-icon-${videoId}`);
            const btn = document.querySelector(`[data-video-id="${videoId}"].sound-btn`);
            
            if (video && icon && btn) {
                try {
                    if (video.muted) {
                        video.muted = false;
                        icon.className = 'fas fa-volume-up';
                        btn.classList.add('active');
                    } else {
                        video.muted = true;
                        icon.className = 'fas fa-volume-mute';
                        btn.classList.remove('active');
                    }
                } catch (error) {
                    console.error('Error toggling sound:', error);
                }
            } else {
                console.error('Sound elements not found for video:', videoId);
            }
        }

        // FIXED: Enhanced like functionality
        async function toggleLike(videoId) {
            console.log('Toggle like for video:', videoId);
            
            if (!isOnline) {
                showToast('No internet connection', 'error');
                return;
            }
            
            const likeBtn = document.querySelector(`[data-video-id="${videoId}"].like-btn`);
            if (!likeBtn) {
                console.error('Like button not found for video:', videoId);
                return;
            }
            
            const likeIcon = likeBtn.querySelector('i');
            const likeCount = likeBtn.querySelector('.like-count');
            
            // Optimistic UI update
            const currentCount = parseInt(likeCount.textContent) || 0;
            const wasLiked = likeBtn.classList.contains('liked');
            
            try {
                // Show loading state
                likeBtn.style.opacity = '0.6';
                likeBtn.style.pointerEvents = 'none';
                
                const data = await apiCall(`/api/videos/${videoId}/like`, {
                    method: 'POST'
                });
                
                if (data.success) {
                    if (data.requiresLogin) {
                        // Guest mode
                        if (wasLiked) {
                            likeBtn.classList.remove('liked');
                            likeIcon.style.color = '';
                            likeCount.textContent = Math.max(0, currentCount - 1);
                            showToast('💔 Unliked', 'info', 1500);
                        } else {
                            likeBtn.classList.add('liked');
                            likeIcon.style.color = '#fe2c55';
                            likeCount.textContent = currentCount + 1;
                            showToast('❤️ Liked!', 'success', 1500);
                        }
                    } else if (data.data) {
                        // Authenticated mode
                        if (data.data.liked) {
                            likeBtn.classList.add('liked');
                            likeIcon.style.color = '#fe2c55';
                            likeCount.textContent = currentCount + 1;
                            showToast('❤️ Liked!', 'success', 1500);
                        } else {
                            likeBtn.classList.remove('liked');
                            likeIcon.style.color = '';
                            likeCount.textContent = Math.max(0, currentCount - 1);
                            showToast('💔 Unliked', 'info', 1500);
                        }
                    }
                } else {
                    throw new Error(data.message || 'Failed to toggle like');
                }
            } catch (error) {
                // Revert optimistic update
                if (wasLiked) {
                    likeBtn.classList.add('liked');
                    likeIcon.style.color = '#fe2c55';
                } else {
                    likeBtn.classList.remove('liked');
                    likeIcon.style.color = '';
                }
                likeCount.textContent = currentCount;
                
                handleApiError(error, 'Failed to like video');
            } finally {
                // Remove loading state
                likeBtn.style.opacity = '1';
                likeBtn.style.pointerEvents = 'auto';
            }
        }

        function openComments(videoId) {
            console.log('Open comments for video:', videoId);
            showToast('Comments feature coming soon!');
        }

        function openShareModal(videoId, videoTitle = '', videoSlug = '') {
            console.log('Open share modal for video:', videoId);
            currentShareVideoId = videoId;
            currentShareVideoTitle = videoTitle;
            currentShareVideoSlug = videoSlug;
            
            const shareModal = document.getElementById('shareModal');
            const shareVideoTitle = document.getElementById('shareVideoTitle');
            
            if (shareVideoTitle) {
                shareVideoTitle.textContent = videoTitle;
            }
            if (shareModal) {
                shareModal.classList.add('show');
            }
        }

        function closeShareModal() {
            const shareModal = document.getElementById('shareModal');
            if (shareModal) {
                shareModal.classList.remove('show');
            }
            currentShareVideoId = null;
            currentShareVideoTitle = '';
            currentShareVideoSlug = '';
        }

        function shareToPlat_form(platform) {
            if (!currentShareVideoId) return;
            
            const baseUrl = window.location.origin;
            const videoUrl = `${baseUrl}/video/${currentShareVideoSlug}`;
            const shareText = currentShareVideoTitle ? `${currentShareVideoTitle} - Watch on VideoApp` : 'Check out this amazing video on VideoApp!';
            
            switch (platform) {
                case 'copy':
                    navigator.clipboard.writeText(videoUrl).then(() => {
                        showToast('Link copied to clipboard!');
                    }).catch(() => {
                        const textArea = document.createElement('textarea');
                        textArea.value = videoUrl;
                        document.body.appendChild(textArea);
                        textArea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textArea);
                        showToast('Link copied to clipboard!');
                    });
                    break;
                case 'whatsapp':
                    window.open(`https://wa.me/?text=${encodeURIComponent(shareText + ' ' + videoUrl)}`, '_blank');
                    break;
                case 'twitter':
                    window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(videoUrl)}&hashtags=VideoApp,Videos`, '_blank');
                    break;
                case 'facebook':
                    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(videoUrl)}&quote=${encodeURIComponent(shareText)}`, '_blank');
                    break;
                case 'telegram':
                    window.open(`https://t.me/share/url?url=${encodeURIComponent(videoUrl)}&text=${encodeURIComponent(shareText)}`, '_blank');
                    break;
                case 'linkedin':
                    window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(videoUrl)}`, '_blank');
                    break;
            }
            
            recordShare(currentShareVideoId, platform);
            updateShareCount(currentShareVideoId);
            closeShareModal();
        }

        async function recordShare(videoId, platform) {
            if (!isOnline) return;
            
            try {
                await apiCall(`/api/videos/${videoId}/share`, {
                    method: 'POST',
                    body: JSON.stringify({ platform })
                });
            } catch (error) {
                console.log('Failed to record share:', error.message);
            }
        }

        function updateShareCount(videoId) {
            const shareBtn = document.querySelector(`[data-video-id="${videoId}"].share-btn .share-count`);
            if (shareBtn) {
                const currentCount = parseInt(shareBtn.textContent) || 0;
                shareBtn.textContent = currentCount + 1;
            }
        }

        async function recordView(videoId) {
            if (!isOnline) return;
            
            try {
                await apiCall(`/api/videos/${videoId}/view`, {
                    method: 'POST',
                    body: JSON.stringify({
                        watchDuration: 0,
                        source: 'web'
                    })
                });
                
                const viewCount = document.querySelector(`[data-video-id="${videoId}"] .view-count`);
                if (viewCount) {
                    const currentViews = parseInt(viewCount.textContent) || 0;
                    viewCount.textContent = currentViews + 1;
                }
            } catch (error) {
                console.log('Failed to record view:', error.message);
            }
        }

        // Navigation functions
        function openMenu() {
            console.log('Opening sidebar menu');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');
            
            if (sidebar && overlay) {
                sidebar.classList.add('show');
                overlay.classList.add('show');
                
                // Prevent body scroll when menu is open
                document.body.style.overflow = 'hidden';
            }
        }

        function closeSidebar() {
            console.log('Closing sidebar menu');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');
            
            if (sidebar && overlay) {
                sidebar.classList.remove('show');
                overlay.classList.remove('show');
                
                // Restore body scroll
                document.body.style.overflow = '';
            }
        }

        function goToAdmin() {
            console.log('Navigating to admin dashboard');
            window.location.href = '/admin';
        }

        // Event Handlers
        function handleKeyNavigation(e) {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
                return;
            }

            if (e.key === 'ArrowUp' && currentVideoIndex > 0) {
                e.preventDefault();
                scrollToVideo(currentVideoIndex - 1);
            } else if (e.key === 'ArrowDown' && currentVideoIndex < videos.length - 1) {
                e.preventDefault();
                scrollToVideo(currentVideoIndex + 1);
            } else if (e.key === ' ') {
                e.preventDefault();
                if (videos[currentVideoIndex]) {
                    togglePlayPause(videos[currentVideoIndex].dataset.videoId);
                }
            } else if (e.key === 'm' || e.key === 'M') {
                e.preventDefault();
                if (videos[currentVideoIndex]) {
                    toggleSound(videos[currentVideoIndex].dataset.videoId);
                }
            }
        }

        function handleVisibilityChange() {
            if (document.hidden) {
                videos.forEach(item => {
                    const video = item.querySelector('video');
                    if (video && !video.paused) {
                        video.pause();
                    }
                });
            } else {
                setTimeout(() => {
                    playCurrentVideo();
                }, 100);
            }
        }

        function handleBlur() {
            if (videos[currentVideoIndex]) {
                const video = videos[currentVideoIndex].querySelector('video');
                if (video && !video.paused) {
                    wasPlayingBeforeBlur = true;
                    video.pause();
                } else {
                    wasPlayingBeforeBlur = false;
                }
            }
        }

        function handleFocus() {
            if (wasPlayingBeforeBlur && videos[currentVideoIndex]) {
                const video = videos[currentVideoIndex].querySelector('video');
                if (video && video.paused) {
                    setTimeout(() => {
                        video.play().catch(() => {});
                    }, 100);
                }
            }
        }

        function handleResize() {
            setTimeout(() => {
                setupIntersectionObserver();
                if (videos.length > 0 && currentVideoIndex < videos.length) {
                    videos[currentVideoIndex].scrollIntoView({ behavior: 'instant' });
                }
            }, 100);
        }

        function handleOrientationChange() {
            setTimeout(() => {
                setupIntersectionObserver();
                if (videos.length > 0 && currentVideoIndex < videos.length) {
                    videos[currentVideoIndex].scrollIntoView({ behavior: 'instant' });
                }
            }, 300);
        }

        function handleScroll() {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                // Ensure event delegation is still active after scroll
                console.log('Scroll completed');
            }, 100);
        }

        function handleOnline() {
            if (!isOnline) {
                showToast('Connection restored', 'success');
                isOnline = true;
            }
        }

        function handleOffline() {
            showToast('Connection lost - some features may not work', 'warning', 5000);
            isOnline = false;
        }

        function scrollToVideo(index) {
            if (index >= 0 && index < videos.length) {
                const targetVideo = videos[index];
                if (targetVideo) {
                    targetVideo.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'center'
                    });
                }
            }
        }

        // Utility functions
        function showToast(message, type = 'info', duration = 3000) {
            // Remove existing toasts
            const existingToasts = document.querySelectorAll('.toast');
            existingToasts.forEach(toast => {
                if (!toast.classList.contains('removing')) {
                    toast.classList.add('removing');
                    setTimeout(() => toast.remove(), 200);
                }
            });
            
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            
            const icons = {
                success: '✅',
                error: '❌',
                warning: '⚠️',
                info: 'ℹ️'
            };
            
            toast.innerHTML = `
                <span class="toast-icon">${icons[type] || icons.info}</span>
                <span class="toast-message">${message}</span>
            `;
            
            toast.style.cssText = `
                position: fixed;
                bottom: 100px;
                left: 50%;
                transform: translateX(-50%);
                background: ${type === 'error' ? '#ff4757' : type === 'success' ? '#2ed573' : type === 'warning' ? '#ffa502' : 'rgba(0, 0, 0, 0.9)'};
                color: white;
                padding: 12px 20px;
                border-radius: 25px;
                z-index: 3000;
                font-size: 14px;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.1);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                display: flex;
                align-items: center;
                gap: 8px;
                animation: toastSlideUp 0.3s ease;
                max-width: 300px;
                text-align: center;
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'toastFadeOut 0.3s ease forwards';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }, duration);
        }

        function handleApiError(error, fallbackMessage = 'Something went wrong') {
            console.error('API Error:', error);
            
            if (error.message.includes('401')) {
                showToast('Please login to perform this action', 'warning');
            } else if (error.message.includes('403')) {
                showToast('You don\'t have permission for this action', 'error');
            } else if (error.message.includes('404')) {
                showToast('Resource not found', 'error');
            } else if (error.message.includes('500')) {
                showToast('Server error - please try again later', 'error');
            } else if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
                showToast('Connection error - check your internet', 'error');
            } else {
                showToast(fallbackMessage, 'error');
            }
        }

        async function apiCall(url, options = {}, retries = 3) {
            const defaultOptions = {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            };
            
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, defaultOptions);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`);
                    }
                    
                    const data = await response.json();
                    return data;
                } catch (error) {
                    console.error(`API call attempt ${i + 1} failed:`, error);
                    
                    if (i === retries - 1) {
                        throw error;
                    }
                    
                    await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
                }
            }
        }

        function cleanup() {
            if (observer) {
                observer.disconnect();
            }
            if (mutationObserver) {
                mutationObserver.disconnect();
            }
            
            if (scrollTimeout) {
                clearTimeout(scrollTimeout);
            }
        }

        // Error handling for video loading
        document.addEventListener('error', function(e) {
            if (e.target.tagName === 'VIDEO') {
                console.error('Video failed to load:', e.target.src);
                const videoItem = e.target.closest('.video-item');
                if (videoItem) {
                    const errorDiv = document.createElement('div');
                    errorDiv.innerHTML = `
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: white;">
                            <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px; color: #ff6b6b;"></i>
                            <p>Video failed to load</p>
                        </div>
                    `;
                    videoItem.appendChild(errorDiv);
                }
            }
        }, true);

        // Add CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes toastSlideUp {
                from {
                    opacity: 0;
                    transform: translate(-50%, 20px);
                }
                to {
                    opacity: 1;
                    transform: translate(-50%, 0);
                }
            }
            
            @keyframes toastFadeOut {
                from {
                    opacity: 1;
                    transform: translate(-50%, 0);
                }
                to {
                    opacity: 0;
                    transform: translate(-50%, 20px);
                }
            }
        `;
        document.head.appendChild(style);

        // Search functionality - FIXED VERSION
        function setupSearchFunctionality() {
            console.log('🔧 Setting up search functionality...');
            
            // Get all elements
            const searchBtn = document.getElementById('searchBtn');
            const searchModal = document.getElementById('searchModal');
            const searchClose = document.getElementById('searchClose');
            const searchForm = document.getElementById('searchForm');
            const searchInput = document.getElementById('searchInput');
            const searchClear = document.getElementById('searchClear');

            // Verify elements exist
            if (!searchBtn || !searchModal || !searchClose || !searchForm || !searchInput || !searchClear) {
                console.error('❌ Missing search elements!');
                return;
            }

            // 1. Search button - Open modal
            searchBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('🔍 Search button clicked');
                openSearchModal();
            });

            // 2. Close modal events
            searchClose.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                closeSearchModal();
            });
            
            searchModal.addEventListener('click', function(e) {
                if (e.target === searchModal) {
                    closeSearchModal();
                }
            });

            // 3. Search form submission
            searchForm.addEventListener('submit', function(e) {
                e.preventDefault();
                e.stopPropagation();
                performSearch();
            });

            // 4. Search input events
            searchInput.addEventListener('input', function(e) {
                const query = e.target.value.trim();
                updateClearButton();
                
                // Clear previous timeout
                clearTimeout(searchTimeout);
                
                if (query.length === 0) {
                    showNoQueryState();
                    return;
                }
                
                // Auto-search after user stops typing
                searchTimeout = setTimeout(() => {
                    if (query.length >= 2) {
                        performSearch();
                    }
                }, 800);
            });

            // 5. Clear button
            searchClear.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                searchInput.value = '';
                searchInput.focus();
                updateClearButton();
                showNoQueryState();
            });

            // 6. Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && searchModal.classList.contains('show')) {
                    closeSearchModal();
                }
                
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    openSearchModal();
                }
            });

            console.log('✅ Search functionality setup complete!');
        }

        function openSearchModal() {
            const searchModal = document.getElementById('searchModal');
            const searchInput = document.getElementById('searchInput');
            
            if (!searchModal || !searchInput) return;
            
            // Show modal with animation
            searchModal.style.display = 'flex';
            
            setTimeout(() => {
                searchModal.classList.add('show');
            }, 10);
            
            // Focus on input after animation
            setTimeout(() => {
                searchInput.focus();
            }, 150);
            
            // Prevent body scroll
            document.body.style.overflow = 'hidden';
        }

        function closeSearchModal() {
            const searchModal = document.getElementById('searchModal');
            const searchInput = document.getElementById('searchInput');
            
            if (!searchModal || !searchInput) return;
            
            // Hide modal with animation
            searchModal.classList.remove('show');
            
            setTimeout(() => {
                searchModal.style.display = 'none';
            }, 300);
            
            // Clear search and reset state
            searchInput.value = '';
            updateClearButton();
            showNoQueryState();
            
            // Restore body scroll
            document.body.style.overflow = '';
        }

        function updateClearButton() {
            const searchInput = document.getElementById('searchInput');
            const searchClear = document.getElementById('searchClear');
            
            if (!searchInput || !searchClear) return;
            
            if (searchInput.value.trim().length > 0) {
                searchClear.classList.add('show');
            } else {
                searchClear.classList.remove('show');
            }
        }

        async function performSearch() {
            if (isSearching) return;

            const searchInput = document.getElementById('searchInput');
            const query = searchInput ? searchInput.value.trim() : '';

            if (!query || query.length < 2) {
                showToast('Please enter at least 2 characters', 'warning');
                return;
            }

            isSearching = true;
            
            // Update search button state
            const searchBtn = document.getElementById('searchSubmitBtn');
            let originalContent = '';
            
            if (searchBtn) {
                originalContent = searchBtn.innerHTML;
                searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> <span>Searching...</span>';
                searchBtn.disabled = true;
            }

            // Show loading state
            showLoadingState();

            try {
                console.log('🚀 Searching for:', query);
                
                // REAL API call to your backend
                const response = await fetch(`/api/videos/search?q=${encodeURIComponent(query)}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    displaySearchResults(data.data || [], query);
                } else {
                    throw new Error(data.message || 'Search failed');
                }
                
            } catch (error) {
                console.error('❌ Search error:', error);
                showErrorState('Search failed. Please try again.');
            } finally {
                isSearching = false;
                
                // Restore search button
                if (searchBtn) {
                    searchBtn.innerHTML = originalContent;
                    searchBtn.disabled = false;
                }
            }
        }

        function displaySearchResults(results, query) {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            if (!results || results.length === 0) {
                searchResults.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-search"></i>
                        <h3>No results found</h3>
                        <p>No videos found for "${query}". Try different keywords.</p>
                    </div>
                `;
                return;
            }

            searchResults.innerHTML = `
                <div class="results-header">
                    <div class="results-count">Found ${results.length} result${results.length !== 1 ? 's' : ''} for "${query}"</div>
                </div>
                <div class="results-grid">
                    ${results.map(video => `
                        <div class="result-item" onclick="goToVideo('${video.slug || video.id}', '${video.title}')">
                            <div class="result-thumbnail">
                                ${video.thumbnail ? 
                                    `<img src="${video.thumbnail}" alt="${video.title}" loading="lazy">` :
                                    `<div style="width:100%;height:100%;background:#333;display:flex;align-items:center;justify-content:center;color:#666;"><i class="fas fa-play"></i></div>`
                                }
                            </div>
                            <div class="result-info">
                                <div class="result-title">${video.title}</div>
                                <div class="result-meta">
                                    <span><i class="fas fa-eye"></i> ${formatNumber(video.views_count || 0)}</span>
                                    <span><i class="fas fa-heart"></i> ${formatNumber(video.likes_count || 0)}</span>
                                    ${video.username ? `<span><i class="fas fa-user"></i> @${video.username}</span>` : ''}
                                </div>
                                ${video.description ? `<div class="result-description">${video.description}</div>` : ''}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        function goToVideo(slug, title) {
            console.log('🎬 Navigating to video:', slug);
            closeSearchModal();
            window.location.href = `/video/${slug}`;
        }

        // Helper functions
        function showLoadingState() {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="loading-state">
                    <div class="spinner"></div>
                    <p>Searching videos...</p>
                </div>
            `;
        }

        function showErrorState(message) {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Search Error</h3>
                    <p>${message}</p>
                </div>
            `;
        }

        function showNoQueryState() {
            const searchResults = document.getElementById('searchResults');
            if (!searchResults) return;
            
            searchResults.innerHTML = `
                <div class="no-query-state">
                    <i class="fas fa-search"></i>
                    <h3>Search Videos</h3>
                    <p>Enter keywords above to find amazing videos</p>
                </div>
            `;
        }

        function formatNumber(num) {
            if (num >= 1000000) {
                return (num / 1000000).toFixed(1) + 'M';
            } else if (num >= 1000) {
                return (num / 1000).toFixed(1) + 'K';
            }
            return num.toString();
        }
    
    </script>
</body>
</html>
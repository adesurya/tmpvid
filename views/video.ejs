<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title><%= video.title %> - VideoApp</title>
    
    <!-- Basic Meta Tags -->
    <meta name="description" content="<%= video.description || video.title %>">
    <meta name="author" content="<%= video.username ? '@' + video.username : 'VideoApp' %>">
    <meta name="robots" content="index, follow">
    <meta name="keywords" content="<%= video.category_name ? video.category_name + ', ' : '' %>video, <%= video.title.split(' ').slice(0, 5).join(', ') %>">
    
    <!-- OpenGraph Meta Tags -->
    <meta property="og:type" content="video.other">
    <meta property="og:title" content="<%= video.title %>">
    <meta property="og:description" content="<%= video.description || video.title %>">
    <meta property="og:url" content="<%= typeof req !== 'undefined' ? req.protocol + '://' + req.get('host') + req.originalUrl : 'https://videoapp.com/video/' + video.slug %>">
    <meta property="og:site_name" content="VideoApp">
    <% if (video.thumbnail) { %>
    <meta property="og:image" content="<%= video.thumbnail %>">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:image:alt" content="<%= video.title %>">
    <% } %>
    <meta property="og:video" content="<%= video.video_url %>">
    <meta property="og:video:type" content="video/mp4">
    <meta property="og:video:width" content="1280">
    <meta property="og:video:height" content="720">
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="player">
    <meta name="twitter:site" content="@VideoApp">
    <meta name="twitter:title" content="<%= video.title %>">
    <meta name="twitter:description" content="<%= video.description || video.title %>">
    <% if (video.thumbnail) { %>
    <meta name="twitter:image" content="<%= video.thumbnail %>">
    <meta name="twitter:image:alt" content="<%= video.title %>">
    <% } %>
    <meta name="twitter:player" content="<%= typeof req !== 'undefined' ? req.protocol + '://' + req.get('host') + '/embed/' + video.slug : 'https://videoapp.com/embed/' + video.slug %>">
    <meta name="twitter:player:width" content="1280">
    <meta name="twitter:player:height" content="720">
    
    <!-- Additional Video Meta -->
    <meta property="video:duration" content="<%= video.duration || 0 %>">
    <meta property="video:release_date" content="<%= video.created_at %>">
    <% if (video.category_name) { %>
    <meta property="video:tag" content="<%= video.category_name %>">
    <% } %>
    
    <!-- Schema.org JSON-LD -->
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "VideoObject",
        "name": "<%= video.title %>",
        "description": "<%= video.description || video.title %>",
        "thumbnailUrl": "<%= video.thumbnail || '/images/default-thumbnail.jpg' %>",
        "uploadDate": "<%= video.created_at %>",
        "duration": "PT<%= video.duration || 0 %>S",
        "contentUrl": "<%= video.video_url %>",
        "embedUrl": "<%= typeof req !== 'undefined' ? req.protocol + '://' + req.get('host') + '/embed/' + video.slug : 'https://videoapp.com/embed/' + video.slug %>",
        "publisher": {
            "@type": "Organization",
            "name": "VideoApp",
            "logo": {
                "@type": "ImageObject",
                "url": "<%= typeof req !== 'undefined' ? req.protocol + '://' + req.get('host') + '/images/logo.png' : 'https://videoapp.com/images/logo.png' %>"
            }
        },
        "interactionStatistic": [
            {
                "@type": "InteractionCounter",
                "interactionType": { "@type": "WatchAction" },
                "userInteractionCount": <%= video.views_count || 0 %>
            },
            {
                "@type": "InteractionCounter",
                "interactionType": { "@type": "LikeAction" },
                "userInteractionCount": <%= video.likes_count || 0 %>
            },
            {
                "@type": "InteractionCounter",
                "interactionType": { "@type": "ShareAction" },
                "userInteractionCount": <%= video.shares_count || 0 %>
            }
        ]<% if (video.username) { %>,
        "creator": {
            "@type": "Person",
            "name": "<%= video.username %>"
        }<% } %>
    }
    </script>
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#fe2c55">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    <!-- Canonical URL -->
    <link rel="canonical" href="<%= typeof req !== 'undefined' ? req.protocol + '://' + req.get('host') + req.originalUrl : 'https://videoapp.com/video/' + video.slug %>">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
    <div class="app-container">
        <!-- Top Navigation -->
        <nav class="top-nav">
            <a href="/" class="logo">VideoApp</a>
            <div class="nav-icons">
                <button class="nav-icon" onclick="history.back()">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <button class="nav-icon" id="shareVideoBtn">
                    <i class="fas fa-share"></i>
                </button>
                <button class="nav-icon" onclick="window.location.href='/'">
                    <i class="fas fa-home"></i>
                </button>
            </div>
        </nav>

        <!-- Single Video Container -->
        <div class="single-video-container">
            <div class="video-item" data-video-id="<%= video.id %>" data-video-slug="<%= video.slug %>">
                <!-- Video Element -->
                <video 
                    id="mainVideo"
                    src="<%= video.video_url %>"
                    controls
                    autoplay
                    muted
                    playsinline
                    preload="metadata"
                    class="single-video"
                    poster="<%= video.thumbnail || '' %>"
                ></video>

                <!-- Video Overlay -->
                <div class="video-overlay"></div>

                <!-- Side Actions - FIXED: Added Audio Toggle -->
                <div class="side-actions">
                    <button class="action-btn like-btn" data-video-id="<%= video.id %>">
                        <i class="fas fa-heart"></i>
                        <span class="like-count"><%= video.likes_count || 0 %></span>
                    </button>
                    <button class="action-btn comment-btn" data-video-id="<%= video.id %>">
                        <i class="fas fa-comment"></i>
                        <span class="comment-count">0</span>
                    </button>
                    <button class="action-btn share-btn" data-video-id="<%= video.id %>" data-video-title="<%= video.title %>" data-video-slug="<%= video.slug %>">
                        <i class="fas fa-share"></i>
                        <span class="share-count"><%= video.shares_count || 0 %></span>
                    </button>
                    <!-- FIXED: Added Audio Toggle Button -->
                    <button class="action-btn sound-btn" data-video-id="<%= video.id %>">
                        <i class="fas fa-volume-mute" id="sound-icon-<%= video.id %>"></i>
                        <span>Sound</span>
                    </button>
                </div>

                <!-- Video Info -->
                <div class="video-info-detailed">
                    <h1 class="video-title"><%= video.title %></h1>
                    <div class="video-meta-detailed">
                        <div class="meta-row">
                            <span class="view-count">
                                <i class="fas fa-eye"></i> 
                                <span id="viewCount"><%= video.views_count || 0 %></span> views
                            </span>
                            <span class="upload-date">
                                <i class="fas fa-calendar"></i>
                                <%= new Date(video.created_at).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                }) %>
                            </span>
                        </div>
                        
                        <% if (video.category_name) { %>
                        <div class="meta-row">
                            <span class="category">
                                <i class="fas fa-tag"></i>
                                <a href="/category/<%= video.category_name.toLowerCase().replace(/\s+/g, '-') %>">
                                    <%= video.category_name %>
                                </a>
                            </span>
                        </div>
                        <% } %>
                        
                        <% if (video.username) { %>
                        <div class="meta-row">
                            <span class="author">
                                <i class="fas fa-user"></i>
                                By @<%= video.username %>
                            </span>
                        </div>
                        <% } %>
                    </div>
                    
                    <% if (video.description) { %>
                    <div class="video-description-detailed">
                        <%= video.description %>
                    </div>
                    <% } %>
                    
                    <!-- Engagement Stats -->
                    <div class="engagement-stats">
                        <div class="stat-item">
                            <i class="fas fa-eye"></i>
                            <span><%= video.views_count || 0 %> views</span>
                        </div>
                        <div class="stat-item">
                            <i class="fas fa-heart"></i>
                            <span><%= video.likes_count || 0 %> likes</span>
                        </div>
                        <div class="stat-item">
                            <i class="fas fa-share"></i>
                            <span><%= video.shares_count || 0 %> shares</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Related Videos -->
        <% if (relatedVideos && relatedVideos.length > 0) { %>
        <div class="related-videos-section">
            <h2>Related Videos</h2>
            <div class="related-videos-grid">
                <% relatedVideos.forEach(relatedVideo => { %>
                <a href="/video/<%= relatedVideo.slug %>" class="related-video-item">
                    <div class="related-video-thumbnail">
                        <% if (relatedVideo.thumbnail) { %>
                        <img src="<%= relatedVideo.thumbnail %>" alt="<%= relatedVideo.title %>">
                        <% } else { %>
                        <div class="thumbnail-placeholder">
                            <i class="fas fa-play"></i>
                        </div>
                        <% } %>
                        <div class="video-duration">
                            <%= relatedVideo.duration ? Math.floor(relatedVideo.duration / 60) + ':' + (relatedVideo.duration % 60).toString().padStart(2, '0') : '0:00' %>
                        </div>
                    </div>
                    <div class="related-video-info">
                        <h3><%= relatedVideo.title %></h3>
                        <div class="related-video-meta">
                            <span><%= relatedVideo.views_count || 0 %> views</span>
                            <% if (relatedVideo.username) { %>
                            <span>@<%= relatedVideo.username %></span>
                            <% } %>
                        </div>
                    </div>
                </a>
                <% }); %>
            </div>
        </div>
        <% } %>

        <!-- Share Modal -->
        <div class="share-modal" id="shareModal">
            <div class="share-content">
                <div class="share-header">
                    <h3>Share Video</h3>
                    <button class="share-close" id="shareClose">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="shareVideoTitle" style="margin-bottom: 15px; color: #ccc; text-align: center; font-size: 14px;">
                    <%= video.title %>
                </div>
                <div class="share-options">
                    <button class="share-option" data-platform="copy">
                        <i class="fas fa-link"></i>
                        <span>Copy Link</span>
                    </button>
                    <button class="share-option" data-platform="whatsapp">
                        <i class="fab fa-whatsapp"></i>
                        <span>WhatsApp</span>
                    </button>
                    <button class="share-option" data-platform="twitter">
                        <i class="fab fa-twitter"></i>
                        <span>Twitter</span>
                    </button>
                    <button class="share-option" data-platform="facebook">
                        <i class="fab fa-facebook"></i>
                        <span>Facebook</span>
                    </button>
                    <button class="share-option" data-platform="telegram">
                        <i class="fab fa-telegram"></i>
                        <span>Telegram</span>
                    </button>
                    <button class="share-option" data-platform="linkedin">
                        <i class="fab fa-linkedin"></i>
                        <span>LinkedIn</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const video = {
            id: '<%= video.id %>',
            title: '<%= video.title %>',
            slug: '<%= video.slug %>',
            url: '<%= video.video_url %>'
        };

        let currentShareVideoId = null;
        let currentShareVideoTitle = '';
        let currentShareVideoSlug = '';
        let watchStartTime = Date.now();

        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            recordView();
            trackWatchTime();
        });

        function setupEventListeners() {
            // Share button in nav
            document.getElementById('shareVideoBtn').addEventListener('click', function() {
                openShareModal(video.id, video.title, video.slug);
            });

            // Share button in actions
            document.querySelector('.share-btn').addEventListener('click', function() {
                openShareModal(video.id, video.title, video.slug);
            });

            // Like button
            document.querySelector('.like-btn').addEventListener('click', function() {
                toggleLike(video.id);
            });

            // FIXED: Audio/Sound button event listener
            document.querySelector('.sound-btn').addEventListener('click', function() {
                toggleSound(video.id);
            });

            // Share modal
            document.getElementById('shareClose').addEventListener('click', closeShareModal);
            document.getElementById('shareModal').addEventListener('click', function(e) {
                if (e.target === this) closeShareModal();
            });

            // Share options
            document.querySelectorAll('.share-option').forEach(btn => {
                btn.addEventListener('click', function() {
                    shareToPlat_form(this.dataset.platform);
                });
            });

            // Video events
            const videoElement = document.getElementById('mainVideo');
            videoElement.addEventListener('play', function() {
                console.log('Video started playing');
            });
            
            videoElement.addEventListener('pause', function() {
                console.log('Video paused');
            });
            
            videoElement.addEventListener('ended', function() {
                console.log('Video ended');
                recordWatchCompletion();
            });

            // FIXED: Initialize audio state based on video muted property
            initializeAudioState();
        }

        // FIXED: Initialize audio button state
        function initializeAudioState() {
            const videoElement = document.getElementById('mainVideo');
            const soundIcon = document.getElementById(`sound-icon-${video.id}`);
            const soundBtn = document.querySelector('.sound-btn');
            
            if (videoElement && soundIcon && soundBtn) {
                if (videoElement.muted) {
                    soundIcon.className = 'fas fa-volume-mute';
                    soundBtn.classList.remove('active');
                } else {
                    soundIcon.className = 'fas fa-volume-up';
                    soundBtn.classList.add('active');
                }
            }
        }

        // FIXED: Toggle sound function
        function toggleSound(videoId) {
            console.log('Toggle sound for video:', videoId);
            
            const videoElement = document.getElementById('mainVideo');
            const soundIcon = document.getElementById(`sound-icon-${videoId}`);
            const soundBtn = document.querySelector('.sound-btn');
            
            if (!videoElement || !soundIcon || !soundBtn) {
                console.error('Sound elements not found');
                return;
            }
            
            try {
                if (videoElement.muted) {
                    // Unmute
                    videoElement.muted = false;
                    soundIcon.className = 'fas fa-volume-up';
                    soundBtn.classList.add('active');
                    showToast('🔊 Sound On');
                } else {
                    // Mute
                    videoElement.muted = true;
                    soundIcon.className = 'fas fa-volume-mute';
                    soundBtn.classList.remove('active');
                    showToast('🔇 Sound Off');
                }
            } catch (error) {
                console.error('Error toggling sound:', error);
                showToast('Failed to toggle sound');
            }
        }

        function openShareModal(videoId, videoTitle, videoSlug) {
            currentShareVideoId = videoId;
            currentShareVideoTitle = videoTitle;
            currentShareVideoSlug = videoSlug;
            
            document.getElementById('shareModal').classList.add('show');
        }

        function closeShareModal() {
            document.getElementById('shareModal').classList.remove('show');
            currentShareVideoId = null;
            currentShareVideoTitle = '';
            currentShareVideoSlug = '';
        }

        function shareToPlat_form(platform) {
            if (!currentShareVideoId) return;
            
            const baseUrl = window.location.origin;
            const videoUrl = `${baseUrl}/video/${currentShareVideoSlug}`;
            const shareText = currentShareVideoTitle ? `${currentShareVideoTitle} - Watch on VideoApp` : 'Check out this amazing video on VideoApp!';
            
            switch (platform) {
                case 'copy':
                    navigator.clipboard.writeText(videoUrl).then(() => {
                        showToast('Link copied to clipboard!');
                    }).catch(() => {
                        // Fallback for older browsers
                        const textArea = document.createElement('textarea');
                        textArea.value = videoUrl;
                        document.body.appendChild(textArea);
                        textArea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textArea);
                        showToast('Link copied to clipboard!');
                    });
                    break;
                case 'whatsapp':
                    window.open(`https://wa.me/?text=${encodeURIComponent(shareText + ' ' + videoUrl)}`, '_blank');
                    break;
                case 'twitter':
                    window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(videoUrl)}&hashtags=VideoApp,Videos`, '_blank');
                    break;
                case 'facebook':
                    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(videoUrl)}&quote=${encodeURIComponent(shareText)}`, '_blank');
                    break;
                case 'telegram':
                    window.open(`https://t.me/share/url?url=${encodeURIComponent(videoUrl)}&text=${encodeURIComponent(shareText)}`, '_blank');
                    break;
                case 'linkedin':
                    window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(videoUrl)}`, '_blank');
                    break;
            }
            
            recordShare(currentShareVideoId, platform);
            updateShareCount(currentShareVideoId);
            closeShareModal();
        }

        async function toggleLike(videoId) {
            try {
                const response = await fetch(`/api/videos/${videoId}/like`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    const likeBtn = document.querySelector('.like-btn');
                    const likeIcon = likeBtn.querySelector('i');
                    const likeCount = likeBtn.querySelector('.like-count');
                    
                    if (data.data.liked) {
                        likeBtn.classList.add('liked');
                        likeIcon.style.color = '#fe2c55';
                        likeCount.textContent = parseInt(likeCount.textContent) + 1;
                        showToast('❤️ Liked!');
                    } else {
                        likeBtn.classList.remove('liked');
                        likeIcon.style.color = '';
                        likeCount.textContent = Math.max(0, parseInt(likeCount.textContent) - 1);
                        showToast('💔 Unliked');
                    }

                    // Update engagement stats
                    const engagementLikes = document.querySelector('.engagement-stats .stat-item:nth-child(2) span');
                    if (engagementLikes) {
                        const currentLikes = parseInt(engagementLikes.textContent.split(' ')[0]) || 0;
                        const newLikes = data.data.liked ? currentLikes + 1 : Math.max(0, currentLikes - 1);
                        engagementLikes.textContent = `${newLikes} likes`;
                    }
                }
            } catch (error) {
                console.error('Failed to toggle like:', error);
                if (error.message.includes('401')) {
                    showToast('Please login to like videos');
                } else {
                    showToast('Failed to like video');
                }
            }
        }

        async function recordView() {
            try {
                const response = await fetch(`/api/videos/${video.id}/view`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        watchDuration: 0
                    })
                });
                
                if (response.ok) {
                    console.log('View recorded');
                    // Update view count in UI
                    const viewCount = document.getElementById('viewCount');
                    if (viewCount) {
                        const currentViews = parseInt(viewCount.textContent) || 0;
                        viewCount.textContent = currentViews + 1;
                        
                        // Update engagement stats
                        const engagementViews = document.querySelector('.engagement-stats .stat-item:first-child span');
                        if (engagementViews) {
                            engagementViews.textContent = `${currentViews + 1} views`;
                        }
                    }
                }
            } catch (error) {
                console.error('Failed to record view:', error);
            }
        }

        async function recordShare(videoId, platform) {
            try {
                const response = await fetch(`/api/videos/${videoId}/share`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ platform })
                });
                
                if (response.ok) {
                    console.log('Share recorded successfully');
                }
            } catch (error) {
                console.error('Failed to record share:', error);
            }
        }

        function updateShareCount(videoId) {
            const shareCount = document.querySelector('.share-count');
            if (shareCount) {
                const currentCount = parseInt(shareCount.textContent) || 0;
                shareCount.textContent = currentCount + 1;
                
                // Update engagement stats
                const engagementShares = document.querySelector('.engagement-stats .stat-item:last-child span');
                if (engagementShares) {
                    engagementShares.textContent = `${currentCount + 1} shares`;
                }
            }
        }

        function trackWatchTime() {
            const videoElement = document.getElementById('mainVideo');
            let lastRecordedTime = 0;
            
            setInterval(() => {
                if (!videoElement.paused && !videoElement.ended) {
                    const currentTime = Math.floor(videoElement.currentTime);
                    if (currentTime > lastRecordedTime && currentTime % 10 === 0) {
                        // Record watch time every 10 seconds
                        recordWatchTime(currentTime);
                        lastRecordedTime = currentTime;
                    }
                }
            }, 1000);
        }

        async function recordWatchTime(duration) {
            try {
                await fetch(`/api/videos/${video.id}/view`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        watchDuration: duration
                    })
                });
            } catch (error) {
                console.error('Failed to record watch time:', error);
            }
        }

        function recordWatchCompletion() {
            const videoElement = document.getElementById('mainVideo');
            const totalDuration = Math.floor(videoElement.duration);
            recordWatchTime(totalDuration);
        }

        function showToast(message) {
            // Remove existing toasts
            document.querySelectorAll('.toast').forEach(toast => toast.remove());
            
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.textContent = message;
            
            toast.style.cssText = `
                position: fixed;
                bottom: 100px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(0, 0, 0, 0.9);
                color: white;
                padding: 12px 20px;
                border-radius: 25px;
                z-index: 3000;
                font-size: 14px;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.1);
                animation: toastSlideUp 0.3s ease;
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.animation = 'toastFadeOut 0.3s ease forwards';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }, 3000);
        }

        // Track page leave to record final watch time
        window.addEventListener('beforeunload', function() {
            const videoElement = document.getElementById('mainVideo');
            if (videoElement && !videoElement.paused) {
                const currentTime = Math.floor(videoElement.currentTime);
                if (currentTime > 0) {
                    recordWatchTime(currentTime);
                }
            }
        });

        // FIXED: Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
                return;
            }

            const videoElement = document.getElementById('mainVideo');
            
            switch(e.key.toLowerCase()) {
                case ' ':
                    e.preventDefault();
                    if (videoElement.paused) {
                        videoElement.play();
                    } else {
                        videoElement.pause();
                    }
                    break;
                case 'm':
                    e.preventDefault();
                    toggleSound(video.id);
                    break;
                case 'f':
                    e.preventDefault();
                    if (videoElement.requestFullscreen) {
                        videoElement.requestFullscreen();
                    }
                    break;
            }
        });
    </script>

    <style>
        /* Single Video Page Styles */
        .single-video-container {
            position: relative;
            width: 100%;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000;
        }

        .single-video {
            width: 100%;
            height: 100%;
            object-fit: contain;
            max-height: calc(100vh - 80px);
        }

        .video-info-detailed {
            position: absolute;
            bottom: 20px;
            left: 20px;
            right: 90px;
            z-index: 50;
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
            padding: 20px;
            border-radius: 10px;
        }

        .video-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 10px;
            line-height: 1.4;
        }

        .video-meta-detailed {
            margin-bottom: 15px;
        }

        .meta-row {
            display: flex;
            gap: 20px;
            margin-bottom: 8px;
            font-size: 14px;
            color: rgba(255, 255, 255, 0.8);
        }

        .meta-row a {
            color: #fe2c55;
            text-decoration: none;
        }

        .meta-row a:hover {
            text-decoration: underline;
        }

        .video-description-detailed {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.9);
            line-height: 1.5;
            margin-bottom: 15px;
            max-height: 100px;
            overflow-y: auto;
        }

        .engagement-stats {
            display: flex;
            gap: 20px;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.7);
        }

        /* FIXED: Audio button active state */
        .sound-btn.active {
            color: #fe2c55;
        }

        .sound-btn.active i {
            color: #fe2c55;
        }

        /* Action buttons improvements */
        .action-btn {
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(254, 44, 85, 0.3);
        }

        .action-btn:active {
            transform: scale(0.95);
        }

        .like-btn.liked {
            color: #fe2c55;
        }

        .like-btn.liked i {
            color: #fe2c55;
            animation: heartPulse 0.3s ease;
        }

        @keyframes heartPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .related-videos-section {
            background: #1a1a1a;
            padding: 30px 20px;
            min-height: 50vh;
        }

        .related-videos-section h2 {
            color: #fff;
            margin-bottom: 20px;
            text-align: center;
        }

        .related-videos-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .related-video-item {
            background: #2a2a2a;
            border-radius: 10px;
            overflow: hidden;
            text-decoration: none;
            color: #fff;
            transition: all 0.3s ease;
        }

        .related-video-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

        .related-video-thumbnail {
            position: relative;
            width: 100%;
            height: 150px;
            overflow: hidden;
        }

        .related-video-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .thumbnail-placeholder {
            width: 100%;
            height: 100%;
            background: #3a3a3a;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: #888;
        }

        .video-duration {
            position: absolute;
            bottom: 8px;
            right: 8px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 12px;
        }

        .related-video-info {
            padding: 15px;
        }

        .related-video-info h3 {
            font-size: 14px;
            margin-bottom: 8px;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .related-video-meta {
            font-size: 12px;
            color: #888;
            display: flex;
            gap: 10px;
        }

        /* Toast animations */
        @keyframes toastSlideUp {
            from {
                opacity: 0;
                transform: translate(-50%, 20px);
            }
            to {
                opacity: 1;
                transform: translate(-50%, 0);
            }
        }

        @keyframes toastFadeOut {
            from {
                opacity: 1;
                transform: translate(-50%, 0);
            }
            to {
                opacity: 0;
                transform: translate(-50%, -20px);
            }
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .video-info-detailed {
                left: 10px;
                right: 70px;
                bottom: 10px;
                padding: 15px;
            }

            .video-title {
                font-size: 16px;
            }

            .meta-row {
                flex-direction: column;
                gap: 5px;
            }

            .engagement-stats {
                flex-wrap: wrap;
                gap: 10px;
            }

            .related-videos-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 15px;
                padding: 0 10px;
            }

            .related-video-thumbnail {
                height: 120px;
            }

            .side-actions {
                right: 15px;
                bottom: 100px;
                gap: 15px;
            }

            .action-btn {
                width: 48px;
                height: 48px;
            }

            .action-btn i {
                font-size: 20px;
            }

            .action-btn span {
                font-size: 10px;
            }
        }

        @media (max-width: 480px) {
            .side-actions {
                right: 10px;
                bottom: 80px;
                gap: 12px;
            }

            .action-btn {
                width: 44px;
                height: 44px;
            }

            .action-btn i {
                font-size: 18px;
            }

            .action-btn span {
                font-size: 9px;
            }

            .video-info-detailed {
                left: 8px;
                right: 60px;
                bottom: 8px;
                padding: 12px;
            }

            .video-title {
                font-size: 14px;
            }

            .engagement-stats {
                gap: 8px;
            }

            .stat-item {
                font-size: 11px;
            }
        }
    </style>
</body>
</html>
<!-- Enhanced views/admin/ads.ejs dengan Validasi -->
<div style="background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 30px;">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px;">
        <div>
            <h2>üîí Verified Ads Management</h2>
            <p style="color: #7f8c8d; margin-top: 5px;">Manage and validate Google AdSense, Analytics, and custom advertising codes</p>
        </div>
        <div style="display: flex; gap: 10px;">
            <button id="validationReportBtn" class="btn btn-info">
                <i class="fas fa-chart-bar"></i>
                Validation Report
            </button>
            <button id="bulkValidateBtn" class="btn btn-warning">
                <i class="fas fa-shield-alt"></i>
                Bulk Validate
            </button>
            <button id="generateAdsTxtBtn" class="btn btn-success">
                <i class="fas fa-file-alt"></i>
                Generate ads.txt
            </button>
            <button id="addAdsBtn" class="btn btn-primary">
                <i class="fas fa-plus"></i>
                Add New Code
            </button>
        </div>
    </div>
    
    <!-- Validation Overview -->
    <div id="validationOverview" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px;">
        <!-- Will be populated dynamically -->
    </div>
    
    <div id="adsCodesList">
        <div style="text-align: center; padding: 50px; color: #7f8c8d;">
            <i class="fas fa-spinner fa-spin" style="font-size: 32px; margin-bottom: 20px; color: #bdc3c7;"></i>
            <h3>Loading Ads Settings...</h3>
        </div>
    </div>
</div>

<!-- Enhanced Add/Edit Ads Modal with Validation -->
<div id="adsModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 2000; display: none; align-items: center; justify-content: center;">
    <div style="background: white; padding: 30px; border-radius: 10px; width: 90%; max-width: 800px; max-height: 90vh; overflow-y: auto;">
        <h3 id="modalTitle" style="margin-bottom: 20px;">Add New Ads Code</h3>
        
        <form id="adsForm">
            <input type="hidden" id="adsId" name="id">
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
                <div>
                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">Code Name:</label>
                    <input type="text" id="adsName" name="name" required style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;" placeholder="e.g., Header AdSense">
                </div>
                <div>
                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">Type:</label>
                    <select id="adsType" name="type" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        <option value="google_adsense">Google AdSense</option>
                        <option value="google_ads">Google Ads</option>
                        <option value="analytics">Google Analytics</option>
                        <option value="custom">Custom Code</option>
                    </select>
                </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
                <div>
                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">Position:</label>
                    <select id="adsPosition" name="position" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        <option value="header">Header (Head Section)</option>
                        <option value="footer">Footer (Before </body>)</option>
                        <option value="before_video">Before Video Player</option>
                        <option value="after_video">After Video Player</option>
                        <option value="sidebar">Sidebar Area</option>
                    </select>
                </div>
                <div>
                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">Auto-Validate:</label>
                    <select id="validateCode" name="validateCode" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        <option value="true">Yes (Recommended)</option>
                        <option value="false">No</option>
                    </select>
                </div>
            </div>
            
            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; font-weight: 600;">Description (Optional):</label>
                <input type="text" id="adsDescription" name="description" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;" placeholder="Brief description of this code">
            </div>
            
            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 5px; font-weight: 600;">HTML/JavaScript Code:</label>
                <textarea id="adsCode" name="code" required style="width: 100%; padding: 15px; border: 1px solid #ddd; border-radius: 5px; height: 200px; font-family: 'Courier New', monospace; font-size: 13px;" placeholder="Paste your AdSense, Google Ads, or Analytics code here..."></textarea>
                <div style="display: flex; gap: 10px; margin-top: 10px;">
                    <small style="color: #666; flex: 1;">
                        ‚ö†Ô∏è Only paste trusted code from Google or verified sources. This code will be automatically validated for security and compliance.
                    </small>
                    <button type="button" id="preValidateBtn" style="background: #f8f9fa; border: 1px solid #ddd; padding: 5px 10px; border-radius: 3px; font-size: 12px;">
                        <i class="fas fa-shield-alt"></i> Pre-validate
                    </button>
                </div>
            </div>
            
            <!-- Validation Results -->
            <div id="validationResults" style="display: none; margin-bottom: 20px; padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
            
            <div style="display: flex; gap: 10px; justify-content: flex-end;">
                <button type="button" id="cancelAdsBtn" style="padding: 10px 20px; border: 1px solid #ddd; background: white; border-radius: 5px; cursor: pointer;">Cancel</button>
                <button type="submit" id="submitAdsBtn" class="btn btn-primary">
                    <i class="fas fa-save"></i>
                    Save & Validate Code
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Validation Report Modal -->
<div id="reportModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 2000; display: none; align-items: center; justify-content: center;">
    <div style="background: white; padding: 30px; border-radius: 10px; width: 90%; max-width: 900px; max-height: 90vh; overflow-y: auto;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3>üìä Ads Validation Report</h3>
            <button id="closeReportBtn" style="background: none; border: none; font-size: 20px; cursor: pointer;">&times;</button>
        </div>
        <div id="reportContent">
            <div style="text-align: center; padding: 30px;">
                <i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i>
                <p>Generating report...</p>
            </div>
        </div>
    </div>
</div>

<script>
let editingAdsId = null;

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Enhanced Ads management page loaded');
    
    // Event listeners
    document.getElementById('addAdsBtn').addEventListener('click', showAddAdsForm);
    document.getElementById('cancelAdsBtn').addEventListener('click', hideAdsModal);
    document.getElementById('adsForm').addEventListener('submit', handleAdsSubmit);
    document.getElementById('bulkValidateBtn').addEventListener('click', handleBulkValidate);
    document.getElementById('validationReportBtn').addEventListener('click', showValidationReport);
    document.getElementById('generateAdsTxtBtn').addEventListener('click', generateAdsTxt);
    document.getElementById('preValidateBtn').addEventListener('click', preValidateCode);
    document.getElementById('closeReportBtn').addEventListener('click', hideReportModal);
    
    document.getElementById('adsModal').addEventListener('click', function(e) {
        if (e.target === this) hideAdsModal();
    });
    
    document.getElementById('reportModal').addEventListener('click', function(e) {
        if (e.target === this) hideReportModal();
    });
    
    // Load initial data
    loadAdsCodes();
    loadValidationOverview();
});

function showAddAdsForm() {
    editingAdsId = null;
    document.getElementById('modalTitle').textContent = 'Add New Ads Code';
    document.getElementById('adsForm').reset();
    document.getElementById('validationResults').style.display = 'none';
    document.getElementById('adsModal').style.display = 'flex';
}

function hideAdsModal() {
    document.getElementById('adsModal').style.display = 'none';
    document.getElementById('adsForm').reset();
    document.getElementById('validationResults').style.display = 'none';
    editingAdsId = null;
}

function hideReportModal() {
    document.getElementById('reportModal').style.display = 'none';
}

async function preValidateCode() {
    const code = document.getElementById('adsCode').value;
    const type = document.getElementById('adsType').value;
    
    if (!code.trim()) {
        alert('Please enter ads code first');
        return;
    }
    
    const btn = document.getElementById('preValidateBtn');
    const originalText = btn.innerHTML;
    
    try {
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Validating...';
        btn.disabled = true;
        
        const response = await fetch('/api/admin/ads/validate-preview', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ code, type })
        });
        
        const result = await response.json();
        
        if (result.success) {
            showValidationResults(result.data);
        } else {
            throw new Error(result.message || 'Validation failed');
        }
        
    } catch (error) {
        console.error('‚ùå Pre-validation error:', error);
        showValidationResults({
            valid: false,
            errors: [error.message],
            warnings: [],
            securityScore: 0
        });
    } finally {
        btn.innerHTML = originalText;
        btn.disabled = false;
    }
}

function showValidationResults(validation) {
    const resultsDiv = document.getElementById('validationResults');
    
    let statusColor = validation.valid ? '#27ae60' : (validation.errors.length > 0 ? '#e74c3c' : '#f39c12');
    let statusIcon = validation.valid ? 'check-circle' : (validation.errors.length > 0 ? 'times-circle' : 'exclamation-triangle');
    let statusText = validation.valid ? 'Valid' : (validation.errors.length > 0 ? 'Invalid' : 'Warning');
    
    let html = `
        <div style="border: 2px solid ${statusColor}; border-radius: 5px; padding: 15px;">
            <h5 style="color: ${statusColor}; margin-bottom: 15px;">
                <i class="fas fa-${statusIcon}"></i>
                Validation Result: ${statusText} (Security Score: ${validation.securityScore}/10)
            </h5>
    `;
    
    if (validation.errors && validation.errors.length > 0) {
        html += `
            <div style="margin-bottom: 15px;">
                <h6 style="color: #e74c3c; margin-bottom: 10px;">‚ùå Errors:</h6>
                <ul style="margin: 0; padding-left: 20px;">
                    ${validation.errors.map(error => `<li style="color: #e74c3c;">${escapeHtml(error)}</li>`).join('')}
                </ul>
            </div>
        `;
    }
    
    if (validation.warnings && validation.warnings.length > 0) {
        html += `
            <div style="margin-bottom: 15px;">
                <h6 style="color: #f39c12; margin-bottom: 10px;">‚ö†Ô∏è Warnings:</h6>
                <ul style="margin: 0; padding-left: 20px;">
                    ${validation.warnings.map(warning => `<li style="color: #f39c12;">${escapeHtml(warning)}</li>`).join('')}
                </ul>
            </div>
        `;
    }
    
    if (validation.recommendations && validation.recommendations.length > 0) {
        html += `
            <div style="margin-bottom: 15px;">
                <h6 style="color: #3498db; margin-bottom: 10px;">üí° Recommendations:</h6>
                <ul style="margin: 0; padding-left: 20px;">
                    ${validation.recommendations.map(rec => `<li style="color: #3498db;">${escapeHtml(rec)}</li>`).join('')}
                </ul>
            </div>
        `;
    }
    
    if (validation.extractedData) {
        html += `
            <div>
                <h6 style="color: #7f8c8d; margin-bottom: 10px;">üìä Extracted Data:</h6>
                <div style="background: #f8f9fa; padding: 10px; border-radius: 3px; font-family: monospace; font-size: 12px;">
                    ${Object.entries(validation.extractedData).map(([key, value]) => 
                        `<div><strong>${key}:</strong> ${JSON.stringify(value)}</div>`
                    ).join('')}
                </div>
            </div>
        `;
    }
    
    html += '</div>';
    resultsDiv.innerHTML = html;
    resultsDiv.style.display = 'block';
}

async function handleAdsSubmit(e) {
    e.preventDefault();
    
    const submitBtn = document.getElementById('submitAdsBtn');
    const originalText = submitBtn.innerHTML;
    
    try {
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving & Validating...';
        submitBtn.disabled = true;
        
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        
        console.log('üíæ Saving ads data with validation:', data);
        
        const url = editingAdsId ? `/api/admin/ads/${editingAdsId}` : '/api/admin/ads';
        const method = editingAdsId ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('üìä Response data:', result);
        
        if (result.success) {
            console.log('‚úÖ Ads code saved successfully');
            
            let message = 'Ads code saved successfully!';
            if (result.validation) {
                if (result.validation.valid) {
                    message += ' ‚úÖ Code validated successfully.';
                } else {
                    message += ` ‚ö†Ô∏è ${result.validation.errors.length} validation issues found.`;
                }
            }
            
            if (window.showAlert) {
                window.showAlert(message, result.validation?.valid !== false ? 'success' : 'warning');
            } else {
                alert(message);
            }
            
            hideAdsModal();
            loadAdsCodes();
            loadValidationOverview();
        } else {
            throw new Error(result.message || 'Unknown error occurred');
        }
    } catch (error) {
        console.error('‚ùå Save ads error:', error);
        
        let errorMessage = 'Failed to save ads code: ' + error.message;
        
        if (error.message.includes('Unexpected token')) {
            errorMessage = 'Server returned invalid response. Please check if you are logged in as admin.';
        }
        
        if (window.showAlert) {
            window.showAlert(errorMessage, 'danger');
        } else {
            alert(errorMessage);
        }
    } finally {
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
    }
}

async function loadValidationOverview() {
    try {
        const response = await fetch('/api/admin/ads/validation-report', {
            headers: { 'Accept': 'application/json' }
        });
        
        if (!response.ok) return;
        
        const result = await response.json();
        if (!result.success) return;
        
        const overview = result.data.overview;
        const overviewDiv = document.getElementById('validationOverview');
        
        overviewDiv.innerHTML = `
            <div style="background: linear-gradient(135deg, #27ae60, #2ecc71); color: white; padding: 20px; border-radius: 8px; text-align: center;">
                <h4 style="margin: 0; font-size: 24px;">${overview.valid_codes || 0}</h4>
                <p style="margin: 5px 0 0 0; opacity: 0.9;">Valid Codes</p>
            </div>
            <div style="background: linear-gradient(135deg, #e74c3c, #c0392b); color: white; padding: 20px; border-radius: 8px; text-align: center;">
                <h4 style="margin: 0; font-size: 24px;">${overview.invalid_codes || 0}</h4>
                <p style="margin: 5px 0 0 0; opacity: 0.9;">Invalid Codes</p>
            </div>
            <div style="background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 20px; border-radius: 8px; text-align: center;">
                <h4 style="margin: 0; font-size: 24px;">${overview.warning_codes || 0}</h4>
                <p style="margin: 5px 0 0 0; opacity: 0.9;">Warning Codes</p>
            </div>
            <div style="background: linear-gradient(135deg, #3498db, #2980b9); color: white; padding: 20px; border-radius: 8px; text-align: center;">
                <h4 style="margin: 0; font-size: 24px;">${Number(overview.avg_security_score || 0).toFixed(1)}</h4>
                <p style="margin: 5px 0 0 0; opacity: 0.9;">Avg Security Score</p>
            </div>
        `;
    } catch (error) {
        console.error('Failed to load validation overview:', error);
    }
}

async function loadAdsCodes() {
    console.log('üìä Loading ads codes with validation data...');
    
    const adsDiv = document.getElementById('adsCodesList');
    
    try {
        adsDiv.innerHTML = `
            <div style="text-align: center; padding: 50px; color: #7f8c8d;">
                <i class="fas fa-spinner fa-spin" style="font-size: 32px; margin-bottom: 20px; color: #bdc3c7;"></i>
                <h3>Loading Ads Settings...</h3>
            </div>
        `;
        
        const response = await fetch('/api/admin/ads', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            const responseText = await response.text();
            console.error('‚ùå Non-JSON response received:', responseText.substring(0, 200));
            throw new Error('Server returned HTML instead of JSON. Please check if you are logged in as admin.');
        }
        
        const data = await response.json();
        console.log('üìä Loaded ads data:', data);
        
        if (data.success && data.data && data.data.length > 0) {
            adsDiv.innerHTML = data.data.map(ads => {
                const validationBadge = getValidationBadge(ads.validation_status, ads.validation_score);
                const statusBadge = getStatusBadge(ads.status);
                
                return `
                    <div style="border: 1px solid #e9ecef; border-radius: 8px; padding: 20px; margin-bottom: 15px;">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div style="flex: 1;">
                                <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                                    <h4 style="margin: 0;">${escapeHtml(ads.name)}</h4>
                                    ${validationBadge}
                                    ${statusBadge}
                                </div>
                                <p style="color: #7f8c8d; margin: 5px 0;">${escapeHtml(ads.description || 'No description')}</p>
                                <div style="display: flex; gap: 15px; margin-top: 10px; flex-wrap: wrap;">
                                    <small style="color: #999;">Type: ${escapeHtml(ads.type)}</small>
                                    <small style="color: #999;">Position: ${escapeHtml(ads.position)}</small>
                                    ${ads.publisher_id ? `<small style="color: #999;">Publisher: ${escapeHtml(ads.publisher_id)}</small>` : ''}
                                    ${ads.validation_score ? `<small style="color: #999;">Security: ${ads.validation_score}/10</small>` : ''}
                                    ${ads.last_validated ? `<small style="color: #999;">Last Validated: ${new Date(ads.last_validated).toLocaleDateString()}</small>` : ''}
                                </div>
                                ${getValidationDetails(ads)}
                            </div>
                            <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                                <button onclick="validateAds('${ads.id}')" class="btn btn-info" style="padding: 5px 10px; font-size: 12px;">
                                    <i class="fas fa-shield-alt"></i> Validate
                                </button>
                                <button onclick="editAds('${ads.id}')" class="btn btn-primary" style="padding: 5px 10px; font-size: 12px;">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button onclick="deleteAds('${ads.id}')" class="btn btn-danger" style="padding: 5px 10px; font-size: 12px;">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            console.log('‚úÖ Rendered', data.data.length, 'ads codes');
        } else {
            adsDiv.innerHTML = `
                <div style="text-align: center; padding: 50px; color: #7f8c8d;">
                    <i class="fas fa-ad" style="font-size: 64px; margin-bottom: 20px; color: #bdc3c7;"></i>
                    <h3>No Ads Codes Yet</h3>
                    <p>Add your first Google AdSense, Analytics, or custom advertising code</p>
                </div>
            `;
            console.log('‚ÑπÔ∏è No ads codes found');
        }
    } catch (error) {
        console.error('‚ùå Load ads error:', error);
        
        let errorMessage = `Failed to Load Ads Codes<br>Error: ${escapeHtml(error.message)}`;
        
        if (error.message.includes('Unexpected token')) {
            errorMessage = `Failed to Load Ads Codes<br>Error: Server returned HTML instead of JSON. Please check if you are logged in as admin.`;
        }
        
        adsDiv.innerHTML = `
            <div style="text-align: center; padding: 50px; color: #e74c3c;">
                <i class="fas fa-exclamation-triangle" style="font-size: 64px; margin-bottom: 20px;"></i>
                <h3>${errorMessage}</h3>
                <button onclick="loadAdsCodes()" class="btn btn-primary" style="margin-top: 15px;">
                    <i class="fas fa-refresh"></i> Retry
                </button>
            </div>
        `;
    }
}

function getValidationBadge(status, score) {
    const badges = {
        'valid': '<span style="background: #27ae60; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;"><i class="fas fa-check"></i> Verified</span>',
        'invalid': '<span style="background: #e74c3c; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;"><i class="fas fa-times"></i> Invalid</span>',
        'warning': '<span style="background: #f39c12; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;"><i class="fas fa-exclamation"></i> Warning</span>',
        'pending': '<span style="background: #95a5a6; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;"><i class="fas fa-clock"></i> Pending</span>'
    };
    return badges[status] || badges['pending'];
}

function getStatusBadge(status) {
    const badges = {
        'active': '<span style="background: #27ae60; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;">Active</span>',
        'inactive': '<span style="background: #95a5a6; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;">Inactive</span>',
        'pending_review': '<span style="background: #f39c12; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;">Pending Review</span>'
    };
    return badges[status] || badges['pending_review'];
}

function getValidationDetails(ads) {
    if (!ads.validation_errors && !ads.validation_warnings) return '';
    
    let details = '';
    
    if (ads.validation_errors && ads.validation_errors.length > 0) {
        details += `
            <div style="margin-top: 10px; padding: 10px; background: #fdf2f2; border-left: 4px solid #e74c3c; border-radius: 4px;">
                <strong style="color: #e74c3c;">Errors:</strong>
                <ul style="margin: 5px 0 0 0; padding-left: 20px; color: #e74c3c; font-size: 12px;">
                    ${ads.validation_errors.slice(0, 2).map(error => `<li>${escapeHtml(error)}</li>`).join('')}
                    ${ads.validation_errors.length > 2 ? `<li>... and ${ads.validation_errors.length - 2} more</li>` : ''}
                </ul>
            </div>
        `;
    }
    
    if (ads.validation_warnings && ads.validation_warnings.length > 0) {
        details += `
            <div style="margin-top: 10px; padding: 10px; background: #fefbf3; border-left: 4px solid #f39c12; border-radius: 4px;">
                <strong style="color: #f39c12;">Warnings:</strong>
                <ul style="margin: 5px 0 0 0; padding-left: 20px; color: #f39c12; font-size: 12px;">
                    ${ads.validation_warnings.slice(0, 2).map(warning => `<li>${escapeHtml(warning)}</li>`).join('')}
                    ${ads.validation_warnings.length > 2 ? `<li>... and ${ads.validation_warnings.length - 2} more</li>` : ''}
                </ul>
            </div>
        `;
    }
    
    return details;
}

async function validateAds(id) {
    try {
        const response = await fetch(`/api/admin/ads/${id}/validate`, {
            method: 'POST',
            headers: { 'Accept': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            if (window.showAlert) {
                window.showAlert('Ads code validation completed!', 'success');
            } else {
                alert('Ads code validation completed!');
            }
            loadAdsCodes();
            loadValidationOverview();
        } else {
            throw new Error(result.message || 'Validation failed');
        }
    } catch (error) {
        console.error('‚ùå Validate ads error:', error);
        if (window.showAlert) {
            window.showAlert('Failed to validate ads code: ' + error.message, 'danger');
        } else {
            alert('Failed to validate ads code: ' + error.message);
        }
    }
}

async function handleBulkValidate() {
    if (!confirm('This will validate all ads codes. Continue?')) return;
    
    const btn = document.getElementById('bulkValidateBtn');
    const originalText = btn.innerHTML;
    
    try {
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Validating...';
        btn.disabled = true;
        
        const response = await fetch('/api/admin/ads/bulk-validate', {
            method: 'POST',
            headers: { 'Accept': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const data = result.data;
            if (window.showAlert) {
                window.showAlert(`Bulk validation completed! Valid: ${data.validCodes}, Invalid: ${data.invalidCodes}, Errors: ${data.errorCodes}`, 'success');
            } else {
                alert(`Bulk validation completed!\nValid: ${data.validCodes}\nInvalid: ${data.invalidCodes}\nErrors: ${data.errorCodes}`);
            }
            loadAdsCodes();
            loadValidationOverview();
        } else {
            throw new Error(result.message || 'Bulk validation failed');
        }
    } catch (error) {
        console.error('‚ùå Bulk validate error:', error);
        if (window.showAlert) {
            window.showAlert('Bulk validation failed: ' + error.message, 'danger');
        } else {
            alert('Bulk validation failed: ' + error.message);
        }
    } finally {
        btn.innerHTML = originalText;
        btn.disabled = false;
    }
}

async function showValidationReport() {
    document.getElementById('reportModal').style.display = 'flex';
    
    try {
        const response = await fetch('/api/admin/ads/validation-report', {
            headers: { 'Accept': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            const data = result.data;
            
            document.getElementById('reportContent').innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center;">
                        <h4 style="color: #27ae60; margin: 0;">${data.overview.valid_codes || 0}</h4>
                        <p style="margin: 5px 0;">Valid Codes</p>
                    </div>
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center;">
                        <h4 style="color: #e74c3c; margin: 0;">${data.overview.invalid_codes || 0}</h4>
                        <p style="margin: 5px 0;">Invalid Codes</p>
                    </div>
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center;">
                        <h4 style="color: #f39c12; margin: 0;">${data.overview.warning_codes || 0}</h4>
                        <p style="margin: 5px 0;">Warning Codes</p>
                    </div>
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center;">
                        <h4 style="color: #3498db; margin: 0;">${Number(data.overview.avg_security_score || 0).toFixed(1)}</h4>
                        <p style="margin: 5px 0;">Avg Security Score</p>
                    </div>
                </div>
                
                <h4>üìä By Type</h4>
                <div style="margin-bottom: 30px;">
                    ${data.byType.map(type => `
                        <div style="display: flex; justify-content: space-between; padding: 10px; border-bottom: 1px solid #eee;">
                            <span>${type.type}</span>
                            <span>${type.valid_count}/${type.count} valid (${Number(type.avg_score || 0).toFixed(1)} avg score)</span>
                        </div>
                    `).join('')}
                </div>
                
                <h4>üïí Recent Validations</h4>
                <div style="max-height: 200px; overflow-y: auto;">
                    ${data.recentValidations.map(item => `
                        <div style="display: flex; justify-content: space-between; padding: 8px; border-bottom: 1px solid #f0f0f0;">
                            <span>${escapeHtml(item.name)}</span>
                            <span>${getValidationBadge(item.validation_status, item.validation_score)} ${Number(item.validation_score || 0).toFixed(1)}/10</span>
                        </div>
                    `).join('')}
                </div>
            `;
        } else {
            throw new Error(result.message || 'Failed to load report');
        }
    } catch (error) {
        console.error('‚ùå Load validation report error:', error);
        document.getElementById('reportContent').innerHTML = `
            <div style="text-align: center; padding: 30px; color: #e74c3c;">
                <h4>Failed to Load Report</h4>
                <p>${escapeHtml(error.message)}</p>
            </div>
        `;
    }
}

async function generateAdsTxt() {
    const btn = document.getElementById('generateAdsTxtBtn');
    const originalText = btn.innerHTML;
    
    try {
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
        btn.disabled = true;
        
        const response = await fetch('/api/admin/ads/generate-ads-txt', {
            method: 'POST',
            headers: { 'Accept': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            if (window.showAlert) {
                window.showAlert('ads.txt file generated successfully! Check /public/ads.txt', 'success');
            } else {
                alert('ads.txt file generated successfully!\n\nFile location: /public/ads.txt\nPublisher IDs: ' + result.data.publisherIds.join(', '));
            }
        } else {
            throw new Error(result.message || 'Failed to generate ads.txt');
        }
    } catch (error) {
        console.error('‚ùå Generate ads.txt error:', error);
        if (window.showAlert) {
            window.showAlert('Failed to generate ads.txt: ' + error.message, 'danger');
        } else {
            alert('Failed to generate ads.txt: ' + error.message);
        }
    } finally {
        btn.innerHTML = originalText;
        btn.disabled = false;
    }
}

async function deleteAds(id) {
    if (!confirm('Are you sure you want to delete this ads code?')) return;
    
    try {
        const response = await fetch(`/api/admin/ads/${id}`, { 
            method: 'DELETE',
            headers: { 'Accept': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
            if (window.showAlert) {
                window.showAlert('Ads code deleted successfully!', 'success');
            } else {
                alert('Ads code deleted successfully!');
            }
            loadAdsCodes();
            loadValidationOverview();
        } else {
            throw new Error(result.message || 'Delete failed');
        }
    } catch (error) {
        console.error('‚ùå Delete ads error:', error);
        if (window.showAlert) {
            window.showAlert('Failed to delete ads code: ' + error.message, 'danger');
        } else {
            alert('Failed to delete ads code: ' + error.message);
        }
    }
}

function editAds(id) {
    alert('Edit functionality coming soon!');
}

// Utility function to escape HTML
function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return (text || '').toString().replace(/[&<>"']/g, m => map[m]);
}
</script>',
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-right: 1px solid rgba(255, 255, 255, 0.2);
            padding: 2rem 0;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .sidebar.mobile-hidden {
            transform: translateX(-100%);
        }

        .logo {
            text-align: center;
            margin-bottom: 2rem;
            padding: 0 1.5rem;
        }

        .logo h1 {
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 2rem;
            font-weight: bold;
        }

        .nav-menu {
            list-style: none;
            padding: 0 1rem;
        }

        .nav-item {
            margin-bottom: 0.5rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 1rem 1.5rem;
            color: #666;
            text-decoration: none;
            border-radius: 12px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .nav-link:hover,
        .nav-link.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            transform: translateX(5px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .nav-link i {
            margin-right: 1rem;
            font-size: 1.2rem;
            width: 24px;
            text-align: center;
        }

        .nav-link span {
            font-weight: 500;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 2rem;
            transition: margin-left 0.3s ease;
        }

        .main-content.sidebar-collapsed {
            margin-left: 0;
        }

        /* Header */
        .page-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
        }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2, #ff6b6b);
        }

        .mobile-toggle {
            display: none;
            background: none;
            border: none;
            font-size: 1.5rem;
            color: #666;
            cursor: pointer;
            margin-right: 1rem;
        }

        .page-title {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .page-title h1 {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(45deg, #667eea, #764ba2);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin: 0;
        }

        .page-title .title-icon {
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 12px 24px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            box-shadow: 0 8px 25px rgba(231, 76, 60, 0.3);
        }

        .btn-danger:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(231, 76, 60, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #95a5a6, #7f8c8d);
            color: white;
            box-shadow: 0 8px 25px rgba(149, 165, 166, 0.3);
        }

        .btn-secondary:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(149, 165, 166, 0.4);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-sm {
            padding: 8px 16px;
            font-size: 12px;
        }

        /* Videos Container */
        .videos-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
            min-height: 500px;
        }

        /* Video Card */
        .video-card {
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .video-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, #3498db, #9b59b6, #e74c3c, #27ae60);
            background-size: 300% 100%;
            animation: gradientFlow 3s ease infinite;
        }

        @keyframes gradientFlow {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .video-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            border-color: rgba(102, 126, 234, 0.3);
        }

        .video-info {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.5rem;
            gap: 2rem;
        }

        .video-details {
            flex: 1;
        }

        .video-details h4 {
            color: #2c3e50;
            margin-bottom: 1rem;
            font-size: 1.4rem;
            font-weight: 600;
            line-height: 1.3;
        }

        .video-description {
            color: #7f8c8d;
            margin-bottom: 1.5rem;
            line-height: 1.6;
            font-size: 1rem;
        }

        .video-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.85rem;
            color: #666;
            background: rgba(255, 255, 255, 0.8);
            padding: 0.5rem 1rem;
            border-radius: 25px;
            border: 1px solid rgba(0, 0, 0, 0.05);
            backdrop-filter: blur(10px);
        }

        .meta-item i {
            font-size: 0.9rem;
        }

        .status-published { 
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
            font-weight: 600;
        }
        .status-draft { 
            background: linear-gradient(135deg, #f39c12, #e67e22);
            color: white;
            font-weight: 600;
        }
        .status-private { 
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            font-weight: 600;
        }

        .video-actions {
            display: flex;
            gap: 0.5rem;
            flex-shrink: 0;
        }

        .video-preview {
            margin-top: 1.5rem;
            text-align: center;
            border-radius: 15px;
            overflow: hidden;
            background: rgba(0, 0, 0, 0.02);
            padding: 1rem;
        }

        .video-preview video {
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            transition: transform 0.3s ease;
        }

        .video-preview video:hover {
            transform: scale(1.02);
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #7f8c8d;
        }

        .empty-state i {
            font-size: 5rem;
            margin-bottom: 1.5rem;
            color: #bdc3c7;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.7; transform: scale(1); }
            50% { opacity: 1; transform: scale(1.05); }
        }

        .empty-state h3 {
            margin-bottom: 1rem;
            font-size: 1.8rem;
            color: #95a5a6;
        }

        .empty-state p {
            font-size: 1.1rem;
            max-width: 400px;
            margin: 0 auto;
        }

        /* Modal Styles */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 2000;
            display: none;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(8px);
            padding: 1rem;
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            width: 100%;
            max-width: 700px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            animation: modalSlideIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .modal-header {
            padding: 2rem 2rem 1rem;
            border-bottom: 2px solid rgba(0, 0, 0, 0.05);
            position: relative;
        }

        .modal-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 20px 20px 0 0;
        }

        .modal-header h3 {
            color: #2c3e50;
            font-size: 1.8rem;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .modal-body {
            padding: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #2c3e50;
            font-size: 0.95rem;
        }

        .required {
            color: #e74c3c;
            margin-left: 3px;
        }

        .form-control {
            width: 100%;
            padding: 1rem 1.25rem;
            border: 2px solid rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            font-size: 0.95rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            background: rgba(255, 255, 255, 0.95);
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .help-text {
            color: #6c757d;
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .help-text i {
            color: #3498db;
        }

        /* Progress */
        .progress-container {
            margin: 1.5rem 0;
            padding: 1.5rem;
            background: rgba(102, 126, 234, 0.05);
            border-radius: 15px;
            display: none;
            border: 2px solid rgba(102, 126, 234, 0.1);
        }

        .progress-bar-container {
            background: rgba(0, 0, 0, 0.1);
            border-radius: 25px;
            overflow: hidden;
            margin-bottom: 1rem;
            height: 12px;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2, #4ecdc4);
            background-size: 200% 100%;
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 25px;
            animation: progressFlow 2s ease-in-out infinite;
        }

        @keyframes progressFlow {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .progress-text {
            text-align: center;
            font-size: 0.9rem;
            color: #2c3e50;
            font-weight: 600;
        }

        .modal-footer {
            padding: 1rem 2rem 2rem;
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        /* Notifications */
        .notification {
            position: fixed;
            top: 2rem;
            right: 2rem;
            padding: 1rem 1.5rem;
            border-radius: 15px;
            color: white;
            font-weight: 600;
            z-index: 9999;
            max-width: 400px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
            animation: slideInRight 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .notification.success { background: linear-gradient(135deg, #27ae60, #2ecc71); }
        .notification.error { background: linear-gradient(135deg, #e74c3c, #c0392b); }
        .notification.warning { background: linear-gradient(135deg, #f39c12, #e67e22); }
        .notification.info { background: linear-gradient(135deg, #3498db, #2980b9); }

        /* Overlay for mobile */
        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        .overlay.active {
            display: block;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.mobile-visible {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 1rem;
            }

            .mobile-toggle {
                display: block;
            }

            .page-header {
                padding: 1.5rem;
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .page-title {
                flex-direction: column;
                gap: 1rem;
            }

            .page-title h1 {
                font-size: 2rem;
            }

            .video-info {
                flex-direction: column;
                gap: 1rem;
            }

            .video-meta {
                flex-direction: column;
                gap: 0.5rem;
            }

            .video-actions {
                justify-content: center;
            }

            .modal-content {
                width: 95%;
                margin: 1rem;
            }

            .modal-body {
                padding: 1.5rem;
            }

            .modal-footer {
                flex-direction: column-reverse;
            }

            .videos-container {
                padding: 1.5rem;
            }

            .video-card {
                padding: 1.5rem;
            }
        }

        @media (max-width: 480px) {
            .page-title .title-icon {
                width: 50px;
                height: 50px;
                font-size: 1.2rem;
            }

            .video-preview video {
                width: 100%;
                height: auto;
            }

            .notification {
                top: 1rem;
                right: 1rem;
                left: 1rem;
                max-width: none;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <nav class="sidebar" id="sidebar">
            <div class="logo">
                <h1><i class="fas fa-video"></i> KlipQ</h1>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="/admin" class="nav-link">
                        <i class="fas fa-home"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/videos" class="nav-link active">
                        <i class="fas fa-video"></i>
                        <span>Videos</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/categories" class="nav-link">
                        <i class="fas fa-tags"></i>
                        <span>Categories</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/series" class="nav-link">
                        <i class="fas fa-list"></i>
                        <span>Series</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/users" class="nav-link">
                        <i class="fas fa-users"></i>
                        <span>Users</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/analytics" class="nav-link">
                        <i class="fas fa-chart-line"></i>
                        <span>Analytics</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/ads" class="nav-link">
                        <i class="fas fa-bullhorn"></i>
                        <span>Advertisements</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/settings" class="nav-link">
                        <i class="fas fa-cog"></i>
                        <span>Settings</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/api-dashboard" class="nav-link">
                        <i class="fas fa-code"></i>
                        <span>API & RSS</span>
                    </a>
                </li>
            </ul>
        </nav>

        <!-- Overlay for mobile -->
        <div class="overlay" id="overlay"></div>

        <!-- Main Content -->
        <main class="main-content" id="mainContent">
            <!-- Header -->
            <header class="page-header">
                <div class="page-title">
                    <button class="mobile-toggle" id="mobileToggle">
                        <i class="fas fa-bars"></i>
                    </button>
                    <div class="title-icon">
                        <i class="fas fa-video"></i>
                    </div>
                    <h1>Manage Videos</h1>
                </div>
                <button id="uploadVideoBtn" class="btn btn-primary">
                    <i class="fas fa-plus"></i>
                    Upload Video
                </button>
            </header>

            <!-- Videos Container -->
            <div class="videos-container">
                <div id="videosList">
                    <div class="empty-state">
                        <i class="fas fa-video"></i>
                        <h3>Loading Videos...</h3>
                        <p>Please wait while we fetch your videos</p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Upload Video Modal -->
    <div id="uploadVideoModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-upload"></i> Upload New Video</h3>
            </div>
            
            <form id="uploadVideoForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="form-group">
                        <label class="form-label">Title<span class="required">*</span></label>
                        <input type="text" name="title" class="form-control" required placeholder="Enter a compelling video title">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="3" placeholder="Describe your video content (optional)"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <select name="category_id" id="categorySelect" class="form-control">
                            <option value="">Loading categories...</option>
                        </select>
                        <small class="help-text">
                            <i class="fas fa-info-circle"></i>
                            Select a category for better organization
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Series (Optional)</label>
                        <select name="series_id" id="seriesSelect" class="form-control">
                            <option value="">Loading series...</option>
                        </select>
                        <small class="help-text">
                            <i class="fas fa-info-circle"></i>
                            Optionally group this video into a series
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Video Quality</label>
                        <select name="video_quality" class="form-control">
                            <option value="720p">720p (Recommended)</option>
                            <option value="360p">360p (Low Quality)</option>
                            <option value="1080p">1080p (High Quality)</option>
                            <option value="4K">4K (Ultra High Quality)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Status</label>
                        <select name="status" class="form-control">
                            <option value="published">Published (Visible to everyone)</option>
                            <option value="draft">Draft (Not visible)</option>
                            <option value="private">Private (Only you can see)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Video File<span class="required">*</span></label>
                        <input type="file" name="video" accept="video/*" class="form-control" required>
                        <small class="help-text">
                            <i class="fas fa-info-circle"></i>
                            Supported formats: MP4, AVI, MOV, WMV, FLV (Max: 500MB)
                        </small>
                    </div>
                    
                    <div id="uploadProgress" class="progress-container">
                        <div class="progress-bar-container">
                            <div id="progressBar" class="progress-bar"></div>
                        </div>
                        <p id="progressText" class="progress-text">Uploading...</p>
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button type="button" id="cancelUploadBtn" class="btn btn-secondary">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                    <button type="submit" id="submitUploadBtn" class="btn btn-primary">
                        <i class="fas fa-upload"></i>
                        Upload Video
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let currentXHR = null;
        let categoriesLoaded = false;
        let seriesLoaded = false;

        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing video upload page...');
            
            // Mobile navigation
            const mobileToggle = document.getElementById('mobileToggle');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('overlay');

            function toggleSidebar() {
                sidebar.classList.toggle('mobile-visible');
                overlay.classList.toggle('active');
            }

            mobileToggle.addEventListener('click', toggleSidebar);
            overlay.addEventListener('click', toggleSidebar);

            // Responsive handling
            window.addEventListener('resize', function() {
                if (window.innerWidth > 768) {
                    sidebar.classList.remove('mobile-visible');
                    overlay.classList.remove('active');
                }
            });
            
            // Event listeners
            document.getElementById('uploadVideoBtn').addEventListener('click', showUploadModal);
            document.getElementById('cancelUploadBtn').addEventListener('click', hideUploadModal);
            document.getElementById('uploadVideoForm').addEventListener('submit', handleVideoUpload);
            
            // Close modal when clicking outside
            document.getElementById('uploadVideoModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    hideUploadModal();
                }
            });
            
            // Load initial data
            loadVideos();
        });

        function showUploadModal() {
            console.log('Opening upload modal...');
            document.getElementById('uploadVideoModal').style.display = 'flex';
            
            // Load categories and series when modal opens (if not already loaded)
            if (!categoriesLoaded) {
                loadCategories();
            }
            if (!seriesLoaded) {
                loadSeries();
            }
        }

        function hideUploadModal() {
            if (currentXHR) {
                currentXHR.abort();
                currentXHR = null;
            }
            document.getElementById('uploadVideoModal').style.display = 'none';
            document.getElementById('uploadVideoForm').reset();
            document.getElementById('uploadProgress').style.display = 'none';
            document.getElementById('progressBar').style.width = '0%';
            
            // Reset dropdown to loading state
            document.getElementById('categorySelect').innerHTML = '<option value="">Loading categories...</option>';
            document.getElementById('seriesSelect').innerHTML = '<option value="">Loading series...</option>';
            categoriesLoaded = false;
            seriesLoaded = false;
        }

        async function loadCategories() {
            console.log('Loading categories for dropdown...');
            
            try {
                const response = await fetch('/api/categories', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error('HTTP ' + response.status + ': ' + response.statusText);
                }
                
                const data = await response.json();
                const select = document.getElementById('categorySelect');
                
                if (data.success && data.data && data.data.length > 0) {
                    select.innerHTML = '<option value="">Select Category (Optional)</option>' + 
                        data.data.map(cat => '<option value="' + cat.id + '">' + cat.name + '</option>').join('');
                } else {
                    select.innerHTML = '<option value="">No categories available</option>';
                }
                
                categoriesLoaded = true;
                
            } catch (error) {
                console.error('Failed to load categories:', error);
                document.getElementById('categorySelect').innerHTML = '<option value="">Failed to load categories</option>';
                showNotification('Failed to load categories. You can still upload without selecting a category.', 'warning');
            }
        }

        async function loadSeries() {
            console.log('Loading series for dropdown...');
            
            try {
                const response = await fetch('/api/series', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error('HTTP ' + response.status + ': ' + response.statusText);
                }
                
                const data = await response.json();
                const select = document.getElementById('seriesSelect');
                
                if (data.success && data.data && data.data.length > 0) {
                    select.innerHTML = '<option value="">No Series (Optional)</option>' + 
                        data.data.map(series => '<option value="' + series.id + '">' + series.title + '</option>').join('');
                } else {
                    select.innerHTML = '<option value="">No series available</option>';
                }
                
                seriesLoaded = true;
                
            } catch (error) {
                console.error('Failed to load series:', error);
                document.getElementById('seriesSelect').innerHTML = '<option value="">No Series (Optional)</option>';
            }
        }

        async function handleVideoUpload(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const fileInput = document.querySelector('input[name="video"]');
            const file = fileInput.files[0];
            
            // Validation
            if (!file) {
                showNotification('Please select a video file', 'error');
                return;
            }
            
            const maxSize = 500 * 1024 * 1024; // 500MB
            if (file.size > maxSize) {
                showNotification('File size exceeds 500MB limit', 'error');
                return;
            }
            
            const allowedTypes = ['video/mp4', 'video/avi', 'video/mov', 'video/wmv', 'video/x-flv'];
            if (!allowedTypes.includes(file.type) && !file.name.match(/\.(mp4|avi|mov|wmv|flv)$/i)) {
                showNotification('Please select a valid video file (MP4, AVI, MOV, WMV, FLV)', 'error');
                return;
            }
            
            const title = formData.get('title');
            if (!title || title.trim().length < 3) {
                showNotification('Title must be at least 3 characters long', 'error');
                return;
            }
            
            // Show progress
            document.getElementById('uploadProgress').style.display = 'block';
            document.getElementById('submitUploadBtn').disabled = true;
            document.getElementById('cancelUploadBtn').disabled = true;
            
            try {
                currentXHR = new XMLHttpRequest();
                
                // Progress tracking
                currentXHR.upload.addEventListener('progress', function(e) {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        document.getElementById('progressBar').style.width = percentComplete + '%';
                        document.getElementById('progressText').textContent = 
                            'Uploading... ' + Math.round(percentComplete) + '% (' + formatFileSize(e.loaded) + ' / ' + formatFileSize(e.total) + ')';
                    }
                });
                
                // Success handler
                currentXHR.addEventListener('load', function() {
                    if (currentXHR.status === 200) {
                        try {
                            const result = JSON.parse(currentXHR.responseText);
                            if (result.success) {
                                showNotification('Video uploaded successfully!', 'success');
                                hideUploadModal();
                                loadVideos();
                            } else {
                                showNotification('Upload failed: ' + (result.message || 'Unknown error'), 'error');
                            }
                        } catch (parseError) {
                            showNotification('Upload completed but response was invalid', 'warning');
                        }
                    } else {
                        showNotification('Upload failed: HTTP ' + currentXHR.status, 'error');
                    }
                    
                    // Re-enable buttons
                    document.getElementById('submitUploadBtn').disabled = false;
                    document.getElementById('cancelUploadBtn').disabled = false;
                    document.getElementById('uploadProgress').style.display = 'none';
                });
                
                // Error handler
                currentXHR.addEventListener('error', function() {
                    showNotification('Upload failed: Network error. Please check your connection.', 'error');
                    document.getElementById('submitUploadBtn').disabled = false;
                    document.getElementById('cancelUploadBtn').disabled = false;
                    document.getElementById('uploadProgress').style.display = 'none';
                });
                
                // Abort handler
                currentXHR.addEventListener('abort', function() {
                    showNotification('Upload cancelled', 'info');
                    document.getElementById('submitUploadBtn').disabled = false;
                    document.getElementById('cancelUploadBtn').disabled = false;
                    document.getElementById('uploadProgress').style.display = 'none';
                });
                
                // Send request
                currentXHR.open('POST', '/api/admin/videos/upload');
                currentXHR.send(formData);
                
            } catch (error) {
                showNotification('Upload failed: ' + error.message, 'error');
                document.getElementById('submitUploadBtn').disabled = false;
                document.getElementById('cancelUploadBtn').disabled = false;
                document.getElementById('uploadProgress').style.display = 'none';
            }
        }

        async function loadVideos() {
            try {
                const response = await fetch('/api/admin/videos');
                
                if (!response.ok) {
                    throw new Error('HTTP ' + response.status);
                }
                
                const data = await response.json();
                const videosDiv = document.getElementById('videosList');
                
                if (data.success && data.data && data.data.length > 0) {
                    videosDiv.innerHTML = data.data.map(video => {
                        return '<div class="video-card">' +
                            '<div class="video-info">' +
                                '<div class="video-details">' +
                                    '<h4>' + video.title + '</h4>' +
                                    '<p class="video-description">' + (video.description || 'No description provided') + '</p>' +
                                    '<div class="video-meta">' +
                                        '<span class="meta-item"><i class="fas fa-eye"></i> ' + (video.views_count || 0) + ' views</span>' +
                                        '<span class="meta-item"><i class="fas fa-calendar"></i> ' + new Date(video.created_at).toLocaleDateString() + '</span>' +
                                        '<span class="meta-item status-' + video.status + '"><i class="fas fa-circle"></i> ' + video.status + '</span>' +
                                        '<span class="meta-item"><i class="fas fa-video"></i> ' + video.video_quality + '</span>' +
                                        (video.category_name ? '<span class="meta-item"><i class="fas fa-tag"></i> ' + video.category_name + '</span>' : '') +
                                        (video.series_title ? '<span class="meta-item"><i class="fas fa-list"></i> ' + video.series_title + '</span>' : '') +
                                    '</div>' +
                                '</div>' +
                                '<div class="video-actions">' +
                                    '<button class="btn btn-primary btn-sm edit-btn" data-id="' + video.id + '">' +
                                        '<i class="fas fa-edit"></i>' +
                                    '</button>' +
                                    '<button class="btn btn-danger btn-sm delete-btn" data-id="' + video.id + '">' +
                                        '<i class="fas fa-trash"></i>' +
                                    '</button>' +
                                '</div>' +
                            '</div>' +
                            (video.video_url ? 
                                '<div class="video-preview">' +
                                    '<video controls style="width: 100%; max-width: 400px; height: 225px; object-fit: cover;">' +
                                        '<source src="' + video.video_url + '" type="video/mp4">' +
                                        'Your browser does not support the video tag.' +
                                    '</video>' +
                                '</div>' : '') +
                        '</div>';
                    }).join('');
                    
                    // Add event listeners for buttons
                    document.querySelectorAll('.delete-btn').forEach(btn => {
                        btn.addEventListener('click', function() {
                            deleteVideo(this.dataset.id);
                        });
                    });
                    
                    document.querySelectorAll('.edit-btn').forEach(btn => {
                        btn.addEventListener('click', function() {
                            editVideo(this.dataset.id);
                        });
                    });
                    
                } else {
                    videosDiv.innerHTML = 
                        '<div class="empty-state">' +
                            '<i class="fas fa-video"></i>' +
                            '<h3>No Videos Yet</h3>' +
                            '<p>Upload your first video to get started!</p>' +
                        '</div>';
                }
            } catch (error) {
                document.getElementById('videosList').innerHTML = 
                    '<div class="empty-state" style="color: #e74c3c;">' +
                        '<i class="fas fa-exclamation-triangle"></i>' +
                        '<h3>Failed to Load Videos</h3>' +
                        '<p>Error: ' + error.message + '</p>' +
                        '<button id="retryVideosBtn" class="btn btn-primary" style="margin-top: 15px;">' +
                            '<i class="fas fa-refresh"></i> Retry' +
                        '</button>' +
                    '</div>';
                
                document.getElementById('retryVideosBtn')?.addEventListener('click', loadVideos);
            }
        }

        function formatFileSize(bytes) {
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            if (bytes === 0) return '0 Bytes';
            const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
            return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
        }

        function showNotification(message, type) {
            type = type || 'info';
            const notification = document.createElement('div');
            notification.className = 'notification ' + type;
            notification.innerHTML = '<i class="fas fa-' + getNotificationIcon(type) + '"></i> ' + message;
            
            document.body.appendChild(notification);
            
            // Remove after 5 seconds
            setTimeout(function() {
                notification.style.animation = 'slideInRight 0.3s ease-out reverse';
                setTimeout(function() {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 5000);
        }

        function getNotificationIcon(type) {
            switch(type) {
                case 'success': return 'check-circle';
                case 'error': return 'exclamation-circle';
                case 'warning': return 'exclamation-triangle';
                default: return 'info-circle';
            }
        }

        async function deleteVideo(id) {
            if (!confirm('Are you sure you want to delete this video? This action cannot be undone.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/admin/videos/' + id, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showNotification('Video deleted successfully!', 'success');
                    loadVideos();
                } else {
                    showNotification('Error: ' + result.message, 'error');
                }
            } catch (error) {
                showNotification('Failed to delete video', 'error');
            }
        }

        function editVideo(id) {
            showNotification('Edit functionality coming soon!', 'info');
        }
    </script>
</body>
</html>